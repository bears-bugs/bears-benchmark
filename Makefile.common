TOPDIR=$(dir $(lastword $(MAKEFILE_LIST)))
DOCKER_REGISTRY ?= docker.io
DOCKER_ORG      ?= enmasseproject
DOCKER          ?= docker
PROJECT_PREFIX  ?= enmasse
PROJECT_NAME    ?= $(shell basename $(CURDIR))
COMMIT          ?= latest
TAG             ?= latest
VERSION         ?= $(shell cat $(TOPDIR)/release.version)
MOCHA_FILE      ?= build/test-results/test/TEST-$(PROJECT_NAME).xml
NPM             ?= $(shell command -v npm 2> /dev/null)
SKIP_TESTS      ?= false

all: init build test package docker_build

init:
	mkdir -p build

clean_node:
	rm -rf node_modules coverage

clean: clean_node
	rm -rf build

build_amqp_module:
	cd $(TOPDIR)artemis/activemq-artemis/artemis-protocols/artemis-amqp-protocol && mvn -q install -DskipTests

node_modules: package.json
		npm install

npm_install: node_modules

npm_test: node_modules
        ifeq ($(SKIP_TESTS),true)
		$(warning "node tests will be skipped")
        else
	       MOCHA_FILE=$(MOCHA_FILE) MOCHA_ARGS="$(MOCHA_ARGS)" npm run test
        endif

npm_coverage: npm_install
	   npm run coverage

docker_build: package
	if [ -f Dockerfile ]; then $(DOCKER) build $(DOCKER_BUILD_ARGS) --build-arg version=$(VERSION) -t $(PROJECT_PREFIX)-$(PROJECT_NAME):$(COMMIT) . ; fi
	docker images | grep $(PROJECT_PREFIX)

docker_tag:
	if [ -f Dockerfile ]; then $(DOCKER) tag $(PROJECT_PREFIX)-$(PROJECT_NAME):$(COMMIT) $(DOCKER_REGISTRY)/$(DOCKER_ORG)/$(PROJECT_NAME):$(TAG) ; fi

docker_push:
	if [ -f Dockerfile ]; then $(DOCKER) push $(DOCKER_REGISTRY)/$(DOCKER_ORG)/$(PROJECT_NAME):$(TAG) ; fi

.PHONY: all init build test package clean docker_build docker_tag docker_push
