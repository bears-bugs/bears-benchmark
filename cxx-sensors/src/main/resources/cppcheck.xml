<?xml version="1.0" encoding="us-ascii"?>
<rules>
  <rule>
    <key>CustomRuleTemplate</key>
    <cardinality>MULTIPLE</cardinality>
    <name><![CDATA[Template for custom Custom rules]]></name>
    <description>
      <![CDATA[
<p>
Follow these steps to make your custom Custom rules available in SonarQube:
</p>

<ol>
  <ol>
    <li>Create a new rule in SonarQube by "copying" this rule template and specify the <code>CheckId</code> of your custom rule, a title, a description, and a default severity.</li>
    <li>Enable the newly created rule in your quality profile</li>
  </ol>
  <li>Relaunch an analysis on your projects, et voila, your custom rules are executed!</li>
</ol>
      ]]>
    </description>
    <severity>MAJOR</severity>
  </rule>    
  <rule>
    <key>AssignmentAddressToInteger</key>
    <name>Assigning a pointer to an integer is not portable</name>
    <description>
      <![CDATA[
      <p>
Assigning a pointer to an integer (int/long/etc) is not portable
across different platforms and compilers. For example in 32-bit
Windows and linux they are same width, but in 64-bit Windows and linux
they are of different width. In worst case you end up assigning 64-bit
address to 32-bit integer. The safe way is to store addresses only in
pointer types (or typedefs like uintptr_t).
</p>
<h2>References</h2>
<p><a href="https://cwe.mitre.org/data/definitions/758.html" target="_blank">CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior</a></p>
    ]]>
    </description>
    <tag>cwe</tag>
    <internalKey>AssignmentAddressToInteger</internalKey>
    <severity>MINOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>15min</remediationFunctionGapMultiplier>
    <gapDescription>store addresses in pointer types</gapDescription>
  </rule>
  <rule>
    <key>AssignmentIntegerToAddress</key>
    <name>Assigning an integer to a pointer is not portable</name>
    <description>
      <![CDATA[
      <p>
Assigning an integer (int/long/etc) to a pointer is not portable
across different platforms and compilers. For example in 32-bit
Windows and linux they are same width, but in 64-bit Windows and linux
they are of different width. In worst case you end up assigning 64-bit
integer to 32-bit pointer. The safe way is to store addresses only in
pointer types (or typedefs like uintptr_t).
</p>
<h2>References</h2>
<p><a href="https://cwe.mitre.org/data/definitions/758.html" target="_blank">CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior</a></p>
    ]]>
    </description>
    <tag>cwe</tag>
    <internalKey>AssignmentIntegerToAddress</internalKey>
    <severity>MINOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>15min</remediationFunctionGapMultiplier>
    <gapDescription>store addresses in pointer types</gapDescription>
  </rule>
  <rule>
    <key>autoVariables</key>
    <name>Assigning address of local auto-variable to a function parameter</name>
    <description>
      <![CDATA[
      <p>
Dangerous assignment - the function parameter is assigned the address
of a local auto-variable. Local auto-variables are reserved from the
stack which is freed when the function ends. So the pointer to a local
variable is invalid after the function ends.
</p>
<h2>References</h2>
<p><a href="https://cwe.mitre.org/data/definitions/562.html" target="_blank">CWE-562: Return of Stack Variable Address</a></p>
    ]]>
    </description>
    <tag>cwe</tag>
    <tag>bug</tag>
    <internalKey>autoVariables</internalKey>
    <severity>MAJOR</severity>
    <type>VULNERABILITY</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
    <gapDescription>auto-variable is not available after function returns</gapDescription>
  </rule>
  <rule>
    <key>returnAddressOfAutoVariable</key>
    <name>Address of an auto-variable returned</name>
    <description>
      <![CDATA[
<p>
Address of an auto-variable returned.
</p>
<h2>References</h2>
<p><a href="https://cwe.mitre.org/data/definitions/562.html" target="_blank">CWE-562: Return of Stack Variable Address</a></p>
]]>
    </description>
    <tag>cwe</tag>
    <tag>bug</tag>
    <internalKey>returnAddressOfAutoVariable</internalKey>
    <severity>MAJOR</severity>
    <type>VULNERABILITY</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
    <gapDescription>auto-variable is not available after function returns</gapDescription>
  </rule>
  <rule>
    <key>returnLocalVariable</key>
    <name>Pointer to local array variable returned</name>
    <description>
<![CDATA[
<p>
Pointer to local array variable returned.
</p>
<h2>References</h2>
<p><a href="https://cwe.mitre.org/data/definitions/562.html" target="_blank">CWE-562: Return of Stack Variable Address</a></p>
]]>
    </description>
    <tag>cwe</tag>
    <tag>bug</tag>
    <internalKey>returnLocalVariable</internalKey>
    <severity>MAJOR</severity>
    <type>VULNERABILITY</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>returnReference</key>
    <name>Reference to auto variable returned.</name>
    <description>
<![CDATA[
<p>
Reference to auto variable returned.
</p>
<h2>References</h2>
<p><a href="https://cwe.mitre.org/data/definitions/562.html" target="_blank">CWE-562: Return of Stack Variable Address</a></p>
]]>
    </description>
    <tag>cwe</tag>
    <tag>bug</tag>
    <internalKey>returnReference</internalKey>
    <severity>MAJOR</severity>
    <type>VULNERABILITY</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>returnTempReference</key>
    <name>Reference to temporary returned.</name>
    <description>
<![CDATA[
<p>
Reference to temporary returned.
</p>
<h2>References</h2>
<p><a href="https://cwe.mitre.org/data/definitions/562.html" target="_blank">CWE-562: Return of Stack Variable Address</a></p>
]]>
    </description>
    <tag>cwe</tag>
    <tag>bug</tag>
    <internalKey>returnTempReference</internalKey>
    <severity>MAJOR</severity>
    <type>VULNERABILITY</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>autovarInvalidDeallocation</key>
    <name>Deallocation of an auto-variable results in undefined behaviour</name>
    <description>
      <![CDATA[
      <p>
The deallocation of an auto-variable results in undefined behaviour.
You should only free memory that has been allocated dynamically.
</p>
<h2>References</h2>
<p><a href="https://cwe.mitre.org/data/definitions/590.html" target="_blank">CWE-590: Free of Memory not on the Heap</a></p>
]]>
    </description>
    <tag>cwe</tag>
    <tag>bug</tag>
    <internalKey>autovarInvalidDeallocation</internalKey>
    <severity>MAJOR</severity>
    <type>BUG</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>arrayIndexOutOfBounds</key>
    <name>Array index out of bounds</name>
    <description>
<![CDATA[<p>
Array index out of bounds.
</p><h2>References</h2>
<p><a href="https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=47677453" target="_blank">ARR30-C. Do not form or use out-of-bounds pointers or array subscripts</a></p>
<p><a href="https://cwe.mitre.org/data/definitions/788.html" target="_blank">CWE-788: Access of Memory Location After End of Buffer</a></p>
<p><a href="https://cwe.mitre.org/data/definitions/119.html" target="_blank">CWE-119: Improper Restriction of Operations within the Bounds of a Memory Buffer</a></p>
]]>
</description>
    <tag>bug</tag>
    <tag>cert</tag>
    <tag>cwe</tag>
    <internalKey>arrayIndexOutOfBounds</internalKey>
    <severity>MAJOR</severity>
    <type>VULNERABILITY</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>bufferAccessOutOfBounds</key>
    <name>Buffer is accessed out of bounds</name>
    <description>
      <![CDATA[
      <p>
Buffer is accessed out of bounds
</p>
<h2>References</h2>
<p><a href="https://cwe.mitre.org/data/definitions/788.html" target="_blank">CWE-788: Access of Memory Location After End of Buffer</a></p>
]]>
    </description>
    <tag>cwe</tag>
    <tag>bug</tag>
    <internalKey>bufferAccessOutOfBounds</internalKey>
    <severity>MAJOR</severity>
    <type>BUG</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>outOfBounds</key>
    <name>Index is out of bounds: Supplied size is larger than actual size</name>
    <description>
<![CDATA[<p>
Index is out of bounds: Supplied size is larger than actual size.
</p><h2>References</h2>
<p><a href="https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=47677453" target="_blank">ARR30-C. Do not form or use out-of-bounds pointers or array subscripts</a></p>
<p><a href="https://cwe.mitre.org/data/definitions/788.html" target="_blank">CWE-788: Access of Memory Location After End of Buffer</a></p>
]]>
    </description>
    <tag>bug</tag>
    <tag>cert</tag>
    <tag>cwe</tag>
    <internalKey>outOfBounds</internalKey>
    <severity>MAJOR</severity>
    <type>BUG</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>terminateStrncpy</key>
    <name>The buffer may not be null-terminated after the call to strncpy()</name>
    <description>
      <![CDATA[
      <p>
The buffer 'buffer' may not be null-terminated after the call to
strncpy(). If the source string's size fits or exceeds the given size,
strncpy() does not add a zero at the end of the buffer. This causes
bugs later in the code if the code assumes buffer is null-terminated.
</p>
<h2>References</h2>
<p><a href="https://cwe.mitre.org/data/definitions/170.html" target="_blank">CWE-170: Improper Null Termination</a></p>
    ]]>
    </description>
    <tag>cwe</tag>
    <internalKey>terminateStrncpy</internalKey>
    <severity>MINOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>negativeIndex</key>
    <name>Negative array index</name>
    <description>
<![CDATA[<p>
Negative array index is always out of bounds.
</p><h2>References</h2>
<p><a href="https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=47677453" target="_blank">ARR30-C. Do not form or use out-of-bounds pointers or array subscripts</a></p>
<p><a href="https://cwe.mitre.org/data/definitions/786.html" target="_blank">CWE-786: Access of Memory Location Before Start of Buffer</a></p>
]]>
    </description>
    <tag>bug</tag>
    <tag>cert</tag>
    <tag>cwe</tag>
    <internalKey>negativeIndex</internalKey>
    <severity>MAJOR</severity>
    <type>BUG</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>insecureCmdLineArgs</key>
    <name>Buffer overrun possible for long command line arguments</name>
    <description>
<![CDATA[
<p>
Buffer overrun possible for long command line arguments.
</p>
<h2>References</h2>
<p><a href="https://cwe.mitre.org/data/definitions/119.html" target="_blank">CWE-119: Improper Restriction of Operations within the Bounds of a Memory Buffer</a></p>
]]>
    </description>
    <internalKey>insecureCmdLineArgs</internalKey>
    <tag>cwe</tag>
    <tag>bug</tag>
    <severity>MAJOR</severity>
    <type>VULNERABILITY</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>pointerOutOfBounds</key>
    <name>Undefined behaviour, pointer arithmetic 'expr' or index is out of bounds</name>
    <description>
      <![CDATA[
      <p>
Undefined behaviour, pointer arithmetic '' is out of bounds. From
chapter 6.5.6 in the C specification:
<cite>"When an expression that has
integer type is added to or subtracted from a pointer, .."</cite> and then
<cite>"If both the pointer operand and the result point to elements of the
same array object, or one past the last element of the array object,
the evaluation shall not produce an overflow; otherwise, the behavior
is undefined."</cite>
</p>
<h2>References</h2>
<p><a href="https://cwe.mitre.org/data/definitions/398.html" target="_blank">CWE-398: Indicator of Poor Code Quality</a></p>
]]>
    </description>
    <tag>cwe</tag>
    <tag>bug</tag>
    <internalKey>pointerOutOfBounds</internalKey>
    <severity>MINOR</severity>
    <type>BUG</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>arrayIndexThenCheck</key>
    <name>Array index is used before limits check</name>
    <description>
      <![CDATA[
      <p>
Defensive programming: The variable 'index' is used as an array index
before it is checked that is within limits. This can mean that the
array might be accessed out of bounds. Reorder conditions such as
<code>'(a[i] && i < 10)'</code> to <code>'(i < 10 && a[i])'</code>. That way the array will not
be accessed if the index is out of limits.
</p>
<h2>References</h2>
<p><a href="https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=47677453" target="_blank">ARR30-C. Do not form or use out-of-bounds pointers or array subscripts</a></p>
<p><a href="https://cwe.mitre.org/data/definitions/398.html" target="_blank">CWE-398: Indicator of Poor Code Quality</a></p>
]]>
    </description>
    <tag>bug</tag>
    <tag>cert</tag>
    <tag>cwe</tag>
    <internalKey>arrayIndexThenCheck</internalKey>
    <severity>MINOR</severity>
    <type>VULNERABILITY</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>noConstructor</key>
    <name>Class does not have a constructor</name>
    <description>
      <![CDATA[
      <p>
The <code>struct</code> or <code>class</code> 'classname' does not have a constructor although it has
private member variables. Member variables of builtin types are left
uninitialized when the class is instantiated. That may cause bugs or
undefined behavior.
</p>
<h2>References</h2>
<p><a href="https://cwe.mitre.org/data/definitions/398.html" target="_blank">CWE-398: Indicator of Poor Code Quality</a></p>
]]>
    </description>
    <tag>cwe</tag>
    <tag>bug</tag>
    <internalKey>noConstructor</internalKey>
    <severity>MINOR</severity>
    <type>BUG</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>uninitvar</key>
    <name>Uninitialized variable</name>
    <description>
<![CDATA[<p>
Uninitialized variable.
</p><h2>References</h2>
<p><a href="https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=482" target="_blank">EXP33-C. Do not read uninitialized memory</a></p>
<p><a href="https://cwe.mitre.org/data/definitions/908.html" target="_blank">CWE-908: Use of Uninitialized Resource</a></p>
]]>
    </description>
    <tag>bug</tag>
    <tag>cert</tag>
    <tag>cwe</tag>
    <internalKey>uninitvar</internalKey>
    <severity>MAJOR</severity>
    <type>BUG</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>operatorEqVarError</key>
    <name>Member variable is not assigned a value in the assignment operator</name>
    <description>
<![CDATA[
<p>
Member variable is not assigned a value in the assignment '::operator='.
</p>
<h2>References</h2>
<p><a href="https://cwe.mitre.org/data/definitions/398.html" target="_blank">CWE-398: Indicator of Poor Code Quality</a></p>
]]>
    </description>
    <tag>cwe</tag>
    <tag>bug</tag>
    <internalKey>operatorEqVarError</internalKey>
    <severity>MINOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>unusedPrivateFunction</key>
    <name>Unused private function</name>
    <description>
<![CDATA[
<p>
Unused private function.
</p>
<h2>References</h2>
<p><a href="https://cwe.mitre.org/data/definitions/398.html" target="_blank">CWE-398: Indicator of Poor Code Quality</a></p>
]]>
    </description>
    <tag>cwe</tag>
    <internalKey>unusedPrivateFunction</internalKey>
    <severity>MINOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>memsetClass</key>
    <name>Invalid usage of memset|memmove|memcpy on classes</name>
    <description>
      <![CDATA[
      <p>
Using memset-family on class that contains a classname is unsafe, because
constructor, destructor and copy operator calls are omitted. These are
necessary for this non-POD type to ensure that a valid object is
created.
</p>
<h2>References</h2>
<p><a href="https://cwe.mitre.org/data/definitions/762.html" target="_blank">CWE-762: Mismatched Memory Management Routines</a></p>
]]>
  </description>
    <tag>cwe</tag>
    <internalKey>memsetClass</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>operatorEq</key>
    <name>'class::operator=' should return 'class &amp;'</name>
    <description>
      <![CDATA[
      <p>
The class::operator= does not conform to standard C/C++ behaviour. To
conform to standard C/C++ behaviour, return a reference to self (such
as: <code>'class &amp;class::operator=(..) { .. return *this; }'</code>. For safety
reasons it might be better to not fix this message. If you think that
safety is always more important than conformance then please
ignore/suppress this message. For more details about this topic, see
the book "Effective C++" by Scott Meyers.
</p>
<h2>References</h2>
<p><a href="https://cwe.mitre.org/data/definitions/398.html" target="_blank">CWE-398: Indicator of Poor Code Quality</a></p>
]]>
    </description>
    <tag>cwe</tag>
    <internalKey>operatorEq</internalKey>
    <severity>MINOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>thisSubtraction</key>
    <name>Suspicious pointer subtraction</name>
    <description>
<![CDATA[
<p>
Suspicious pointer subtraction. Did you intend to write '->'?
</p>
<h2>References</h2>
<p><a href="https://cwe.mitre.org/data/definitions/398.html" target="_blank">CWE-398: Indicator of Poor Code Quality</a></p>
]]>
    </description>
    <tag>cwe</tag>
    <internalKey>thisSubtraction</internalKey>
    <severity>MINOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>operatorEqRetRefThis</key>
    <name>'operator=' should return reference to 'this' instance</name>
    <description>
      <![CDATA[
      <p>
'operator=' should return reference to 'this' instance.
</p><h2>References</h2>
<p><a href="https://cwe.mitre.org/data/definitions/398.html" target="_blank">CWE-398: 7PK - Code Quality</a></p>
    ]]>
    </description>
    <tag>cwe</tag>
    <internalKey>operatorEqRetRefThis</internalKey>
    <severity>MINOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>operatorEqToSelf</key>
    <name>'operator=' should check for assignment to self</name>
    <description>
      <![CDATA[
      <p>
'operator=' should check for assignment to self to ensure that each
block of dynamically allocated memory is owned and managed by only one
instance of the class.
</p>
<h2>References</h2>
<p><a href="https://cwe.mitre.org/data/definitions/398.html" target="_blank">CWE-398: Indicator of Poor Code Quality</a></p>
]]>
    </description>
    <tag>cwe</tag>
    <internalKey>operatorEqToSelf</internalKey>
    <severity>MINOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>exceptThrowInDestructor</key>
    <name>Throwing exception in destructor</name>
    <description>
      <![CDATA[
      <p>
The class Class is not safe because its destructor throws an
exception. If Class is used and an exception is thrown that is caught
in an outer scope the program will terminate.
</p>
<h2>References</h2>
<p><a href="https://cwe.mitre.org/data/definitions/398.html" target="_blank">CWE-398: 7PK - Code Quality</a></p>
    ]]>
    </description>
    <tag>cwe</tag>
    <internalKey>exceptThrowInDestructor</internalKey>
    <severity>CRITICAL</severity>
    <type>BUG</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>exceptDeallocThrow</key>
    <name>Throwing exception in invalid state</name>
    <description>
      <![CDATA[
      <p>
Exception thrown in invalid state, pointer points at deallocated memory.
</p><h2>References</h2>
<p><a href="https://cwe.mitre.org/data/definitions/398.html" target="_blank">CWE-398: 7PK - Code Quality</a></p>
    ]]>
    </description>
    <tag>cwe</tag>
    <internalKey>exceptDeallocThrow</internalKey>
    <severity>MINOR</severity>
    <type>BUG</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>exceptRethrowCopy</key>
    <name>Throwing a copy of the caught exception instead of rethrowing the original exception</name>
    <description>
      <![CDATA[
      <p>
Rethrowing an exception with 'throw varname;' creates an unnecessary
copy of 'varname'. To rethrow the caught exception without unnecessary
copying or slicing, use a bare 'throw;'.
</p>
<h2>References</h2>
<p><a href="https://cwe.mitre.org/data/definitions/398.html" target="_blank">CWE-398: 7PK - Code Quality</a></p>
    ]]>
    </description>
    <tag>cwe</tag>
    <internalKey>exceptRethrowCopy</internalKey>
    <severity>MINOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>catchExceptionByValue</key>
    <name>Exception should be caught by reference</name>
    <description>
      <![CDATA[
      <p>
The exception is caught by value. It could be caught as a (const)
reference which is usually recommended in C++.
</p>
<h2>References</h2>
<p><a href="https://cwe.mitre.org/data/definitions/398.html" target="_blank">CWE-398: 7PK - Code Quality</a></p>
    ]]>
    </description>
    <tag>cwe</tag>
    <internalKey>catchExceptionByValue</internalKey>
    <severity>MINOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>assignIfError</key>
    <name>Mismatching assignment and comparison, comparison is always true or false</name>
    <description>
      <![CDATA[
      <p>
Mismatching assignment and comparison, comparison is always false.
</p><h2>References</h2>
<p><a href="https://cwe.mitre.org/data/definitions/398.html" target="_blank">CWE-398: 7PK - Code Quality</a></p>
    ]]>
    </description>
    <tag>cwe</tag>
    <internalKey>assignIfError</internalKey>
    <severity>MINOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>comparisonError</key>
    <name>Expression is always true or false</name>
    <description>
      <![CDATA[
      <p>
The expression is always true/false. Check carefully
constants and operators used, these errors might be hard to spot
sometimes. In case of complex expression it might help to split it to
separate expressions.
</p>
<h2>References</h2>
<p><a href="https://cwe.mitre.org/data/definitions/398.html" target="_blank">CWE-398: Indicator of Poor Code Quality</a></p>
]]>
    </description>
    <tag>cwe</tag>
    <internalKey>comparisonError</internalKey>
    <severity>MINOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>multiCondition</key>
    <name>'else if' condition matches previous condition</name>
    <description>
      <![CDATA[
      <p>
Expression is always false because 'else if' condition matches
previous condition.
</p>
<h2>References</h2>
<p><a href="https://cwe.mitre.org/data/definitions/398.html" target="_blank">CWE-398: Indicator of Poor Code Quality</a></p>
]]>
    </description>
    <tag>cwe</tag>
    <internalKey>multiCondition</internalKey>
    <severity>MINOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>memleak</key>
    <name>Memory leak</name>
    <description>
<![CDATA[
<p>
Memory leak
</p>
<h2>References</h2>
<p><a href="https://cwe.mitre.org/data/definitions/401.html" target="_blank">CWE-401: Improper Release of Memory Before Removing Last Reference ('Memory Leak')</a></p>
]]>
    </description>
    <tag>cwe</tag>
    <tag>bug</tag>
    <internalKey>memleak</internalKey>
    <severity>MAJOR</severity>
    <type>BUG</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>resourceLeak</key>
    <name>Resource leak</name>
    <description>
<![CDATA[
<p>
Resource leak
</p>
<h2>References</h2>
<p><a href="https://cwe.mitre.org/data/definitions/775.html" target="_blank">CWE-775: Missing Release of File Descriptor or Handle after Effective Lifetime</a></p>
]]>
    </description>
    <tag>cwe</tag>
    <tag>bug</tag>
    <internalKey>resourceLeak</internalKey>
    <severity>MAJOR</severity>
    <type>BUG</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>deallocDealloc</key>
    <name>Deallocating a deallocated pointer</name>
    <description>
<![CDATA[
<p>
Deallocating a deallocated pointer.
</p>
<h2>References</h2>
<p><a href="https://cwe.mitre.org/data/definitions/415.html" target="_blank">CWE-415: Double Free</a></p>
]]>
    </description>
    <tag>cwe</tag>
    <tag>bug</tag>
    <internalKey>deallocDealloc</internalKey>
    <severity>MAJOR</severity>
    <type>BUG</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>deallocuse</key>
    <name>Dereferencing variable after it is deallocated / released</name>
    <description>
<![CDATA[
<p>
Dereferencing variable after it is deallocated / released.
</p>
<h2>References</h2>
<p><a href="https://cwe.mitre.org/data/definitions/416.html" target="_blank">CWE-416: Use After Free</a></p>
]]>
    </description>
    <tag>cwe</tag>
    <tag>bug</tag>
    <internalKey>deallocuse</internalKey>
    <severity>MAJOR</severity>
    <type>BUG</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>mismatchSize</key>
    <name>The given size is mismatching</name>
    <description>
<![CDATA[
<p>
The allocated size is not a multiple of the underlying type&apos;s size.
</p>
<h2>References</h2>
<p><a href="https://cwe.mitre.org/data/definitions/131.html" target="_blank">CWE-131: Incorrect Calculation of Buffer Size</a></p>
]]>
    </description>
    <tag>cwe</tag>
    <tag>bug</tag>
    <internalKey>mismatchSize</internalKey>
    <severity>MAJOR</severity>
    <type>BUG</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>mismatchAllocDealloc</key>
    <name>Mismatching allocation and deallocation</name>
    <description>
<![CDATA[
<p>
Mismatching allocation and deallocation.
</p>
<h2>References</h2>
<p><a href="https://cwe.mitre.org/data/definitions/762.html" target="_blank">CWE-762: Mismatched Memory Management Routines</a></p>
]]>
    </description>
    <tag>cwe</tag>
    <tag>bug</tag>
    <internalKey>mismatchAllocDealloc</internalKey>
    <severity>MAJOR</severity>
    <type>BUG</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>memleakOnRealloc</key>
    <name>Common realloc mistake: variable nulled but not freed upon failure</name>
    <description>
<![CDATA[
<p>
Common realloc mistake: variable nulled but not freed upon failure.
</p>
<h2>References</h2>
<p><a href="https://cwe.mitre.org/data/definitions/401.html" target="_blank">CWE-401: Improper Release of Memory Before Removing Last Reference ('Memory Leak')</a></p>
]]>
    </description>
    <tag>cwe</tag>
    <tag>bug</tag>
    <internalKey>memleakOnRealloc</internalKey>
    <severity>MAJOR</severity>
    <type>BUG</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>nonreentrantFunctionscrypt</key>
    <name>Avoid usage of the function 'crypt'</name>
    <description>
      The function 'crypt' is not reentrant. For thread-safe
      applications it is recommended to use the reentrant replacement
      function 'crypt_r'.
    </description>
    <internalKey>nonreentrantFunctionscrypt</internalKey>
    <severity>MINOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>nonreentrantFunctionsctermid</key>
    <name>Avoid usage of the function 'ctermid'</name>
    <description>
      The function 'ctermid' is not reentrant. For thread-safe
      applications it is recommended to use the reentrant replacement
      function 'ctermid_r'.
    </description>
    <internalKey>nonreentrantFunctionsctermid</internalKey>
    <severity>MINOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>nonreentrantFunctionsecvt</key>
    <name>Avoid usage of the function 'ecvt'</name>
    <description>
      The function 'ecvt' is not reentrant. For thread-safe
      applications it is recommended to use the reentrant replacement
      function 'ecvt_r'.
    </description>
    <internalKey>nonreentrantFunctionsecvt</internalKey>
    <severity>MINOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>nonreentrantFunctionsfcvt</key>
    <name>Avoid usage of the function 'fcvt'</name>
    <description>
      The function 'fcvt' is not reentrant. For thread-safe
      applications it is recommended to use the reentrant replacement
      function 'fcvt_r'.
    </description>
    <internalKey>nonreentrantFunctionsfcvt</internalKey>
    <severity>MINOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>nonreentrantFunctionsfgetgrent</key>
    <name>Avoid usage of the function 'fgetgrent'</name>
    <description>
      The function 'fgetgrent' is not reentrant. For thread-safe
      applications it is recommended to use the reentrant replacement
      function 'fgetgrent_r'.
    </description>
    <internalKey>nonreentrantFunctionsfgetgrent</internalKey>
    <severity>MINOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>nonreentrantFunctionsfgetpwent</key>
    <name>Avoid usage of the function 'fgetpwent'</name>
    <description>
      The function 'fgetpwent' is not reentrant. For thread-safe
      applications it is recommended to use the reentrant replacement
      function 'fgetpwent_r'.
    </description>
    <internalKey>nonreentrantFunctionsfgetpwent</internalKey>
    <severity>MINOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>nonreentrantFunctionsfgetspent</key>
    <name>Avoid usage of the function 'fgetspent'</name>
    <description>
      The function 'fgetspent' is not reentrant. For thread-safe
      applications it is recommended to use the reentrant replacement
      function 'fgetspent_r'.
    </description>
    <internalKey>nonreentrantFunctionsfgetspent</internalKey>
    <severity>MINOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>nonreentrantFunctionsgcvt</key>
    <name>Avoid usage of the function 'gcvt'</name>
    <description>
      The function 'gcvt' is not reentrant. For thread-safe
      applications it is recommended to use the reentrant replacement
      function 'gcvt_r'.
    </description>
    <internalKey>nonreentrantFunctionsgcvt</internalKey>
    <severity>MINOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>nonreentrantFunctionsgetgrent</key>
    <name>Avoid usage of the function 'getgrent'</name>
    <description>
      The function 'getgrent' is not reentrant. For thread-safe
      applications it is recommended to use the reentrant replacement
      function 'getgrent_r'.
    </description>
    <internalKey>nonreentrantFunctionsgetgrent</internalKey>
    <severity>MINOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>nonreentrantFunctionsgetgrgid</key>
    <name>Avoid usage of the function 'getgrgid'</name>
    <description>
      The function 'getgrgid' is not reentrant. For thread-safe
      applications it is recommended to use the reentrant replacement
      function 'getgrgid_r'.
    </description>
    <internalKey>nonreentrantFunctionsgetgrgid</internalKey>
    <severity>MINOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>nonreentrantFunctionsgetgrnam</key>
    <name>Avoid usage of the function 'getgrnam'</name>
    <description>
      The function 'getgrnam' is not reentrant. For thread-safe
      applications it is recommended to use the reentrant replacement
      function 'getgrnam_r'.
    </description>
    <internalKey>nonreentrantFunctionsgetgrnam</internalKey>
    <severity>MINOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>nonreentrantFunctionsgethostbyaddr</key>
    <name>Avoid usage of the function 'gethostbyaddr'</name>
    <description>
      The function 'gethostbyaddr' is not reentrant. For thread-safe
      applications it is recommended to use the reentrant replacement
      function 'gethostbyaddr_r'.
    </description>
    <internalKey>nonreentrantFunctionsgethostbyaddr</internalKey>
    <severity>MINOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>nonreentrantFunctionsgethostbyname</key>
    <name>Avoid usage of the function 'gethostbyname'</name>
    <description>
      The function 'gethostbyname' is not reentrant. For thread-safe
      applications it is recommended to use the reentrant replacement
      function 'gethostbyname_r'.
    </description>
    <internalKey>nonreentrantFunctionsgethostbyname</internalKey>
    <severity>MINOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>nonreentrantFunctionsgethostbyname2</key>
    <name>Avoid usage of the function 'gethostbyname2'</name>
    <description>
      The function 'gethostbyname2' is not reentrant. For thread-safe
      applications it is recommended to use the reentrant replacement
      function 'gethostbyname2_r'.
    </description>
    <internalKey>nonreentrantFunctionsgethostbyname2</internalKey>
    <severity>MINOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>nonreentrantFunctionsgethostent</key>
    <name>Avoid usage of the function 'gethostent'</name>
    <description>
      The function 'gethostent' is not reentrant. For thread-safe
      applications it is recommended to use the reentrant replacement
      function 'gethostent_r'.
    </description>
    <internalKey>nonreentrantFunctionsgethostent</internalKey>
    <severity>MINOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>nonreentrantFunctionsgetlogin</key>
    <name>Avoid usage of the function 'getlogin'</name>
    <description>
      The function 'getlogin' is not reentrant. For thread-safe
      applications it is recommended to use the reentrant replacement
      function 'getlogin_r'.
    </description>
    <internalKey>nonreentrantFunctionsgetlogin</internalKey>
    <severity>MINOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>nonreentrantFunctionsgetnetbyaddr</key>
    <name>Avoid usage of the function 'getnetbyaddr'</name>
    <description>
      The function 'getnetbyaddr' is not reentrant. For thread-safe
      applications it is recommended to use the reentrant replacement
      function 'getnetbyaddr_r'.
    </description>
    <internalKey>nonreentrantFunctionsgetnetbyaddr</internalKey>
    <severity>MINOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>nonreentrantFunctionsgetnetbyname</key>
    <name>Avoid usage of the function 'getnetbyname'</name>
    <description>
      The function 'getnetbyname' is not reentrant. For threadsafe
      applications it is recommended to use the reentrant replacement
      function 'getnetbyname_r'.
    </description>
    <internalKey>nonreentrantFunctionsgetnetbyname</internalKey>
    <severity>MINOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>nonreentrantFunctionsgetnetgrent</key>
    <name>Avoid usage of the function 'getnetgrent'</name>
    <description>
      The function 'getnetgrent' is not reentrant. For thread-safe
      applications it is recommended to use the reentrant replacement
      function 'getnetgrent_r'.
    </description>
    <internalKey>nonreentrantFunctionsgetnetgrent</internalKey>
    <severity>MINOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>nonreentrantFunctionsgetprotobyname</key>
    <name>Avoid usage of the function 'getprotobyname'</name>
    <description>
      The function 'getprotobyname' is not reentrant. For thread-safe
      applications it is recommended to use the reentrant replacement
      function 'getprotobyname_r'.
    </description>
    <internalKey>nonreentrantFunctionsgetprotobyname</internalKey>
    <severity>MINOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>nonreentrantFunctionsgetpwent</key>
    <name>Avoid usage of the function 'getpwent'</name>
    <description>
      The function 'getpwent' is not reentrant. For thread-safe
      applications it is recommended to use the reentrant replacement
      function 'getpwent_r'.
    </description>
    <internalKey>nonreentrantFunctionsgetpwent</internalKey>
    <severity>MINOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>nonreentrantFunctionsgetpwnam</key>
    <name>Avoid usage of the function 'getpwnam'</name>
    <description>
      The function 'getpwnam' is not reentrant. For thread-safe
      applications it is recommended to use the reentrant replacement
      function 'getpwnam_r'.
    </description>
    <internalKey>nonreentrantFunctionsgetpwnam</internalKey>
    <severity>MINOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>nonreentrantFunctionsgetpwuid</key>
    <name>Avoid usage of the function 'getpwuid'</name>
    <description>
      The function 'getpwuid' is not reentrant. For thread-safe
      applications it is recommended to use the reentrant replacement
      function 'getpwuid_r'.
    </description>
    <internalKey>nonreentrantFunctionsgetpwuid</internalKey>
    <severity>MINOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>nonreentrantFunctionsgetrpcbyname</key>
    <name>Avoid usage of the function 'getrpcbyname'</name>
    <description>
      The function 'getrpcbyname' is not reentrant. For thread-safe
      applications it is recommended to use the reentrant replacement
      function 'getrpcbyname_r'.
    </description>
    <internalKey>nonreentrantFunctionsgetrpcbyname</internalKey>
    <severity>MINOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>nonreentrantFunctionsgetrpcbynumber</key>
    <name>Avoid usage of the function 'getrpcbynumber'</name>
    <description>
      The function 'getrpcbynumber' is not reentrant. For thread-safe
      applications it is recommended to use the reentrant replacement
      function 'getrpcbynumber_r'.
    </description>
    <internalKey>nonreentrantFunctionsgetrpcbynumber</internalKey>
    <severity>MINOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>nonreentrantFunctionsgetrpcent</key>
    <name>Avoid usage of the function 'getrpcent'</name>
    <description>
      The function 'getrpcent' is not reentrant. For thread-safe
      applications it is recommended to use the reentrant replacement
      function 'getrpcent_r'.
    </description>
    <internalKey>nonreentrantFunctionsgetrpcent</internalKey>
    <severity>MINOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>nonreentrantFunctionsgetservbyname</key>
    <name>Avoid usage of the function 'getservbyname'</name>
    <description>
      The function 'getservbyname' is not reentrant. For thread-safe
      applications it is recommended to use the reentrant replacement
      function 'getservbyname_r'.
    </description>
    <internalKey>nonreentrantFunctionsgetservbyname</internalKey>
    <severity>MINOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>nonreentrantFunctionsgetservbyport</key>
    <name>Avoid usage of the function 'getservbyport'</name>
    <description>
      The function 'getservbyport' is not reentrant. For thread-safe
      applications it is recommended to use the reentrant replacement
      function 'getservbyport_r'.
    </description>
    <internalKey>nonreentrantFunctionsgetservbyport</internalKey>
    <severity>MINOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>nonreentrantFunctionsgetservent</key>
    <name>Avoid usage of the function 'getservent'</name>
    <description>
      The function 'getservent' is not reentrant. For thread-safe
      applications it is recommended to use the reentrant replacement
      function 'getservent_r'.
    </description>
    <internalKey>nonreentrantFunctionsgetservent</internalKey>
    <severity>MINOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>nonreentrantFunctionsgetspent</key>
    <name>Avoid usage of the function 'getspent'</name>
    <description>
      The function 'getspent' is not reentrant. For thread-safe
      applications it is recommended to use the reentrant replacement
      function 'getspent_r'.
    </description>
    <internalKey>nonreentrantFunctionsgetspent</internalKey>
    <severity>MINOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>nonreentrantFunctionsgetspnam</key>
    <name>Avoid usage of the function 'getspnam'</name>
    <description>
      The function 'getspnam' is not reentrant. For thread-safe
      applications it is recommended to use the reentrant replacement
      function 'getspnam_r'.
    </description>
    <internalKey>nonreentrantFunctionsgetspnam</internalKey>
    <severity>MINOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>nonreentrantFunctionsgmtime</key>
    <name>Avoid usage of the function 'gmtime'</name>
    <description>
      The function 'gmtime' is not reentrant. For thread-safe
      applications it is recommended to use the reentrant replacement
      function 'gmtime_r'.
    </description>
    <internalKey>nonreentrantFunctionsgmtime</internalKey>
    <severity>MINOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>gmtimeCalled</key>
    <name>Non reentrant function 'gmtime' called</name>
    <description>
      <![CDATA[
      <p>
Non reentrant function 'gmtime' called. For threadsafe applications it
is recommended to use the reentrant replacement function 'gmtime_r'.
</p>
<h2>References</h2>
<p><a href="https://cwe.mitre.org/data/definitions/477.html" target="_blank">CWE-477: Use of Obsolete Function</a></p>
    ]]>
    </description>
    <tag>cwe</tag>
    <internalKey>gmtimeCalled</internalKey>
    <severity>MINOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>        
  <rule>
    <key>nonreentrantFunctionslocaltime</key>
    <name>Avoid usage of the function 'localtime'</name>
    <description>
      The function 'localtime' is not reentrant. For thread-safe
      applications it is recommended to use the reentrant replacement
      function 'localtime_r'.
    </description>
    <internalKey>nonreentrantFunctionslocaltime</internalKey>
    <severity>MINOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>nonreentrantFunctionsreaddir</key>
    <name>Avoid usage of the function 'readdir'</name>
    <description>
      The function 'readdir' is not reentrant. For thread-safe
      applications it is recommended to use the reentrant replacement
      function 'readdir_r'.
    </description>
    <internalKey>nonreentrantFunctionsreaddir</internalKey>
    <severity>MINOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>nonreentrantFunctionsstrtok</key>
    <name>Avoid usage of the function 'strtok'</name>
    <description>
      The function 'strtok' is not reentrant. For thread-safe
      applications it is recommended to use the reentrant replacement
      function 'strtok_r'.
    </description>
    <internalKey>nonreentrantFunctionsstrtok</internalKey>
    <severity>MINOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>nonreentrantFunctionstempnam</key>
    <name>Avoid usage of the function 'tempnam'</name>
    <description>
      The function 'tempnam' is not reentrant. For thread-safe
      applications it is recommended to use the reentrant replacement
      function 'tempnam_r'.
    </description>
    <internalKey>nonreentrantFunctionstempnam</internalKey>
    <severity>MINOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>nonreentrantFunctionsttyname</key>
    <name>Avoid usage of the function 'ttyname'</name>
    <description>
      The function 'ttyname' is not reentrant. For thread-safe
      applications it is recommended to use the reentrant replacement
      function 'ttyname_r'.
    </description>
    <internalKey>nonreentrantFunctionsttyname</internalKey>
    <severity>MINOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>nullPointer</key>
    <name>Possible null pointer dereference</name>
    <description>
<![CDATA[<p>
Possible null pointer dereference.
</p><h2>References</h2>
<p><a href="https://www.securecoding.cert.org/confluence/display/c/EXP34-C.+Do+not+dereference+null+pointers" target="_blank">EXP34-C. Do not dereference null pointers</a></p>
<p><a href="https://cwe.mitre.org/data/definitions/476.html" target="_blank">CWE-476: NULL Pointer Dereference</a></p>
]]>
    </description>
    <internalKey>nullPointer</internalKey>
    <tag>bug</tag>
    <tag>cert</tag>
    <tag>cwe</tag>
    <severity>MAJOR</severity>
    <type>BUG</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>obsoleteFunctionsbcmp</key>
    <name>Avoid usage of the function 'bcmp'</name>
    <description>
      The function 'bcmp' is obsolete. It is recommended that new
      applications use the 'memcmp' function.
    </description>
    <internalKey>obsoleteFunctionsbcmp</internalKey>
    <severity>MINOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>obsoleteFunctionsbcopy</key>
    <name>Avoid usage of the function 'bcopy'</name>
    <description>
      The function 'bcopy' is obsolete. It is recommended that new
      applications use the 'memmove' or 'memcpy' functions.
    </description>
    <internalKey>obsoleteFunctionsbcopy</internalKey>
    <severity>MINOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>obsoleteFunctionsbsd_signal</key>
    <name>Avoid usage of the function 'bsd_signal'</name>
    <description>
      The function 'bsd_signal' is obsolete. It is recommended that
      new applications use the 'sigaction' function.
    </description>
    <internalKey>obsoleteFunctionsbsd_signal</internalKey>
    <severity>MINOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>obsoleteFunctionsbzero</key>
    <name>Avoid usage of the function 'bzero'</name>
    <description>
      The function 'bzero' is obsolete. It is recommended that new
      applications use the 'memset' function.
    </description>
    <internalKey>obsoleteFunctionsbzero</internalKey>
    <severity>MINOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>obsoleteFunctionsecvt</key>
    <name>Avoid usage of the function 'ecvt'</name>
    <description>
      The function 'ecvt' is obsolete. It is recommended that new
      applications use the 'sprintf' function
    </description>
    <internalKey>obsoleteFunctionsecvt</internalKey>
    <severity>MINOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>obsoleteFunctionsfcvt</key>
    <name>Avoid usage of the function 'fcvt'</name>
    <description>
      The function 'fcvt' is obsolete. It is recommended that new
      applications use the 'sprintf' function.
    </description>
    <internalKey>obsoleteFunctionsfcvt</internalKey>
    <severity>MINOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>obsoleteFunctionsftime</key>
    <name>Avoid usage of the function 'ftime'</name>
    <description>
      The function 'ftime' is obsolete.
    </description>
    <internalKey>obsoleteFunctionsftime</internalKey>
    <severity>MINOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>        
  <rule>
    <key>ftimeCalled</key>
    <name>Obsolescent function 'ftime' called. It is recommended to use 'time', 'gettimeofday' or 'clock_gettime' instead.</name>
    <description>
      <![CDATA[
      <p>
Obsolescent function 'ftime' called. It is recommended to use 'time',
'gettimeofday' or 'clock_gettime' instead.
</p>
<h2>References</h2>
<p><a href="https://cwe.mitre.org/data/definitions/477.html" target="_blank">CWE-477: Use of Obsolete Function</a></p>
    ]]>
    </description>
    <tag>cwe</tag>
    <internalKey>ftimeCalled</internalKey>
    <severity>MINOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>obsoleteFunctionsgcvt</key>
    <name>Avoid usage of the function 'gcvt'</name>
    <description>
      The function 'gcvt' is obsolete. It is recommended that new
      applications use the 'sprintf' function.
    </description>
    <internalKey>obsoleteFunctionsgcvt</internalKey>
    <severity>MINOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>obsoleteFunctionsgetcontext</key>
    <name>Avoid usage of the function 'getcontext'</name>
    <description>
      The function 'getcontext' is obsolete. Due to portability issues
      with this function, applications are recommended to be rewritten to
      use POSIX threads.
    </description>
    <internalKey>obsoleteFunctionsgetcontext</internalKey>
    <severity>MINOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>obsoleteFunctionsgethostbyaddr</key>
    <name>Avoid usage of the function 'gethostbyaddr'</name>
    <description>
      The function 'gethostbyaddr' is obsolete. It is recommended that
      new applications use the 'getnameinfo' function.
    </description>
    <internalKey>obsoleteFunctionsgethostbyaddr</internalKey>
    <severity>MINOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>obsoleteFunctionsgethostbyname</key>
    <name>Avoid usage of the function 'gethostbyname'</name>
    <description>
      The function 'gethostbyname' is obsolete. It is recommended that
      new applications use the 'getaddrinfo' function.
    </description>
    <internalKey>obsoleteFunctionsgethostbyname</internalKey>
    <severity>MINOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>obsoleteFunctionsgets</key>
    <name>Avoid usage of the function 'gets'</name>
    <description>
      The function 'gets' is obsolete. It is recommended that
      new applications use the 'fgets' function instead.
    </description>
    <internalKey>obsoleteFunctionsgets</internalKey>
    <severity>MINOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>obsoleteFunctionsgetwd</key>
    <name>Avoid usage of the function 'getwd'</name>
    <description>
      The function 'getwd' is obsolete. It is recommended that new
      applications use the 'getcwd' function.
    </description>
    <internalKey>obsoleteFunctionsgetwd</internalKey>
    <severity>MINOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>obsoleteFunctionsindex</key>
    <name>Avoid usage of the function 'index'</name>
    <description>
      The function 'index' is obsolete. It is recommended to use the
      function 'strchr' instead.
    </description>
    <internalKey>obsoleteFunctionsindex</internalKey>
    <severity>MINOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>obsoleteFunctionsmakecontext</key>
    <name>Avoid usage of the function 'makecontext'</name>
    <description>
      The function 'makecontext' is obsolete. Due to portability
      issues with this function, applications are recommended to be
      rewritten to use POSIX threads.
    </description>
    <internalKey>obsoleteFunctionsmakecontext</internalKey>
    <severity>MINOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>obsoleteFunctionspthread_attr_getstackaddr</key>
    <name>Avoid usage of the function 'pthread_attr_getstackaddr'</name>
    <description>
      The function 'pthread_attr_getstackaddr' is obsolete. It is
      recommended that new applications use the 'pthread_attr_getstack'
      function.
    </description>
    <internalKey>obsoleteFunctionspthread_attr_getstackaddr</internalKey>
    <severity>MINOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>obsoleteFunctionspthread_attr_setstackaddr</key>
    <name>Avoid usage of the function 'pthread_attr_setstackaddr'</name>
    <description>
      The function 'pthread_attr_setstackaddr' is obsolete. It is
      recommended that new applications use the 'pthread_attr_setstack'
      function.
    </description>
    <internalKey>obsoleteFunctionspthread_attr_setstackaddr</internalKey>
    <severity>MINOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>obsoleteFunctionsrindex</key>
    <name>Avoid usage of the function 'rindex'</name>
    <description>
      The function 'rindex' is obsolete. It is recommended to use the
      function 'strrchr' instead.
    </description>
    <internalKey>obsoleteFunctionsrindex</internalKey>
    <severity>MINOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>obsoleteFunctionsscalbln</key>
    <name>Avoid usage of the function 'scalb'</name>
    <description>
      The function 'scalb' is obsolete. It is recommended to use
      either 'scalbln', 'scalblnf' or 'scalblnl' instead of this function.
    </description>
    <internalKey>obsoleteFunctionsscalbln</internalKey>
    <severity>MINOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>obsoleteFunctionsswapcontext</key>
    <name>Avoid usage of the function 'swapcontext'</name>
    <description>
      The function 'swapcontext' is obsolete. Due to portability
      issues with this function, applications are recommended to be
      rewritten to use POSIX threads.
    </description>
    <internalKey>obsoleteFunctionsswapcontext</internalKey>
    <severity>MINOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>obsoleteFunctionsualarm</key>
    <name>Avoid usage of the function 'ualarm'</name>
    <description>
      The function 'ualarm' is obsolete. It is recommended to use
      either 'timer_create', 'timer_delete', 'timer_getoverrun',
      'timer_gettime', or 'timer_settime' instead of this function.
    </description>
    <internalKey>obsoleteFunctionsualarm</internalKey>
    <severity>MINOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>obsoleteFunctionsusleep</key>
    <name>Avoid usage of the function 'usleep'</name>
    <description>
      The function 'usleep' is obsolete. It is recommended that new
      applications use the 'nanosleep' or 'setitimer' function.
    </description>
    <internalKey>obsoleteFunctionsusleep</internalKey>
    <severity>MINOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>obsoleteFunctionsvfork</key>
    <name>Avoid usage of the function 'vfork'</name>
    <description>
      The function 'vfork' is obsolete. It is recommended to use the
      function 'fork' instead.
    </description>
    <internalKey>obsoleteFunctionsvfork</internalKey>
    <severity>MINOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>obsoleteFunctionswcswcs</key>
    <name>Avoid usage of the function 'wcswcs'</name>
    <description>
      The function 'wcswcs' is obsolete. It is recommended to use the
      function 'wcsstr' instead.
    </description>
    <internalKey>obsoleteFunctionswcswcs</internalKey>
    <severity>MINOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>assignBoolToPointer</key>
    <name>Boolean value assigned to pointer</name>
    <description>
<![CDATA[
<p>
Boolean value assigned to pointer.
</p>
<h2>References</h2>
<p><a href="https://cwe.mitre.org/data/definitions/587.html" target="_blank">CWE-587: Assignment of a Fixed Address to a Pointer</a></p>
]]>
    </description>
    <tag>cwe</tag>
    <tag>bug</tag>
    <internalKey>assignBoolToPointer</internalKey>
    <severity>MAJOR</severity>
    <type>BUG</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>sprintfOverlappingData</key>
    <name>Undefined behavior: variable is used as parameter and destination in s[n]printf()</name>
    <description>
      <![CDATA[
      <p>
The variable 'varname' is used both as a parameter and as destination
in s[n]printf(). The origin and destination buffers overlap. Quote
from glibc (C-library) documentation
(http://www.gnu.org/software/libc/manual/html_mono/libc.html
#Formatted-Output-Functions): <cite>"If copying takes place between objects
that overlap as a result of a call to sprintf() or snprintf(), the
results are undefined."</cite>
</p>
<h2>References</h2>
<p><a href="https://cwe.mitre.org/data/definitions/628.html" target="_blank">CWE-628: Function Call with Incorrectly Specified Arguments</a></p>
]]>
    </description>
    <tag>cwe</tag>
    <tag>bug</tag>
    <internalKey>sprintfOverlappingData</internalKey>
    <severity>MAJOR</severity>
    <type>BUG</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>staticStringCompare</key>
    <name>Unnecessary comparison of static strings</name>
    <description>
      <![CDATA[
      <p>
The compared strings are always equal/unequal. Therefore
the comparison is unnecessary and looks suspicious.
</p>
<h2>References</h2>
<p><a href="https://cwe.mitre.org/data/definitions/570.html" target="_blank">CWE-570: Expression is Always False</a></p>
<p><a href="https://cwe.mitre.org/data/definitions/571.html" target="_blank">CWE-571: Expression is Always True</a></p>
]]>      
    </description>
    <tag>cwe</tag>
    <internalKey>staticStringCompare</internalKey>
    <severity>MINOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>udivError</key>
    <name>Unsigned division. The result will be wrong</name>
    <description>
      Unsigned division. The result will be wrong.
    </description>
    <internalKey>udivError</internalKey>
    <severity>MAJOR</severity>
    <type>BUG</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>zerodiv</key>
    <name>Division by zero</name>
    <description>
<![CDATA[<p>
Division by zero.
</p><h2>References</h2>
<p><a href="https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=624" target="_blank">INT33-C. Ensure that division and remainder operations do not result in divide-by-zero errors</a></p>
<p><a href="https://cwe.mitre.org/data/definitions/369.html" target="_blank">CWE-369: Divide By Zero</a></p>
]]>
    </description>
    <tag>bug</tag>
    <tag>cert</tag>
    <tag>cwe</tag>
    <internalKey>zerodiv</internalKey>
    <severity>MAJOR</severity>
    <type>BUG</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>wrongmathcall</key>
    <name>Passing value to () leads to undefined result</name>
    <description>
<![CDATA[<p>
Passing value "#" to #() leads to implementation-defined result.
</p><h2>References</h2>
<p><a href="https://cwe.mitre.org/data/definitions/758.html" target="_blank">CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior</a></p>
]]>
    </description>
    <tag>bug</tag>
    <tag>cwe</tag>
    <internalKey>wrongmathcall</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>fflushOnInputStream</key>
    <name>fflush() called on input stream &apos;stdin&apos; may result in undefined behaviour</name>
    <description>
      <![CDATA[
      <p>
fflush() called on input stream 'stdin' may result in undefined
behaviour on non-linux systems.
</p>
<h2>References</h2>
<p><a href="https://cwe.mitre.org/data/definitions/398.html" target="_blank">CWE-398: 7PK - Code Quality</a></p>
    ]]>
    </description>
    <tag>cwe</tag>
    <internalKey>fflushOnInputStream</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>functionConst</key>
    <name>Member function can be const</name>
    <description>
      <![CDATA[
      <p>
The member function 'class::function' can be made a const function.
Making this function 'const' should not cause compiler errors. Even
though the function can be made const function technically it may not
make sense conceptually. Think about your design and the task of the
function first - is it a function that must not change object internal
state?
</p>
<h2>References</h2>
<p><a href="https://cwe.mitre.org/data/definitions/398.html" target="_blank">CWE-398: 7PK - Code Quality</a></p>
    ]]>
    </description>
    <tag>cwe</tag>
    <internalKey>functionConst</internalKey>
    <severity>MINOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>unusedScopedObject</key>
    <name>Instance destroyed immediately</name>
    <description>
      <![CDATA[
      <p>
Instance of 'varname' object is destroyed immediately.
</p><h2>References</h2>
<p><a href="https://cwe.mitre.org/data/definitions/563.html" target="_blank">CWE-563: Assignment to Variable without Use</a></p>
    ]]>
    </description>
    <tag>cwe</tag>
    <internalKey>unusedScopedObject</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>sizeofwithsilentarraypointer</key>
    <name>Using 'sizeof' on array given as function argument returns size of a pointer</name>
    <description>
      <![CDATA[
      <p>
Using 'sizeof' for array given as function argument returns the size
of a pointer. It does not return the size of the whole array in bytes
as might be expected. For example, this code:</p>
<pre>
int f(char a[100]) {
  return sizeof(a);
}
</pre>
returns 4 (in
32-bit systems) or 8 (in 64-bit systems) instead of 100 (the size of
the array in bytes).
<h2>References</h2>
<p><a href="https://cwe.mitre.org/data/definitions/467.html" target="_blank">CWE-467: Use of sizeof() on a Pointer Type</a></p>
    ]]>
    </description>
    <tag>cwe</tag>
    <internalKey>sizeofwithsilentarraypointer</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>sizeofwithnumericparameter</key>
    <name>Suspicious usage of 'sizeof' with a numeric constant as parameter</name>
    <description>
      <![CDATA[
      <p>
It is unusual to use a constant value with sizeof. For example,
'sizeof(10)' returns 4 (in 32-bit systems) or 8 (in 64-bit systems)
instead of 10. 'sizeof('A')' and 'sizeof(char)' can return different
results.
</p>
<h2>References</h2>
<p><a href="https://cwe.mitre.org/data/definitions/682.html" target="_blank">CWE-682: Incorrect Calculation</a></p>
    ]]>
    </description>
    <tag>cwe</tag>
    <internalKey>sizeofwithnumericparameter</internalKey>
    <severity>MINOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>cstyleCast</key>
    <name>C-style pointer casting</name>
    <description>
      <![CDATA[
      <p>
C-style pointer casting detected. C++ offers four different kinds of
casts as replacements: static_cast, const_cast, dynamic_cast and
reinterpret_cast. A C-style cast could evaluate to any of those
automatically, thus it is considered safer if the programmer
explicitly states which kind of cast is expected. See also: https://ww
w.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not
+use+C-style+casts.
</p>
<h2>References</h2>
<p><a href="https://cwe.mitre.org/data/definitions/398.html" target="_blank">CWE-398: 7PK - Code Quality</a></p>
    ]]>
    </description>
    <tag>cwe</tag>
    <internalKey>cstyleCast</internalKey>
    <severity>MINOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>dangerousUsageStrtol</key>
    <name>Invalid radix in call to strtol or strtoul. Must be 0 or 2-36</name>
    <description>
      Invalid radix in call to strtol or strtoul. Must be 0 or 2-36.
    </description>
    <internalKey>dangerousUsageStrtol</internalKey>
    <severity>MAJOR</severity>
    <type>BUG</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>passedByValue</key>
    <name>Function parameter should be passed by const reference</name>
    <description>
      <![CDATA[
      <p>
Parameter 'parametername' is passed by value. It could be passed as a
const reference which is usually faster and recommended in C++.
</p>
<h2>References</h2>
<p><a href="https://cwe.mitre.org/data/definitions/398.html" target="_blank">CWE-398: Indicator of Poor Code Quality</a></p>
]]>
    </description>
    <tag>cwe</tag>
    <internalKey>passedByValue</internalKey>
    <severity>MINOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>constStatement</key>
    <name>Redundant code: Found a statement that begins with type constant</name>
    <description>
      <![CDATA[
      <p>
Redundant code: Found a statement that begins with type constant.
</p><h2>References</h2>
<p><a href="https://cwe.mitre.org/data/definitions/398.html" target="_blank">CWE-398: 7PK - Code Quality</a></p>
    ]]>
    </description>
    <tag>cwe</tag>
    <internalKey>constStatement</internalKey>
    <severity>MINOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>charArrayIndex</key>
    <name>Using char type as array index</name>
    <description>
      Using char type as array index.
    </description>
    <internalKey>charArrayIndex</internalKey>
    <severity>MINOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>charBitOp</key>
    <name>When using 'char' variables in bit operations, sign extension can generate unexpected results</name>
    <description>
      <![CDATA[
      <p>
When using 'char' variables in bit operations, sign extension can
generate unexpected results. For example:</p>
<pre>
char c = 0x80;
int i = 0 | c;
if (i & 0x8000)
  printf("not expected");
</pre>
The "not expected" will be printed on the screen.
<h2>References</h2>
<p><a href="https://cwe.mitre.org/data/definitions/398.html" target="_blank">CWE-398: 7PK - Code Quality</a></p>
    ]]>
    </description>
    <tag>cwe</tag>
    <tag>bug</tag>
    <internalKey>charBitOp</internalKey>
    <severity>MINOR</severity>
    <type>BUG</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>variableScope</key>
    <name>The scope of the variable can be reduced</name>
    <description>
      <![CDATA[
      <p>
The scope of the variable 'varname' can be reduced. Warning: Be
careful when fixing this message, especially when there are inner
loops. Here is an example where cppcheck will write that the scope for
'i' can be reduced:</p>
<pre>
void f(int x)
{
  int i = 0;
  if (x) {
    // it's safe to move 'int i = 0;' here
    for (int n = 0; n < 10; ++n) {
       // it is possible but not safe to move 'int i = 0;' here
       do_something(&amp;i);
    }
   }
}
</pre>
When you see this message it is always safe to
reduce the variable scope 1 level.
<h2>References</h2>
<p><a href="https://cwe.mitre.org/data/definitions/398.html" target="_blank">CWE-398: 7PK - Code Quality</a></p>
    ]]>
    </description>
    <tag>cwe</tag>
    <internalKey>variableScope</internalKey>
    <severity>MINOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>strPlusChar</key>
    <name>Unusual pointer arithmetic</name>
    <description>
      <![CDATA[
      <p>
Unusual pointer arithmetic. A value of type 'char' is added to a
string literal.
</p>
<h2>References</h2>
<p><a href="https://cwe.mitre.org/data/definitions/665.html" target="_blank">CWE-665: Improper Initialization</a></p>
    ]]>
    </description>
    <tag>cwe</tag>
    <internalKey>strPlusChar</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>sizeofsizeof</key>
    <name>Calling 'sizeof' on 'sizeof'</name>
    <description>
      <![CDATA[
      <p>
Calling sizeof for 'sizeof looks like a suspicious code and most
likely there should be just one 'sizeof'. The current code is
equivalent to 'sizeof(T)'
</p>
<h2>References</h2>
<p><a href="https://cwe.mitre.org/data/definitions/682.html" target="_blank">CWE-682: Incorrect Calculation</a></p>
    ]]>
    </description>
    <tag>cwe</tag>
    <internalKey>sizeofsizeof</internalKey>
    <severity>MINOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>sizeofCalculation</key>
    <name>Found calculation inside sizeof()</name>
    <description>
<![CDATA[<p>
Found calculation inside sizeof().
</p><h2>References</h2>
<p><a href="https://cwe.mitre.org/data/definitions/682.html" target="_blank">CWE-682: Incorrect Calculation</a></p>
]]>      
    </description>
    <tag>cwe</tag>
    <tag>bug</tag>
    <internalKey>sizeofCalculation</internalKey>
    <severity>MINOR</severity>
    <type>BUG</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>redundantAssignInSwitch</key>
    <name>Redundant assignment in switch</name>
    <description>
      <![CDATA[
      <p>
Variable is reassigned a value before the old one has been used.
'break;' missing?
</p>
<h2>References</h2>
<p><a href="https://cwe.mitre.org/data/definitions/563.html" target="_blank">CWE-563: Assignment to Variable without Use</a></p>
    ]]>
    </description>
    <tag>cwe</tag>
    <tag>bug</tag>
    <internalKey>redundantAssignInSwitch</internalKey>
    <severity>MINOR</severity>
    <type>BUG</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>switchCaseFallThrough</key>
    <name>Switch falls through case without comment</name>
    <description>
      Switch falls through case without comment.
    </description>
    <internalKey>switchCaseFallThrough</internalKey>
    <severity>MINOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>selfAssignment</key>
    <name>Redundant assignment to itself</name>
    <description>
<![CDATA[<p>
Redundant assignment to itself.
</p><h2>References</h2>
<p><a href="https://cwe.mitre.org/data/definitions/398.html" target="_blank">CWE-398: Indicator of Poor Code Quality</a></p>
]]>
    </description>
    <tag>cwe</tag>
    <tag>bug</tag>
    <internalKey>selfAssignment</internalKey>
    <severity>MINOR</severity>
    <type>BUG</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>assignmentInAssert</key>
    <name>Assert statement modifies variable</name>
    <description>
      <![CDATA[
      <p>
Variable 'var' is modified insert assert statement. Assert statements
are removed from release builds so the code inside assert statement is
not executed. If the code is needed also in release builds, this is a
bug.
</p>
<h2>References</h2>
<p><a href="https://cwe.mitre.org/data/definitions/398.html" target="_blank">CWE-398: Indicator of Poor Code Quality</a></p>
]]>
    </description>
    <tag>cwe</tag>
    <tag>bug</tag>
    <internalKey>assignmentInAssert</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>invalidscanf</key>
    <name>scanf() without field width limits can crash with huge input data</name>
    <description>
      <![CDATA[
      <p>
scanf() without field width limits can crash with huge input data. Add
a field width specifier to fix this problem.
</p>
<p>
Sample program
that can crash:
</p>
<pre>
#include &lt;stdio.h&gt;
int main()
{
  char c[5];
  scanf("%s", c);
  return 0;
}
</pre>
<p>
Typing
in 5 or more characters may make the program crash. The correct usage
here is <code>scanf("%4s", c);</code>, as the maximum field width does not
include the terminating null byte.
</p>
<p>
Source: http://linux.die.net/man/3/scanf
</p>
<p>
Source: http://www.opensource.apple.com/source/xnu/xnu-1456.1.26/libkern/stdio/scanf.c
</p>
<h2>References</h2>
<p><a href="https://cwe.mitre.org/data/definitions/119.html" target="_blank">CWE-119: Improper Restriction of Operations within the Bounds of a Memory Buffer</a></p>
    ]]>
    </description>
    <tag>cwe</tag>
    <internalKey>invalidscanf</internalKey>
    <severity>MINOR</severity>
    <type>VULNERABILITY</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>incorrectLogicOperator</key>
    <name>Suspicious use of the '&amp;&amp;' or '||' logic operator</name>
    <description>
      <![CDATA[
      <p>
Logical disjunction always evaluates to true/false. Are
these conditions necessary? Did you intend to use && instead? Are the
numbers correct? Are you comparing the correct variables?
</p>
<h2>References</h2>
<p><a href="https://cwe.mitre.org/data/definitions/570.html" target="_blank">CWE-570: Expression is Always False</a></p>
<p><a href="https://cwe.mitre.org/data/definitions/571.html" target="_blank">CWE-571: Expression is Always True</a></p>
]]>
    </description>
    <tag>cwe</tag>
    <tag>bug</tag>
    <internalKey>incorrectLogicOperator</internalKey>
    <severity>MINOR</severity>
    <type>BUG</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>memsetZeroBytes</key>
    <name>Effectless memset() call</name>
    <description>
      <![CDATA[
      <p>
memset() called to fill 0 bytes. The second and third arguments might
be inverted. The function memset ( void * ptr, int value, size_t num )
sets the first num bytes of the block of memory pointed by ptr to the
specified value.
</p>
<h2>References</h2>
<p><a href="https://cwe.mitre.org/data/definitions/687.html" target="_blank">CWE-687: Function Call With Incorrectly Specified Argument Value</a></p>
]]>
    </description>
    <tag>cwe</tag>
    <internalKey>memsetZeroBytes</internalKey>
    <severity>MINOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>clarifyCalculation</key>
    <name>Clarify calculation precedence for '+' and '?'.</name>
    <description>
      <![CDATA[
      <p>
Suspicious calculation. Please use parentheses to clarify the code.
The code <code>a+b?c:d</code> should be written as either <code>(a+b)?c:d</code> or
<code>a+(b?c:d)</code>.
</p>
<h2>References</h2>
<p><a href="https://cwe.mitre.org/data/definitions/783.html" target="_blank">CWE-783: Operator Precedence Logic Error</a></p>
    ]]>
    </description>
    <tag>cwe</tag>
    <internalKey>clarifyCalculation</internalKey>
    <severity>MINOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>clarifyCondition</key>
    <name>Suspicious condition (assignment + comparison)</name>
    <description>
<![CDATA[
<ul>
<li>Suspicious condition (assignment + comparison), it can be clarified with parentheses.</li>
<li>Suspicious expression. Boolean result is used in bitwise operation. The operator '!'
and the comparison operators have higher precedence than bitwise operators.
It is recommended that the expression is clarified with parentheses.</li>
<li>Suspicious condition (bitwise operator + comparison).
Comparison operators have higher precedence than bitwise operators.
Please clarify the condition with parentheses.</li>
</ul>
<h2>References</h2>
<p><a href="https://cwe.mitre.org/data/definitions/398.html" target="_blank">CWE-398: Indicator of Poor Code Quality</a></p>
]]>
    </description>
    <tag>cwe</tag>
    <internalKey>clarifyCondition</internalKey>
    <severity>MINOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>incorrectStringCompare</key>
    <name>Mismatch of the string literal and length argument for substr()</name>
    <description>
<![CDATA[<p>
String literal doesn't match length argument for substr().
</p><h2>References</h2>
<p><a href="https://cwe.mitre.org/data/definitions/570.html" target="_blank">CWE-570: Expression is Always False</a></p>
]]>
    </description>
    <tag>cwe</tag>
    <internalKey>incorrectStringCompare</internalKey>
    <severity>MINOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>incrementboolean</key>
    <name>Incrementing a variable of type 'bool' with postfix operator++ is deprecated by the C++ Standard. You should assign it the value 'true' instead.</name>
    <description>
      <![CDATA[
      <p>
The operand of a postfix increment operator may be of type bool but it
is deprecated by C++ Standard (Annex D-1) and the operand is always
set to true. You should assign it the value 'true' instead.
</p>
<h2>References</h2>
<p><a href="https://cwe.mitre.org/data/definitions/398.html" target="_blank">CWE-398: 7PK - Code Quality</a></p>
    ]]>
    </description>
    <tag>cwe</tag>
    <internalKey>incrementboolean</internalKey>
    <severity>MINOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>comparisonOfBoolWithInt</key>
    <name>Suspicious comparison of a boolean with an integer</name>
    <description>
      Comparison of a boolean with an integer that is neither 1 nor 0.
    </description>
    <internalKey>comparisonOfBoolWithInt</internalKey>
    <severity>MINOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>duplicateIf</key>
    <name>Redundant 'if'-expressions</name>
    <description>
      Found duplicate if expressions.
    </description>
    <internalKey>duplicateIf</internalKey>
    <severity>MINOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>duplicateBranch</key>
    <name>Found duplicate branches for 'if' and 'else'</name>
    <description>
      <![CDATA[
      <p>
Finding the same code in an 'if' and related 'else' branch is
suspicious and might indicate a cut and paste or logic error. Please
examine this code carefully to determine if it is correct.
</p>
<h2>References</h2>
<p><a href="https://cwe.mitre.org/data/definitions/398.html" target="_blank">CWE-398: Indicator of Poor Code Quality</a></p>
]]>
    </description>
    <tag>cwe</tag>
    <internalKey>duplicateBranch</internalKey>
    <severity>MINOR</severity>
    <type>BUG</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>duplicateExpression</key>
    <name>Same expression on both sides of '&amp;&amp;'</name>
    <description>
      <![CDATA[
      <p>
Finding the same expression on both sides of an operator is suspicious
and might indicate a cut and paste or logic error. Please examine this
code carefully to determine if it is correct.
</p>
<h2>References</h2>
<p><a href="https://cwe.mitre.org/data/definitions/398.html" target="_blank">CWE-398: Indicator of Poor Code Quality</a></p>
]]>
    </description>
    <tag>cwe</tag>
    <internalKey>duplicateExpression</internalKey>
    <severity>MINOR</severity>
    <type>BUG</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>duplicateBreak</key>
    <name>Consecutive return, break, continue, goto or throw statements are unnecessary</name>
    <description>
      <![CDATA[
      <p>
Consecutive return, break, continue, goto or throw statements are
unnecessary. The second statement can never be executed, and so should
be removed.
</p>
<h2>References</h2>
<p><a href="https://cwe.mitre.org/data/definitions/561.html" target="_blank">CWE-561: Dead Code</a></p>
]]>
    </description>
    <tag>cwe</tag>
    <internalKey>duplicateBreak</internalKey>
    <severity>MINOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>unsignedLessThanZero</key>
    <name>Checking if unsigned variable is less than zero</name>
    <description>
      <![CDATA[
      <p>
The unsigned variable 'varname' will never be negative so it is either
pointless or an error to check if it is.
</p>
<h2>References</h2>
<p><a href="https://cwe.mitre.org/data/definitions/570.html" target="_blank">CWE-570: Expression is Always False</a></p>
]]>
    </description>
    <tag>cwe</tag>
    <internalKey>unsignedLessThanZero</internalKey>
    <severity>MINOR</severity>
    <type>BUG</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>unsignedPositive</key>
    <name>An unsigned variable can't be negative so it is unnecessary to test it</name>
    <description>
      <![CDATA[
      <p>
Unsigned variable 'varname' can't be negative so it is unnecessary to
test it.
</p>
<h2>References</h2>
<p><a href="https://cwe.mitre.org/data/definitions/570.html" target="_blank">CWE-570: Expression is Always False</a></p>
]]>
    </description>
    <tag>cwe</tag>
    <internalKey>unsignedPositive</internalKey>
    <severity>MINOR</severity>
    <type>BUG</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>invalidIterator1</key>
    <name>Invalid iterator</name>
    <description>
<![CDATA[
<p>
Invalid iterator.
</p>
<h2>References</h2>
<p><a href="https://cwe.mitre.org/data/definitions/664.html" target="_blank">CWE-664: Improper Control of a Resource Through its Lifetime</a></p>
]]>
    </description>
    <tag>cwe</tag>
    <tag>bug</tag>
    <internalKey>invalidIterator1</internalKey>
    <severity>MAJOR</severity>
    <type>BUG</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>iterators</key>
    <name>Same iterator is used with two different containers</name>
    <description>
<![CDATA[
<p>
Same iterator is used with two different containers.
</p>
<h2>References</h2>
<p><a href="https://cwe.mitre.org/data/definitions/664.html" target="_blank">CWE-664: Improper Control of a Resource Through its Lifetime</a></p>
]]>
    </description>
    <tag>cwe</tag>
    <tag>bug</tag>
    <internalKey>iterators</internalKey>
    <severity>MAJOR</severity>
    <type>BUG</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>mismatchingContainers</key>
    <name>Iterators of different containers are used together</name>
    <description>
      <![CDATA[
      <p>
Iterators of different containers are used together.
</p><h2>References</h2>
<p><a href="https://cwe.mitre.org/data/definitions/664.html" target="_blank">CWE-664: Improper Control of a Resource Through its Lifetime</a></p>
    ]]>
    </description>
    <tag>cwe</tag>
    <tag>bug</tag>
    <internalKey>mismatchingContainers</internalKey>
    <severity>MAJOR</severity>
    <type>BUG</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>eraseDereference</key>
    <name>Dereferenced iterator an already erased iterator</name>
    <description>
      <![CDATA[
      <p>
The iterator 'iter' is invalid before being assigned. Dereferencing or
comparing it with another iterator is invalid operation.
</p>
<h2>References</h2>
<p><a href="https://cwe.mitre.org/data/definitions/664.html" target="_blank">CWE-664: Improper Control of a Resource Through its Lifetime</a></p>
]]>
    </description>
    <tag>cwe</tag>
    <tag>bug</tag>
    <internalKey>eraseDereference</internalKey>
    <severity>MAJOR</severity>
    <type>BUG</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>stlOutOfBounds</key>
    <name>When i==foo.size(), foo[i] is out of bounds</name>
    <description>
<![CDATA[
<p>
When <code>i==foo.size()</code>, foo[i] or foo.at(i) is out of bounds.
</p>
<h2>References</h2>
<p><a href="https://cwe.mitre.org/data/definitions/788.html" target="_blank">CWE-788: Access of Memory Location After End of Buffer</a></p>
]]>
    </description>
    <tag>cwe</tag>
    <tag>bug</tag>
    <internalKey>stlOutOfBounds</internalKey>
    <severity>MAJOR</severity>
    <type>BUG</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>invalidIterator2</key>
    <name>After push_back|push_front|insert(), the iterator 'iterator' may be invalid</name>
    <description>
      <![CDATA[
      <p>
After push_back|push_front|insert(), the iterator 'iterator' may be
invalid.
</p>
<h2>References</h2>
<p><a href="https://cwe.mitre.org/data/definitions/664.html" target="_blank">CWE-664: Improper Control of a Resource Through its Lifetime</a></p>
    ]]>
    </description>
    <tag>cwe</tag>
    <tag>bug</tag>
    <internalKey>invalidIterator2</internalKey>
    <severity>MAJOR</severity>
    <type>BUG</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>invalidPointer</key>
    <name>Invalid pointer after push_back / push_front</name>
    <description>
<![CDATA[
<p>
Invalid pointer after push_back() / push_front().
</p>
<h2>References</h2>
<p><a href="https://cwe.mitre.org/data/definitions/664.html" target="_blank">CWE-664: Improper Control of a Resource Through its Lifetime</a></p>
]]>
    </description>
    <tag>cwe</tag>
    <tag>bug</tag>
    <internalKey>invalidPointer</internalKey>
    <severity>MAJOR</severity>
    <type>BUG</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>stlBoundries</key>
    <name>Dangerous container iterator compare using &lt; operator for container</name>
    <description>
      Dangerous container iterator compare using &lt; operator for
      container.
    </description>
    <internalKey>stlBoundries</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>stlIfFind</key>
    <name>Suspicious condition. The result of find() is an iterator, but it is not properly checked</name>
    <description>
      <![CDATA[
      <p>
Suspicious condition. The result of find() is an iterator, but it is
not properly checked.
</p>
<h2>References</h2>
<p><a href="https://cwe.mitre.org/data/definitions/398.html" target="_blank">CWE-398: Indicator of Poor Code Quality</a></p>
]]>
    </description>
    <tag>cwe</tag>
    <internalKey>stlIfFind</internalKey>
    <severity>MINOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>stlIfStrFind</key>
    <name>Inefficient usage of string::find() in condition; string::compare() would be faster</name>
    <description>
      <![CDATA[
      <p>
Either inefficient or wrong usage of string::find(). string::compare()
will be faster if string::find's result is compared with 0, because it
will not scan the whole string. If your intention is to check that
there are no findings in the string, you should compare with
std::string::npos.
</p>
<h2>References</h2>
<p><a href="https://cwe.mitre.org/data/definitions/597.html" target="_blank">CWE-597: Use of Wrong Operator in String Comparison</a></p>
]]>
    </description>
    <tag>cwe</tag>
    <internalKey>stlIfStrFind</internalKey>
    <severity>MINOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>stlcstr</key>
    <name>Dangerous usage of c_str(). The value returned by c_str() is invalid after this call</name>
    <description>
      <![CDATA[
      <p>
Dangerous usage of c_str(). The c_str() return value is only valid
until its string is deleted.
</p>
<h2>References</h2>
<p><a href="https://cwe.mitre.org/data/definitions/664.html" target="_blank">CWE-664: Improper Control of a Resource Through its Lifetime</a></p>
]]>
    </description>
    <tag>cwe</tag>
    <internalKey>stlcstr</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>stlSize</key>
    <name>Possible inefficient checking for 'list' emptiness</name>
    <description>
      <![CDATA[
      <p>
Checking for 'list' emptiness might be inefficient. Using list.empty()
instead of list.size() can be faster. list.size() can take linear time
but list.empty() is guaranteed to take constant time.
</p>
<h2>References</h2>
<p><a href="https://cwe.mitre.org/data/definitions/398.html" target="_blank">CWE-398: Indicator of Poor Code Quality</a></p>
]]>
    </description>
    <tag>cwe</tag>
    <internalKey>stlSize</internalKey>
    <severity>MINOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>redundantIfRemove</key>
    <name>Redundant checking of STL container element</name>
    <description>
      <![CDATA[
      <p>
Redundant checking of STL container element existence before removing
it. It is safe to call the remove method on a non-existing element.
</p>
<h2>References</h2>
<p><a href="https://cwe.mitre.org/data/definitions/398.html" target="_blank">CWE-398: 7PK - Code Quality</a></p>
    ]]>
    </description>
    <tag>cwe</tag>
    <internalKey>redundantIfRemove</internalKey>
    <severity>MINOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>useAutoPointerCopy</key>
    <name>Be careful when using 'auto_ptr' copy</name>
    <description>
      <![CDATA[
      <p>
'std::auto_ptr' has semantics of strict ownership, meaning that the
'auto_ptr' instance is the sole entity responsible for the object's
lifetime. If an 'auto_ptr' is copied, the source looses the reference.
</p>
<h2>References</h2>
<p><a href="https://cwe.mitre.org/data/definitions/398.html" target="_blank">CWE-398: 7PK - Code Quality</a></p>
    ]]>
    </description>
    <tag>cwe</tag>
    <internalKey>useAutoPointerCopy</internalKey>
    <severity>MINOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>useAutoPointerContainer</key>
    <name>Don't store 'auto-ptr' in a STL container</name>
    <description>
      <![CDATA[
      <p>
An element of container must be able to be copied but 'auto_ptr' does
not fulfill this requirement. You should consider to use 'shared_ptr'
or 'unique_ptr'. It is suitable for use in containers, because they no
longer copy their values, they move them.
</p>
<h2>References</h2>
<p><a href="https://cwe.mitre.org/data/definitions/664.html" target="_blank">CWE-664: Improper Control of a Resource Through its Lifetime</a></p>
]]>
    </description>
    <tag>cwe</tag>
    <internalKey>useAutoPointerContainer</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>useAutoPointerArray</key>
    <name>Usage of 'auto_ptr' for pointers obtained with operator 'new[]'</name>
    <description>
      <![CDATA[
      <p>
Object pointed by an 'auto_ptr' is destroyed using operator 'delete'.
This means that you should only use 'auto_ptr' for pointers obtained
with operator 'new'. This excludes arrays, which are allocated by
operator 'new[]' and must be deallocated by operator 'delete[]'.
</p>
<h2>References</h2>
<p><a href="https://cwe.mitre.org/data/definitions/664.html" target="_blank">CWE-664: Improper Control of a Resource Through its Lifetime</a></p>
]]>
    </description>
    <tag>cwe</tag>
    <tag>bug</tag>
    <internalKey>useAutoPointerArray</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>uninitstring</key>
    <name>Dangerous usage of variable (strncpy doesn't always 0-terminate it)</name>
    <description>
      <![CDATA[
      <p>
Dangerous usage of variable (strncpy doesn't always null-terminate
it).
</p>
<h2>References</h2>
<p><a href="https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=482" target="_blank">EXP33-C. Do not read uninitialized memory</a></p>
<p><a href="https://cwe.mitre.org/data/definitions/676.html" target="_blank">CWE-676: Use of Potentially Dangerous Function</a></p>
]]>
    </description>
    <tag>bug</tag>
    <tag>cert</tag>
    <tag>cwe</tag>
    <internalKey>uninitstring</internalKey>
    <severity>MAJOR</severity>
    <type>BUG</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>uninitdata</key>
    <name>Memory is allocated but not initialized: varname</name>
    <description>
      <![CDATA[
      <p>
Memory is allocated but not initialized
</p><h2>References</h2>
<p><a href="https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=482" target="_blank">EXP33-C. Do not read uninitialized memory</a></p>
<p><a href="https://cwe.mitre.org/data/definitions/908.html" target="_blank">CWE-908: Use of Uninitialized Resource</a></p>
]]>
    </description>
    <tag>bug</tag>
    <tag>cert</tag>
    <tag>cwe</tag>
    <internalKey>uninitdata</internalKey>
    <severity>MAJOR</severity>
    <type>BUG</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>unusedFunction</key>
    <name>Unused function</name>
    <description>
<![CDATA[<p>
The function is never used.
</p><h2>References</h2>
<p><a href="https://cwe.mitre.org/data/definitions/561.html" target="_blank">CWE-561: Dead Code</a></p>
]]>
    </description>
    <tag>cwe</tag>
    <internalKey>unusedFunction</internalKey>
    <severity>MINOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>unusedVariable</key>
    <name>Unused variable</name>
    <description>
      <![CDATA[
      <p>
Unused variable
</p>
<h2>References</h2>
<p><a href="https://cwe.mitre.org/data/definitions/563.html" target="_blank">CWE-563: Assignment to Variable without Use</a></p>
    ]]>
    </description>
    <tag>cwe</tag>
    <internalKey>unusedVariable</internalKey>
    <severity>MINOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>unusedAllocatedMemory</key>
    <name>Variable is allocated memory that is never used</name>
    <description>
<![CDATA[<p>
Variable is allocated memory that is never used.
</p><h2>References</h2>
<p><a href="https://cwe.mitre.org/data/definitions/563.html" target="_blank">CWE-563: Assignment to Variable without Use</a></p>
    ]]>
    </description>
    <tag>cwe</tag>
    <internalKey>unusedAllocatedMemory</internalKey>
    <severity>MINOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>unreadVariable</key>
    <name>Unused value</name>
    <description>
<![CDATA[<p>
Variable is assigned a value that is never used.
</p><h2>References</h2>
<p><a href="https://cwe.mitre.org/data/definitions/563.html" target="_blank">CWE-563: Assignment to Variable without Use</a></p>
    ]]>
    </description>
    <tag>cwe</tag>
    <internalKey>unreadVariable</internalKey>
    <severity>MINOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>unassignedVariable</key>
    <name>Variable is not assigned a value</name>
    <description>
<![CDATA[<p>
Variable is not assigned a value.
</p><h2>References</h2>
<p><a href="https://cwe.mitre.org/data/definitions/665.html" target="_blank">CWE-665: Improper Initialization</a></p>
]]>
    </description>
    <tag>cwe</tag>
    <internalKey>unassignedVariable</internalKey>
    <severity>MINOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>unusedStructMember</key>
    <name>Unused struct or union member</name>
    <description>
<![CDATA[<p>
Struct or union member is never used.
</p><h2>References</h2>
<p><a href="https://cwe.mitre.org/data/definitions/563.html" target="_blank">CWE-563: Assignment to Variable without Use</a></p>
    ]]>
    </description>
    <tag>cwe</tag>
    <internalKey>unusedStructMember</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>postfixOperator</key>
    <name>Prefer prefix ++/-- operators for non-primitive types</name>
    <description>
      <![CDATA[
      <p>
Prefix ++/-- operators should be preferred for non-primitive types.
Pre-increment/decrement can be more efficient than post-
increment/decrement. Post-increment/decrement usually involves keeping
a copy of the previous value around and adds a little extra code.
</p>
<h2>References</h2>
<p><a href="https://cwe.mitre.org/data/definitions/398.html" target="_blank">CWE-398: 7PK - Code Quality</a></p>
    ]]>
    </description>
    <tag>cwe</tag>
    <internalKey>postfixOperator</internalKey>
    <severity>MINOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>syntaxError</key>
    <name>Syntax error</name>
    <description>
      Cppcheck cannot tokenize the code correctly.
    </description>
    <internalKey>syntaxError</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>cppcheckError</key>
    <name>Internal cppcheck error</name>
    <description>
      Analysis failed. If the code is valid then please report this
      failure.
    </description>
    <internalKey>cppcheckError</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>unnecessaryForwardDeclaration</key>
    <name>Redundant forward declaration</name>
    <description>
      Forward declaration unnecessary, already declared.
    </description>
    <internalKey>unnecessaryForwardDeclaration</internalKey>
    <severity>MINOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>variableHidingEnum</key>
    <name>Variable hides enumerator with same name</name>
    <description>
      Variable hides enumerator with same name.
    </description>
    <internalKey>variableHidingEnum</internalKey>
    <severity>MINOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>variableHidingTypedef</key>
    <name>Variable hides typedef with same name</name>
    <description>
      Variable hides typedef with same name
    </description>
    <internalKey>variableHidingTypedef</internalKey>
    <severity>MINOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>unnecessaryQualification</key>
    <name>Unnecessary qualification</name>
    <description>
      Extra qualification is unnecessary and considered an error by
      many compilers.
    </description>
    <internalKey>unnecessaryQualification</internalKey>
    <severity>MINOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>missingInclude</key>
    <name>Missing include</name>
    <description>
      An include file cannot be found.
    </description>
    <tag>tool-error</tag>
    <internalKey>missingInclude</internalKey>
    <severity>MINOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>preprocessorErrorDirective</key>
    <name>Preprocessor directive error</name>
    <description>
      Preprocessor directive <code>#error message</code>.
    </description>
    <internalKey>preprocessorErrorDirective</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>publicAllocationError</key>
    <name>Possible leak in public function</name>
    <description>
      <![CDATA[
      <p>
Possible leak in public function. The pointer 'varname' is not
deallocated before it is allocated.
</p>
<h2>References</h2>
<p><a href="https://cwe.mitre.org/data/definitions/398.html" target="_blank">CWE-398: 7PK - Code Quality</a></p>
    ]]>
    </description>
    <tag>cwe</tag>
    <internalKey>publicAllocationError</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>sizeArgumentAsChar</key>
    <name>The size argument is given as a char constant</name>
    <description>
<![CDATA[<p>
The size argument is given as a char constant.
</p><h2>References</h2>
<p><a href="https://cwe.mitre.org/data/definitions/682.html" target="_blank">CWE-682: Incorrect Calculation</a></p>
]]>
    </description>
    <tag>cwe</tag>
    <internalKey>sizeArgumentAsChar</internalKey>
    <severity>MINOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>bufferNotZeroTerminated</key>
    <name>Buffer is not zero-terminated</name>
    <description>
      <![CDATA[
      <p>
The buffer is not null-terminated after the call to
strncpy(). This will cause bugs later in the code if the code assumes
the buffer is null-terminated.
</p>
<h2>References</h2>
<p><a href="https://cwe.mitre.org/data/definitions/170.html" target="_blank">CWE-170: Improper Null Termination</a></p>
]]>
    </description>
    <tag>cwe</tag>
    <internalKey>bufferNotZeroTerminated</internalKey>
    <severity>MINOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>initializerList</key>
    <name>Member variable is in the wrong place in the initializer list</name>
    <description>
      <![CDATA[
      <p>
Member variable 'class::variable' is in the wrong place in the
initializer list. Members are initialized in the order they are
declared, not in the order they are in the initializer list.  Keeping
the initializer list in the same order that the members were declared
prevents order dependent initialization errors.
</p>
<h2>References</h2>
<p><a href="https://cwe.mitre.org/data/definitions/398.html" target="_blank">CWE-398: 7PK - Code Quality</a></p>
    ]]>
    </description>
    <tag>cwe</tag>
    <internalKey>initializerList</internalKey>
    <severity>MINOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>possibleBufferAccessOutOfBounds</key>
    <name>Possible buffer overflow if strlen(source) is larger than or equal to sizeof(destination)</name>
    <description>
      <![CDATA[
      <p>
Possible buffer overflow if strlen(source) is larger than or equal to
sizeof(destination). The source buffer is larger than the destination
buffer so there is the potential for overflowing the destination
buffer.
</p>
<h2>References</h2>
<p><a href="https://cwe.mitre.org/data/definitions/398.html" target="_blank">CWE-398: 7PK - Code Quality</a></p>
    ]]>
    </description>
    <tag>bug</tag>
    <tag>cert</tag>
    <tag>cwe</tag>
    <internalKey>possibleBufferAccessOutOfBounds</internalKey>
    <severity>MINOR</severity>
    <type>BUG</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>returnAddressOfFunctionParameter</key>
    <name>Address of function parameter returned.</name>
    <description>
      <![CDATA[
      <p>
Address of the function parameter 'parameter' becomes invalid after
the function exits because function parameters are stored on the stack
which is freed when the function exits. Thus the returned value is
invalid.
</p>
<h2>References</h2>
<p><a href="https://cwe.mitre.org/data/definitions/562.html" target="_blank">CWE-562: Return of Stack Variable Address</a></p>
]]>
    </description>
    <tag>cwe</tag>
    <tag>bug</tag>
    <internalKey>returnAddressOfFunctionParameter</internalKey>
    <severity>MAJOR</severity>
    <type>BUG</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>

  <!-- ########### New in cppcheck 1.52 ########### -->
  <rule>
    <key>simplePatternError</key>
    <name>Found simple pattern inside call</name>
    <description>
      Found simple pattern inside call.
    </description>
    <internalKey>simplePatternError</internalKey>
    <severity>MINOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>complexPatternError</key>
    <name>Found complex pattern inside call</name>
    <description>
      Found complex pattern inside call.
    </description>
    <internalKey>complexPatternError</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>missingPercentCharacter</key>
    <name>Missing percent end character in pattern</name>
    <description>
      Missing percent end character in pattern.
    </description>
    <internalKey>missingPercentCharacter</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>boostForeachError</key>
    <name>Invalid usage of BOOST_FOREACH</name>
    <description>
      <![CDATA[
      <p>
BOOST_FOREACH caches the end() iterator. It's undefined behavior if
 you modify the container inside.
</p>
<h2>References</h2>
<p><a href="https://cwe.mitre.org/data/definitions/664.html" target="_blank">CWE-664: Improper Control of a Resource Through its Lifetime</a></p>
    ]]>
    </description>
    <tag>cwe</tag>
    <tag>bug</tag>
    <internalKey>boostForeachError</internalKey>
    <severity>MAJOR</severity>
    <type>BUG</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>compareBoolExpressionWithInt</key>
    <name>Comparison of a boolean expression with an integer other than 0 or 1</name>
    <description>
<![CDATA[
<p>
Comparison of a boolean expression with an integer other than 0 or 1.
</p>
<h2>References</h2>
<p><a href="https://cwe.mitre.org/data/definitions/398.html" target="_blank">CWE-398: Indicator of Poor Code Quality</a></p>
]]>
    </description>
    <tag>cwe</tag>
    <internalKey>compareBoolExpressionWithInt</internalKey>
    <severity>MINOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>coutCerrMisusage</key>
    <name>Invalid usage of output stream: '&lt;&lt; std::cout'</name>
    <description>
<![CDATA[<p>
Invalid usage of output stream: '<< std::cout'.
</p><h2>References</h2>
<p><a href="https://cwe.mitre.org/data/definitions/398.html" target="_blank">CWE-398: Indicator of Poor Code Quality</a></p>
]]>
    </description>
    <tag>cwe</tag>
    <internalKey>coutCerrMisusage</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>incorrectStringBooleanError</key>
    <name>Conversion of string literal to bool always evaluates to true</name>
    <description>
      <![CDATA[
      <p>
Conversion of string literal to bool always evaluates to true.
</p><h2>References</h2>
<p><a href="https://cwe.mitre.org/data/definitions/571.html" target="_blank">CWE-571: Expression is Always True</a></p>
]]>
    </description>
    <tag>bug</tag>
    <tag>cwe</tag>
    <internalKey>incorrectStringBooleanError</internalKey>
    <severity>MINOR</severity>
    <type>BUG</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>stringCompare</key>
    <name>Comparison of identical string variables</name>
    <description>
      <![CDATA[
      <p>
Comparison of identical string variables. This
could be a logic bug.
</p><h2>References</h2>
<p><a href="https://cwe.mitre.org/data/definitions/571.html" target="_blank">CWE-571: Expression is Always True</a></p>
    ]]>
    </description>
    <tag>cwe</tag>
    <internalKey>stringCompare</internalKey>
    <severity>MINOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>stlcstrthrow</key>
    <name>The returned value by c_str() is invalid after throw call</name>
    <description>
      The returned value by c_str() is invalid after throw call.
    </description>
    <internalKey>stlcstrthrow</internalKey>
    <severity>MAJOR</severity>
    <type>BUG</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>unreachableCode</key>
    <name>Statements following return, break, continue, goto or throw will never be executed</name>
    <description>
<![CDATA[<p>
Statements following return, break, continue, goto or throw will never be executed.
</p><h2>References</h2>
<p><a href="https://cwe.mitre.org/data/definitions/561.html" target="_blank">CWE-561: Dead Code</a></p>
]]>
    </description>
    <tag>cwe</tag>
    <internalKey>unreachableCode</internalKey>
    <severity>MINOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>uselessCallsCompare</key>
    <name>It is inefficient to call 'str.find(str)' as it always returns 0</name>
    <description>
      <![CDATA[
      <p>
'std::string::find()' returns zero when given itself as parameter
(str.find(str)). As it is currently the code is inefficient. It is
possible either the string searched ('str') or searched for ('str') is
wrong.
</p>
<h2>References</h2>
<p><a href="https://cwe.mitre.org/data/definitions/628.html" target="_blank">CWE-628: Function Call with Incorrectly Specified Arguments</a></p>
]]>
    </description>
    <tag>cwe</tag>
    <internalKey>uselessCallsCompare</internalKey>
    <severity>MINOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>uselessCallsSwap</key>
    <name>It is inefficient to swap a object with itself by calling 'str.swap(str)'</name>
    <description>
      <![CDATA[
      <p>
The 'swap()' function has no logical effect when given itself as
parameter (varname.swap(varname)). As it is currently the code is inefficient.
Is the object or the parameter wrong here?
</p>
<h2>References</h2>
<p><a href="https://cwe.mitre.org/data/definitions/628.html" target="_blank">CWE-628: Function Call with Incorrectly Specified Arguments</a></p>
]]>
    </description>
    <tag>cwe</tag>
    <internalKey>uselessCallsSwap</internalKey>
    <severity>MINOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>uselessCallsSubstr</key>
    <name>Function 'substr' useless call. Function create copy of the 'str' object</name>
    <description>
      <![CDATA[
      <p>
Ineffective call of function 'substr' because it returns a copy of the
object. Use operator= instead.
</p>
<h2>References</h2>
<p><a href="https://cwe.mitre.org/data/definitions/398.html" target="_blank">CWE-398: 7PK - Code Quality</a></p>
    ]]>
    </description>
    <tag>cwe</tag>
    <internalKey>uselessCallsSubstr</internalKey>
    <severity>MINOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>wrongcctypecall</key>
    <name>Wrong usage of a function from the ctype-family</name>
    <description>
      Passing negative values to the functions of the ctype-family
      (isalnum|isalpha|isascii|is..) causes undefined behavior.
    </description>
    <tag>bug</tag>
    <internalKey>wrongcctypecall</internalKey>
    <severity>MAJOR</severity>
    <type>BUG</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>

  <!-- ########### New in cppcheck 1.53 ########### -->
  <rule>
    <key>doubleCloseDir</key>
    <name>Directory handle is closed twice</name>
    <description>
      Directory handle is closed twice.
    </description>
    <internalKey>doubleCloseDir</internalKey>
    <severity>MAJOR</severity>
    <type>BUG</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>doubleFree</key>
    <name>Memory is freed twice</name>
    <description>
<![CDATA[
<p>
Memory or resource handle is freed twice.
</p>
<h2>References</h2>
<p><a href="https://cwe.mitre.org/data/definitions/415.html" target="_blank">CWE-415: Double Free</a></p>
]]>
    </description>
    <tag>cwe</tag>
    <tag>bug</tag>
    <internalKey>doubleFree</internalKey>
    <severity>MAJOR</severity>
    <type>BUG</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>invalidPrintfArgType_s</key>
    <name>Invalid printf argument type (character pointer required)</name>
    <description>
      <![CDATA[
      <p>
%s in format string requires 'char *'
</p>
<h2>References</h2>
<p><a href="https://cwe.mitre.org/data/definitions/686.html" target="_blank">CWE-686: Function Call With Incorrect Argument Type</a></p>
]]>
    </description>
    <tag>cwe</tag>
    <tag>bug</tag>
    <internalKey>invalidPrintfArgType_s</internalKey>
    <severity>MINOR</severity>
    <type>BUG</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>invalidPrintfArgType_n</key>
    <name>Invalid printf argument type (integer pointer required)</name>
    <description>
      <![CDATA[
      <p>
%n in format string requires 'int *'
</p>
<h2>References</h2>
<p><a href="https://cwe.mitre.org/data/definitions/686.html" target="_blank">CWE-686: Function Call With Incorrect Argument Type</a></p>
]]>
    </description>
    <tag>cwe</tag>
    <tag>bug</tag>
    <internalKey>invalidPrintfArgType_n</internalKey>
    <severity>MINOR</severity>
    <type>BUG</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>invalidPrintfArgType_p</key>
    <name>Invalid printf argument type (integer or pointer required)</name>
    <description>
      <![CDATA[
      <p>
%p in format string requires an address
</p>
<h2>References</h2>
<p><a href="https://cwe.mitre.org/data/definitions/686.html" target="_blank">CWE-686: Function Call With Incorrect Argument Type</a></p>
]]>
    </description>
    <tag>cwe</tag>
    <tag>bug</tag>
    <internalKey>invalidPrintfArgType_p</internalKey>
    <severity>MINOR</severity>
    <type>BUG</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>invalidPrintfArgType_int</key>
    <name>Invalid printf argument type (integer required)</name>
    <description>
<![CDATA[<p>
Invalid printf argument type (integer required).
</p><h2>References</h2>
<p><a href="https://cwe.mitre.org/data/definitions/686.html" target="_blank">CWE-686: Function Call With Incorrect Argument Type</a></p>
]]>
    </description>
    <tag>cwe</tag>
    <internalKey>invalidPrintfArgType_int</internalKey>
    <severity>MINOR</severity>
    <type>BUG</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>invalidPrintfArgType_sint</key>
    <name>Invalid printf argument type (signed integer required)</name>
    <description>
      <![CDATA[
      <p>
%i in format string requires 'int'
</p>
<h2>References</h2>
<p><a href="https://cwe.mitre.org/data/definitions/686.html" target="_blank">CWE-686: Function Call With Incorrect Argument Type</a></p>
]]>
    </description>
    <tag>cwe</tag>
    <tag>bug</tag>
    <internalKey>invalidPrintfArgType_sint</internalKey>
    <severity>MINOR</severity>
    <type>BUG</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>invalidPrintfArgType_float</key>
    <name>Invalid printf argument type (floating point number required)</name>
    <description>
      <![CDATA[
      <p>
%f in format string requires 'double'
</p>
<h2>References</h2>
<p><a href="https://cwe.mitre.org/data/definitions/686.html" target="_blank">CWE-686: Function Call With Incorrect Argument Type</a></p>
]]>
    </description>
    <tag>cwe</tag>
    <tag>bug</tag>
    <internalKey>invalidPrintfArgType_float</internalKey>
    <severity>MINOR</severity>
    <type>BUG</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>invalidScanfArgType</key>
    <name>scanf argument no. 1: requires non-const pointers or arrays as arguments</name>
    <description>
      scanf argument no. 1: requires non-const pointers or arrays as
      arguments.
    </description>
    <internalKey>invalidScanfArgType</internalKey>
    <severity>MINOR</severity>
    <type>BUG</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>obsoleteFunctionsasctime</key>
    <name>Avoid usage of the function 'asctime'</name>
    <description>
      The function 'asctime' is obsolete. It is recommended to use
      the function 'strftime' instead.
    </description>
    <internalKey>obsoleteFunctionsasctime</internalKey>
    <severity>MINOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>obsoleteFunctionsasctime_r</key>
    <name>Avoid usage of the function 'asctime_r'</name>
    <description>
      The function 'asctime_r' is obsolete. It is recommended to use
      the function 'strftime' instead.
    </description>
    <internalKey>obsoleteFunctionsasctime_r</internalKey>
    <severity>MINOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>obsoleteFunctionsrand_r</key>
    <name>Avoid usage of the function 'rand_r'</name>
    <description>
      The function 'rand_r' is obsolete. It is recommended to use the
      function 'rand' instead.
    </description>
    <internalKey>obsoleteFunctionsrand_r</internalKey>
    <severity>MINOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>obsoleteFunctionstmpnam</key>
    <name>Avoid usage of the function 'tmpnam'</name>
    <description>
      The function 'tmpnam' is obsolete. It is recommended to use
      either 'tmpfile', 'mkstemp', or 'mkdtemp' instead for this function.
    </description>
    <internalKey>obsoleteFunctionstmpnam</internalKey>
    <severity>MINOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>obsoleteFunctionstmpnam_r</key>
    <name>Avoid usage of the function 'tmpnam_r'</name>
    <description>
      The function 'tmpnam_r' is obsolete. It is recommended to use
      either 'tmpfile', 'mkstemp', or 'mkdtemp' instead for this function.
    </description>
    <internalKey>obsoleteFunctionstmpnam_r</internalKey>
    <severity>MINOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>obsoleteFunctionsutime</key>
    <name>Avoid usage of the function 'utime'</name>
    <description>
      The function 'utime' is obsolete. It is recommended to use the
      function 'utimensat' instead.
    </description>
    <internalKey>obsoleteFunctionsutime</internalKey>
    <severity>MINOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>wrongPrintfScanfArgNum</key>
    <name>Wrong number of parameters given to printf()</name>
    <description>
<![CDATA[
<p>
Wrong number of parameters given to printf().
</p>
<h2>References</h2>
<p><a href="https://cwe.mitre.org/data/definitions/685.html" target="_blank">CWE-685: Function Call With Incorrect Number of Arguments</a></p>
]]>
    </description>
    <tag>cwe</tag>
    <tag>bug</tag>
    <internalKey>wrongPrintfScanfArgNum</internalKey>
    <severity>MAJOR</severity>
    <type>BUG</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>uninitMemberVar</key>
    <name>Member variable is not initialized in the constructor</name>
    <description>
<![CDATA[<p>
Member variable is not initialized in the constructor.
</p><h2>References</h2>
<p><a href="https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=482" target="_blank">EXP33-C. Do not read uninitialized memory</a></p>
<p><a href="https://cwe.mitre.org/data/definitions/398.html" target="_blank">CWE-398: Indicator of Poor Code Quality</a></p>
]]>
    </description>
    <tag>cert</tag>
    <tag>bug</tag>
    <tag>cwe</tag>
    <internalKey>uninitMemberVar</internalKey>
    <severity>MINOR</severity>
    <type>BUG</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>redundantCondition</key>
    <name>Redundant condition is always true</name>
    <description>
<![CDATA[
<p>
Redundant condition: If <code>x > 11</code> the condition <code>x > 10</code> is always true.
</p>
<h2>References</h2>
<p><a href="https://cwe.mitre.org/data/definitions/398.html" target="_blank">CWE-398: Indicator of Poor Code Quality</a></p>
]]>
    </description>
    <tag>cwe</tag>
    <tag>bug</tag>
    <internalKey>redundantCondition</internalKey>
    <severity>MINOR</severity>
    <type>BUG</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>invalidPointerCast</key>
    <name>Invalid pointer casting</name>
    <description>
      <![CDATA[
      <p>
      This casting is not portable due to different binary data representation.
</p><h2>References</h2>
<p><a href="https://cwe.mitre.org/data/definitions/704.html" target="_blank">CWE-704: Incorrect Type Conversion or Cast</a></p>
    ]]>
    </description>
    <tag>cwe</tag>
    <internalKey>invalidPointerCast</internalKey>
    <severity>MINOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>virtualDestructor</key>
    <name>Base classes should have virtual destructors</name>
    <description>
      <![CDATA[
      <p>
Class 'Base' which is inherited by class 'Derived' does not have a
virtual destructor. If you destroy instances of the derived class by
deleting a pointer that points to the base class, only the destructor
of the base class is executed. Thus, dynamic memory that is managed by
the derived class could leak. This can be avoided by adding a virtual
destructor to the base class.
</p>
<h2>References</h2>
<p><a href="https://cwe.mitre.org/data/definitions/404.html" target="_blank">CWE-404: Improper Resource Shutdown or Release</a></p>
    ]]>
    </description>
    <tag>cwe</tag>
    <internalKey>virtualDestructor</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>leakNoVarFunctionCall</key>
    <name>Memory leak across function calls</name>
    <description>
<![CDATA[
<p>
Memory allocated inside the called function is not freed by the caller function.
</p>
<h2>References</h2>
<p><a href="https://cwe.mitre.org/data/definitions/772.html" target="_blank">CWE-772: Missing Release of Resource after Effective Lifetime</a></p>
]]>
    </description>
    <tag>cwe</tag>
    <tag>bug</tag>
    <internalKey>leakNoVarFunctionCall</internalKey>
    <severity>MAJOR</severity>
    <type>BUG</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>stlcstrReturn</key>
    <name>Redundant c_str()-conversion in functions return</name>
    <description>
      <![CDATA[
      <p>
The conversion from const char* as returned by c_str() to std::string
creates an unnecessary string copy. Solve that by directly returning
the string.
</p>
<h2>References</h2>
<p><a href="https://cwe.mitre.org/data/definitions/704.html" target="_blank">CWE-704: Incorrect Type Conversion or Cast</a></p>
]]>
    </description>
    <tag>cwe</tag>
    <internalKey>stlcstrReturn</internalKey>
    <severity>MINOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>stlcstrParam</key>
    <name>Redundant c_str()-conversion in parameter passing</name>
    <description>
      <![CDATA[
      <p>
The conversion from const char* as returned by c_str() to std::string
creates an unnecessary string copy. Solve that by directly passing the
string.
</p>
<h2>References</h2>
<p><a href="https://cwe.mitre.org/data/definitions/704.html" target="_blank">CWE-704: Incorrect Type Conversion or Cast</a></p>
]]>    </description>
    <tag>cwe</tag>
    <internalKey>stlcstrParam</internalKey>
    <severity>MINOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>StlMissingComparison</key>
    <name>Missing bounds check for extra iterator increment in loop</name>
    <description>
      <![CDATA[
      <p>
The iterator incrementing is suspicious - it is incremented at line
and then at line . The loop might unintentionally skip an element in
the container. There is no comparison between these increments to
prevent that the iterator is incremented beyond the end.
</p>
<h2>References</h2>
<p><a href="https://cwe.mitre.org/data/definitions/834.html" target="_blank">CWE-834: Excessive Iteration</a></p>
]]>
    </description>
    <tag>cwe</tag>
    <internalKey>StlMissingComparison</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>strncatUsage</key>
    <name>Dangerous usage of strncat</name>
    <description>
      <![CDATA[
      <p>
At most, strncat appends the 3rd parameter's amount of characters and
adds a terminating null byte.
The safe way to use strncat is to
subtract one from the remaining space in the buffer and use it as 3rd
parameter.
</p>
<p>
Source:
http://www.cplusplus.com/reference/cstring/strncat/
<p>
Source: http://www.opensource.apple.com/source/Libc/Libc-167/gen.subproj/i386.subproj/strncat.c
</p>
<h2>References</h2>
<p><a href="https://cwe.mitre.org/data/definitions/119.html" target="_blank">CWE-119: Improper Restriction of Operations within the Bounds of a Memory Buffer</a></p>
    ]]>
    </description>
    <tag>cwe</tag>
    <internalKey>strncatUsage</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>

  <!-- ########### New in cppcheck 1.55 ########### -->
  <rule>
    <key>CastIntegerToAddressAtReturn</key>
    <name>Returning an integer in a function with pointer return type is not portable</name>
    <description>
      <![CDATA[
      <p>
Returning an integer (int/long/etc) in a function with pointer return
type is not portable across different platforms and compilers. For
example in 32-bit Windows and Linux they are same width, but in 64-bit
Windows and Linux they are of different width. In worst case you end
up casting 64-bit integer down to 32-bit pointer. The safe way is to
always return a pointer.
</p>
<h2>References</h2>
<p><a href="https://cwe.mitre.org/data/definitions/758.html" target="_blank">CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior</a></p>
]]>
    </description>
    <tag>cwe</tag>
    <internalKey>CastIntegerToAddressAtReturn</internalKey>
    <severity>MINOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>IOWithoutPositioning</key>
    <name>Read and write operations without a call to a positioning function</name>
    <description>
      <![CDATA[
      <p>
Read and write operations without a call to a positioning function
(fseek, fsetpos or rewind) or fflush in between result in undefined
behaviour.
</p>
<h2>References</h2>
<p><a href="https://cwe.mitre.org/data/definitions/664.html" target="_blank">CWE-664: Improper Control of a Resource Through its Lifetime</a></p>
]]>
    </description>
    <tag>cwe</tag>
    <internalKey>IOWithoutPositioning</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>bitwiseOnBoolean</key>
    <name>Boolean variable is used in bitwise operation</name>
    <description>
<![CDATA[
<p>
Boolean variable 'varname' is used in bitwise operation. Did you mean '&&' or '||'?
</p>
<h2>References</h2>
<p><a href="https://cwe.mitre.org/data/definitions/398.html" target="_blank">CWE-398: Indicator of Poor Code Quality</a></p>
]]>
    </description>
    <tag>cwe</tag>
    <internalKey>bitwiseOnBoolean</internalKey>
    <severity>MINOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>deallocret</key>
    <name>Returning/dereferencing variable after it is deallocated / released</name>
    <description>
      <![CDATA[
      <p>
Returning/dereferencing 'p' after it is deallocated / released
</p><h2>References</h2>
<p><a href="https://cwe.mitre.org/data/definitions/672.html" target="_blank">CWE-672: Operation on a Resource after Expiration or Release</a></p>
    ]]>
    </description>
    <tag>cwe</tag>
    <tag>bug</tag>
    <internalKey>deallocret</internalKey>
    <severity>MAJOR</severity>
    <type>BUG</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>invalidScanfFormatWidth</key>
    <name>Wrong width for scanf parameter</name>
    <description>
<![CDATA[
<p>
Width 'parameter' given in format string (no. 'symbol' ) doesn't match destination buffer, use %-1s to prevent overflowing it.
</p>
<h2>References</h2>
<p><a href="https://cwe.mitre.org/data/definitions/687.html" target="_blank">CWE-687: Function Call With Incorrectly Specified Argument Value</a></p>
]]>
    </description>
    <tag>cwe</tag>
    <tag>bug</tag>
    <internalKey>invalidScanfFormatWidth</internalKey>
    <severity>MAJOR</severity>
    <type>BUG</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>leakconfiguration</key>
    <name>Function configuration is needed to establish if there is a leak or not</name>
    <description>
      Function configuration is needed to establish if there is a leak or not.
    </description>
    <internalKey>leakconfiguration</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>moduloAlwaysTrueFalse</key>
    <name>Comparison of modulo result is predetermined, because it is always less than 'number'.</name>
    <description>
      <![CDATA[
      <p>
Comparison of modulo result is predetermined, because it is always
less than 'number'.
</p>
<h2>References</h2>
<p><a href="https://cwe.mitre.org/data/definitions/398.html" target="_blank">CWE-398: 7PK - Code Quality</a></p>
    ]]>
    </description>
    <tag>cwe</tag>
    <internalKey>moduloAlwaysTrueFalse</internalKey>
    <severity>MINOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>pointerSize</key>
    <name>Using size of pointer variable instead of size of its data</name>
    <description>
      <![CDATA[
      <p>
Size of pointer 'varname' used instead of size of its data. This is
likely to lead to a buffer overflow. You probably intend to write
'sizeof(*varname)'.
</p>
<h2>References</h2>
<p><a href="https://cwe.mitre.org/data/definitions/467.html" target="_blank">CWE-467: Use of sizeof() on a Pointer Type</a></p>
]]>
    </description>
    <tag>cwe</tag>
    <internalKey>pointerSize</internalKey>
    <severity>MINOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>possibleReadlinkBufferOverrun</key>
    <name>Function might return the full size of variable</name>
    <description>
      Function might return the full size of variable.
    </description>
    <internalKey>possibleReadlinkBufferOverrun</internalKey>
    <severity>MINOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>readWriteOnlyFile</key>
    <name>Read operation on a file that was opened only for writing</name>
    <description>
<![CDATA[
<p>
Read operation on a file that was opened only for writing.
</p>
<h2>References</h2>
<p><a href="https://cwe.mitre.org/data/definitions/664.html" target="_blank">CWE-664: Improper Control of a Resource Through its Lifetime</a></p>
]]>
    </description>
    <tag>cwe</tag>
    <internalKey>readWriteOnlyFile</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>redundantBitwiseOperationInSwitch</key>
    <name>Redundant bitwise operation on variable in switch</name>
    <description>
      Redundant bitwise operation on variable in switch.
    </description>
    <internalKey>redundantBitwiseOperationInSwitch</internalKey>
    <severity>MINOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>suspiciousSemicolon</key>
    <name>Suspicious use of ; at the end of 'if/for/while' statement</name>
    <description>
<![CDATA[<p>
Suspicious use of ; at the end of 'if/for/while' statement.
</p><h2>References</h2>
<p><a href="https://cwe.mitre.org/data/definitions/398.html" target="_blank">CWE-398: Indicator of Poor Code Quality</a></p>
]]>
    </description>
    <tag>cwe</tag>
    <internalKey>suspiciousSemicolon</internalKey>
    <severity>MINOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>useClosedFile</key>
    <name>Used file that is not opened</name>
    <description>
<![CDATA[
<p>
Used file that is not opened.
</p>
<h2>References</h2>
<p><a href="https://cwe.mitre.org/data/definitions/910.html" target="_blank">CWE-910: Use of Expired File Descriptor</a></p>
]]>
    </description>
    <tag>cwe</tag>
    <tag>bug</tag>
    <internalKey>useClosedFile</internalKey>
    <severity>MAJOR</severity>
    <type>BUG</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>useInitializationList</key>
    <name>Member variable shall be initialized using initialization list</name>
    <description>
      <![CDATA[
      <p>
When an object of a class is created, the constructors of all member
variables are called consecutively in the order the variables are
declared, even if you don't explicitly write them to the
initialization list. You could avoid assigning 'variable' a value by
passing the value to the constructor in the initialization list.
</p>
<h2>References</h2>
<p><a href="https://cwe.mitre.org/data/definitions/398.html" target="_blank">CWE-398: Indicator of Poor Code Quality</a></p>
]]>
    </description>
    <tag>cwe</tag>
    <internalKey>useInitializationList</internalKey>
    <severity>MINOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>writeReadOnlyFile</key>
    <name>Write operation on a file that was opened only for reading</name>
    <description>
<![CDATA[
<p>
Write operation on a file that was opened only for reading.
</p>
<h2>References</h2>
<p><a href="https://cwe.mitre.org/data/definitions/664.html" target="_blank">CWE-664: Improper Control of a Resource Through its Lifetime</a></p>
]]>
    </description>
    <tag>cwe</tag>
    <internalKey>writeReadOnlyFile</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>

  <!-- ########### New in cppcheck 1.56 ########### -->
  <rule>
    <key>clarifyStatement</key>
    <name>Check statement and clarify behavior</name>
    <description>
      <![CDATA[
      <p>
A statement like '*A++;' might not do what you intended. Postfix
'operator++' is executed before 'operator*'. Thus, the dereference is
meaningless. Did you intend to write '(*A)++;'?
</p>
<h2>References</h2>
<p><a href="https://cwe.mitre.org/data/definitions/783.html" target="_blank">CWE-783: Operator Precedence Logic Error</a></p>
]]>
    </description>
    <tag>cwe</tag>
    <internalKey>clarifyStatement</internalKey>
    <severity>CRITICAL</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>comparisonOfBoolWithInvalidComparator</key>
    <name>Comparison of a boolean value using relational (&lt;, &gt;, &lt;= or &gt;=) operator</name>
    <description>
      Comparison of a boolean value using relational (&lt;, &gt;, &lt;= or &gt;=) operator.
    </description>
    <internalKey>comparisonOfBoolWithInvalidComparator</internalKey>
    <severity>MINOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>functionStatic</key>
    <name>The member function 'funcname' can be static</name>
    <description>
      <![CDATA[
      <p>
The member function 'class::function' can be made a static function.
Making a function static can bring a performance benefit since no
'this' instance is passed to the function. This change should not
cause compiler errors but it does not necessarily make sense
conceptually. Think about your design and the task of the function
first - is it a function that must not access members of class
instances?
</p>
<h2>References</h2>
<p><a href="https://cwe.mitre.org/data/definitions/398.html" target="_blank">CWE-398: 7PK - Code Quality</a></p>
    ]]>
    </description>
    <tag>cwe</tag>
    <internalKey>functionStatic</internalKey>
    <severity>MINOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>incompleteArrayFill</key>
    <name>Array 'buffer' is filled incompletely</name>
    <description>
      <![CDATA[
      <p>
The array 'buffer' is filled incompletely. The function 'function()'
needs the size given in bytes, but an element of the given array is
larger than one byte. Did you forget to multiply the size with
'sizeof(*buffer)'?
</p>
<h2>References</h2>
<p><a href="https://cwe.mitre.org/data/definitions/131.html" target="_blank">CWE-131: Incorrect Calculation of Buffer Size</a></p>
]]>
    </description>
    <tag>cwe</tag>
    <internalKey>incompleteArrayFill</internalKey>
    <severity>MINOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>invalidPrintfArgType_uint</key>
    <name>Invalid printf argument type (unsigned integer required)</name>
    <description>
<![CDATA[<p>
%u in format string (no. 1) requires 'unsigned int'
</p><h2>References</h2>
<p><a href="https://cwe.mitre.org/data/definitions/686.html" target="_blank">CWE-686: Function Call With Incorrect Argument Type</a></p>
]]>
    </description>
    <tag>cwe</tag>
    <tag>bug</tag>
    <internalKey>invalidPrintfArgType_uint</internalKey>
    <severity>MINOR</severity>
    <type>BUG</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>literalWithCharPtrCompare</key>
    <name>String literal compared with a variable</name>
    <description>
      <![CDATA[
      <p>
String literal compared with variable 'foo'. Did you intend to use
strcmp() instead?
</p>
<h2>References</h2>
<p><a href="https://cwe.mitre.org/data/definitions/595.html" target="_blank">CWE-595: Comparison of Object References Instead of Object Contents</a></p>
    ]]>
    </description>
    <tag>cwe</tag>
    <tag>bug</tag>
    <internalKey>literalWithCharPtrCompare</internalKey>
    <severity>MINOR</severity>
    <type>BUG</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>pointerLessThanZero</key>
    <name>A pointer can not be negative so it is either pointless or an error to check if it is</name>
    <description>
      <![CDATA[
      <p>
A pointer can not be negative so it is either pointless or an error to
check if it is.
</p>
<h2>References</h2>
<p><a href="https://cwe.mitre.org/data/definitions/570.html" target="_blank">CWE-570: Expression is Always False</a></p>
]]>
    </description>
    <tag>cwe</tag>
    <tag>bug</tag>
    <internalKey>pointerLessThanZero</internalKey>
    <severity>MINOR</severity>
    <type>BUG</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>pointerPositive</key>
    <name>A pointer can not be negative so it is either pointless or an error to check if it is not</name>
    <description>
      <![CDATA[
      <p>
A pointer can not be negative so it is either pointless or an error to
check if it is not.
</p>
<h2>References</h2>
<p><a href="https://cwe.mitre.org/data/definitions/570.html" target="_blank">CWE-570: Expression is Always False</a></p>
]]>
    </description>
    <tag>cwe</tag>
    <internalKey>pointerPositive</internalKey>
    <severity>MINOR</severity>
    <type>BUG</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>redundantCopyLocalConst</key>
    <name>Use const reference for 'varname' to avoid unnecessary data copying</name>
    <description>
      <![CDATA[
      <p>
The const variable 'varname' is assigned a copy of the data. You can
avoid the unnecessary data copying by converting 'varname' to const
reference.
</p>
<h2>References</h2>
<p><a href="https://cwe.mitre.org/data/definitions/398.html" target="_blank">CWE-398: 7PK - Code Quality</a></p>
    ]]>
    </description>
    <tag>cwe</tag>
    <internalKey>redundantCopyLocalConst</internalKey>
    <severity>MINOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>shiftNegative</key>
    <name>Shifting by a negative value</name>
    <description>
      <![CDATA[
      <p>
Shifting by a negative value is undefined behaviour
</p><h2>References</h2>
<p><a href="https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=4385" target="_blank">INT34-C. Do not shift an expression by a negative number of bits or by greater than or equal to the number of bits that exist in the operand</a></p>
<p><a href="https://cwe.mitre.org/data/definitions/758.html" target="_blank">CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior</a></p>
    ]]>
    </description>
    <tag>bug</tag>
    <tag>cert</tag>
    <tag>cwe</tag>
    <internalKey>shiftNegative</internalKey>
    <severity>MAJOR</severity>
    <type>BUG</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>unknownPattern</key>
    <name>Unknown pattern used</name>
    <description>
      Unknown pattern used.
    </description>
    <internalKey>unknownPattern</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>uselessCallsEmpty</key>
    <name>Ineffective call of function 'empty()'. Did you intend to call 'clear()' instead?</name>
    <description>
      <![CDATA[
      <p>
Ineffective call of function 'empty()'. Did you intend to call 'clear()' instead?
</p><h2>References</h2>
<p><a href="https://cwe.mitre.org/data/definitions/398.html" target="_blank">CWE-398: Indicator of Poor Code Quality</a></p>
]]>
    </description>
    <tag>cwe</tag>
    <internalKey>uselessCallsEmpty</internalKey>
    <severity>MINOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>uselessCallsRemove</key>
    <name>Return value of std::remove() ignored. Elements remain in container</name>
    <description>
      <![CDATA[
      <p>
The return value of std::remove() is ignored. This function returns an
iterator to the end of the range containing those elements that should
be kept. Elements past new end remain valid but with unspecified
values. Use the erase method of the container to delete them.
</p>
<h2>References</h2>
<p><a href="https://cwe.mitre.org/data/definitions/762.html" target="_blank">CWE-762: Mismatched Memory Management Routines</a></p>
]]>
    </description>
    <tag>cwe</tag>
    <internalKey>uselessCallsRemove</internalKey>
    <severity>MINOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>ConfigurationNotChecked</key>
    <name>
      Skipping configuration 'X' since the value of 'X' is unknown
    </name>
    <description>
      <![CDATA[
      Skipping configuration 'X' since the value of 'X' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.
    ]]>
    </description>
    <internalKey>ConfigurationNotChecked</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>toomanyconfigs</key>
    <name>Too many #ifdef configurations - cppcheck only checks 12 configurations</name>
    <description>
      <![CDATA[
      <p>
The checking of the file will be interrupted because there are too
many #ifdef configurations. Checking of all #ifdef configurations can
be forced by --force command line option or from GUI preferences.
However that may increase the checking time. For more details, use
--enable=information.
</p>
<h2>References</h2>
<p><a href="https://cwe.mitre.org/data/definitions/398.html" target="_blank">CWE-398: Indicator of Poor Code Quality</a></p>
]]>
    </description>
    <tag>cwe</tag>
    <internalKey>toomanyconfigs</internalKey>
    <severity>INFO</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>

  <!-- ########### New in cppcheck 1.57 ########### -->
  <rule>
    <key>CastAddressToIntegerAtReturn</key>
    <name>Returning an address value in a function with integer return type is not portable</name>
    <description>
      <![CDATA[
      <p>
Returning an address value in a function with integer (int/long/etc)
return type is not portable across different platforms and compilers.
For example in 32-bit Windows and Linux they are same width, but in
64-bit Windows and Linux they are of different width. In worst case
you end up casting 64-bit address down to 32-bit integer. The safe way
is to always return an integer.
</p>
<h2>References</h2>
<p><a href="https://cwe.mitre.org/data/definitions/758.html" target="_blank">CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior</a></p>
]]>
    </description>
    <tag>cwe</tag>
    <internalKey>CastAddressToIntegerAtReturn</internalKey>
    <severity>MINOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>comparisonOfBoolWithBoolError</key>
    <name>Comparison of a variable having boolean value using relational (&lt;, &gt;, &lt;= or &gt;=) operator</name>
    <description>
      <![CDATA[
      <p>
The variable is of type 'bool' and comparing 'bool' value
using relational (<, >, <= or >=) operator could cause unexpected
results.
</p>
<h2>References</h2>
<p><a href="https://cwe.mitre.org/data/definitions/398.html" target="_blank">CWE-398: 7PK - Code Quality</a></p>
    ]]>
    </description>
    <tag>cwe</tag>
    <tag>bug</tag>
    <internalKey>comparisonOfBoolWithBoolError</internalKey>
    <severity>MINOR</severity>
    <type>BUG</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>comparisonOfFuncReturningBoolError</key>
    <name>Comparison of a function returning boolean value using relational (&lt;, &gt;, &lt;= or &gt;=) operator</name>
    <description>
      <![CDATA[
      <p>
The return type of function is 'bool' and result is of
type 'bool'. Comparing 'bool' value using relational (<, >, <= or >=)
operator could cause unexpected results.
</p>
<h2>References</h2>
<p><a href="https://cwe.mitre.org/data/definitions/398.html" target="_blank">CWE-398: 7PK - Code Quality</a></p>
    ]]>
    </description>
    <tag>cwe</tag>
    <tag>bug</tag>
    <internalKey>comparisonOfFuncReturningBoolError</internalKey>
    <severity>MINOR</severity>
    <type>BUG</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>comparisonOfTwoFuncsReturningBoolError</key>
    <name>Comparison of two functions returning boolean value using relational (&lt;, &gt;, &lt;= or &gt;=) operator</name>
    <description>
      <![CDATA[
      <p>
The return type of both functions is
'bool' and result is of type 'bool'. Comparing 'bool' value using
relational (<, >, <= or >=) operator could cause unexpected results.
</p>
<h2>References</h2>
<p><a href="https://cwe.mitre.org/data/definitions/398.html" target="_blank">CWE-398: 7PK - Code Quality</a></p>
    ]]>
    </description>
    <tag>cwe</tag>
    <tag>bug</tag>
    <internalKey>comparisonOfTwoFuncsReturningBoolError</internalKey>
    <severity>MINOR</severity>
    <type>BUG</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>copyCtorPointerCopying</key>
    <name>Value of pointer 'var', which points to allocated memory, is copied in copy constructor instead of allocating new memory</name>
    <description>
      <![CDATA[
      <p>
Value of pointer 'var', which points to allocated memory, is copied in
copy constructor instead of allocating new memory.
</p>
<h2>References</h2>
<p><a href="https://cwe.mitre.org/data/definitions/398.html" target="_blank">CWE-398: 7PK - Code Quality</a></p>
    ]]>
    </description>
    <tag>cwe</tag>
    <internalKey>copyCtorPointerCopying</internalKey>
    <severity>MINOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>invalidFree</key>
    <name>Invalid memory address freed</name>
    <description>
      Invalid memory address freed.
    </description>
    <internalKey>invalidFree</internalKey>
    <severity>MAJOR</severity>
    <type>BUG</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>invalidLengthModifierError</key>
    <name>'modifier' in format string is a length modifier and cannot be used without a conversion specifier</name>
    <description>
<![CDATA[<p>
'modifier' in format string is a length modifier and cannot be used without a conversion specifier.
</p><h2>References</h2>
<p><a href="https://cwe.mitre.org/data/definitions/704.html" target="_blank">CWE-704: Incorrect Type Conversion or Cast</a></p>
]]>
    </description>
    <tag>cwe</tag>
    <internalKey>invalidLengthModifierError</internalKey>
    <severity>MINOR</severity>
    <type>BUG</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>noCopyConstructor</key>
    <name>Class 'class' does not have a copy constructor which is recommended since it has dynamic memory/resource allocation(s)</name>
    <description>
      <![CDATA[
      <p>
Class 'class' does not have a copy constructor which is recommended
since it has dynamic memory/resource allocation(s).
</p>
<h2>References</h2>
<p><a href="https://cwe.mitre.org/data/definitions/398.html" target="_blank">CWE-398: Indicator of Poor Code Quality</a></p>
]]>
    </description>
    <tag>cwe</tag>
    <internalKey>noCopyConstructor</internalKey>
    <severity>MINOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>identicalConditionAfterEarlyExit</key>
    <name>Identical condition 'x', second condition is always false</name>
    <description>
      <![CDATA[
      <p>
Identical condition 'x', second condition is always false
</p><h2>References</h2>
<p><a href="https://cwe.mitre.org/data/definitions/398.html" target="_blank">CWE-398: 7PK - Code Quality</a></p>
    ]]>
    </description>
    <tag>cwe</tag>
    <tag>bug</tag>
    <internalKey>identicalConditionAfterEarlyExit</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
    <rule>
    <key>oppositeInnerCondition</key>
    <name>Opposite inner 'if' condition leads to a dead code block</name>
    <description>
      <![CDATA[
      <p>
Opposite inner 'if' condition leads to a dead code block (outer
condition is 'x' and inner condition is '!x').
</p>
<h2>References</h2>
<p><a href="https://cwe.mitre.org/data/definitions/398.html" target="_blank">CWE-398: 7PK - Code Quality</a></p>
    ]]>
    </description>
    <tag>cwe</tag>
    <tag>bug</tag>
    <internalKey>oppositeInnerCondition</internalKey>
    <severity>MINOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>redundantAssignment</key>
    <name>Variable 'var' is reassigned a value before the old one has been used</name>
    <description>
      <![CDATA[
      <p>
Variable 'var' is reassigned a value before the old one has been used.
</p><h2>References</h2>
<p><a href="https://cwe.mitre.org/data/definitions/563.html" target="_blank">CWE-563: Assignment to Variable without Use</a></p>
    ]]>
    </description>
    <tag>cwe</tag>
    <internalKey>redundantAssignment</internalKey>
    <severity>MINOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>redundantCopyInSwitch</key>
    <name>Buffer 'var' is being written before its old content has been used</name>
    <description>
      <![CDATA[
      <p>
Buffer 'var' is being written before its old content has been used.
'break;' missing?
</p>
<h2>References</h2>
<p><a href="https://cwe.mitre.org/data/definitions/563.html" target="_blank">CWE-563: Assignment to Variable without Use</a></p>
    ]]>
    </description>
    <tag>cwe</tag>
    <internalKey>redundantCopyInSwitch</internalKey>
    <severity>MINOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>redundantNextPrevious</key>
    <name>Call to 'Token::func1()' followed by 'Token::func2()' can be simplified</name>
    <description>
      Call to 'Token::func1()' followed by 'Token::func2()' can be simplified.
    </description>
    <internalKey>redundantNextPrevious</internalKey>
    <severity>MINOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>unsafeClassCanLeak</key>
    <name>Class 'class' is unsafe, 'class::varname' can leak by wrong usage</name>
    <description>
      <![CDATA[
      <p>
The class 'class' is unsafe, wrong usage can cause memory/resource
leaks for 'class::varname'. This can for instance be fixed by adding
proper cleanup in the destructor.
</p>
<h2>References</h2>
<p><a href="https://cwe.mitre.org/data/definitions/398.html" target="_blank">CWE-398: 7PK - Code Quality</a></p>
    ]]>
    </description>
    <tag>cwe</tag>
    <internalKey>unsafeClassCanLeak</internalKey>
    <severity>MINOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>redundantCopy</key>
    <name>Buffer 'var' is being written before its old content has been used</name>
    <description>
      <![CDATA[
      <p>
Buffer 'var' is being written before its old content has been used.
</p>
<h2>References</h2>
<p><a href="https://cwe.mitre.org/data/definitions/563.html" target="_blank">CWE-563: Assignment to Variable without Use</a></p>
    ]]>
    </description>
    <tag>cwe</tag>
    <internalKey>redundantCopy</internalKey>
    <severity>MINOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>argumentSize</key>
    <name>
      Passing too small array as argument.
    </name>
    <description>
      <![CDATA[
      <p>
The array 'array' is too small, the function 'function' expects a
bigger one.
</p>
<h2>References</h2>
<p><a href="https://cwe.mitre.org/data/definitions/398.html" target="_blank">CWE-398: Indicator of Poor Code Quality</a></p>
]]>
    </description>
    <tag>cwe</tag>
    <tag>bug</tag>
    <internalKey>argumentSize</internalKey>
    <severity>MINOR</severity>
    <type>BUG</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>

  <!-- ########### New in cppcheck 1.59 ########### -->
  <rule>
    <key>checkCastIntToCharAndBack</key>
    <name>Storing func_name() return value in char variable and then comparing with EOF</name>
    <description>
      <![CDATA[
      <p>
When saving func_name() return value in char variable there is loss of
precision.  When func_name() returns EOF this value is truncated.
Comparing the char variable with EOF can have unexpected results. For
instance a loop "while (EOF != (c = func_name());" loops forever on
some compilers/platforms and on other compilers/platforms it will stop
when the file contains a matching character.
</p>
<h2>References</h2>
<p><a href="https://cwe.mitre.org/data/definitions/197.html" target="_blank">CWE-197: Numeric Truncation Error</a></p>
    ]]>
    </description>
    <tag>cwe</tag>
    <internalKey>checkCastIntToCharAndBack</internalKey>
    <severity>MINOR</severity>
    <type>BUG</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>mallocOnClassError</key>
    <name>Memory for class instance allocated with malloc(), but class provides constructors</name>
    <description>
      <![CDATA[
      <p>
Memory for class instance allocated with malloc(), but class provides constructors.
This is unsafe, since no constructor is called and class
members remain uninitialized. Consider using 'new' instead.
</p>
<h2>References</h2>
<p><a href="https://cwe.mitre.org/data/definitions/665.html" target="_blank">CWE-665: Improper Initialization</a></p>
]]>
    </description>
    <tag>cwe</tag>
    <tag>bug</tag>
    <internalKey>mallocOnClassError</internalKey>
    <severity>MAJOR</severity>
    <type>BUG</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>mallocOnClassWarning</key>
    <name>Memory for class instance allocated with malloc(), but class provides constructors</name>
    <description>
      <![CDATA[
      <p>
Memory for class instance allocated with malloc(), but class provides
constructors. This is unsafe, since no constructor is called and class
members remain uninitialized. Consider using 'new' instead.
</p>
<h2>References</h2>
<p><a href="https://cwe.mitre.org/data/definitions/762.html" target="_blank">CWE-762: Mismatched Memory Management Routines</a></p>
]]>
    </description>
    <tag>cwe</tag>
    <internalKey>mallocOnClassWarning</internalKey>
    <severity>MINOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>mismatchingBitAnd</key>
    <name>Mismatching bitmasks</name>
    <description>
<![CDATA[
<p>
Mismatching bitmasks. Result is always 0</p>
<pre>
X = Y & 0xf0; 
Z = X & 0x1;
</pre>
results => Z=0
<h2>References</h2>
<p><a href="https://cwe.mitre.org/data/definitions/398.html" target="_blank">CWE-398: Indicator of Poor Code Quality</a></p>
]]>
    </description>
    <tag>cwe</tag>
    <internalKey>mismatchingBitAnd</internalKey>
    <severity>MINOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>missingIncludeSystem</key>
    <name>Include file not found</name>
    <description>
      <![CDATA[
      Include file not found. Please note: Cppcheck does not need standard library headers to get proper results.
    ]]>
    </description>
    <tag>tool-error</tag>
    <internalKey>missingIncludeSystem</internalKey>
    <severity>MINOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>stlBoundaries</key>
    <name>Dangerous comparison using operator&lt; on iterator</name>
    <description>
      <![CDATA[
      <p>
Iterator compared with <code>operator<</code>. This is dangerous since the order of
items in the container is not guaranteed. One should use <code>operator!=</code>
instead to compare iterators.
</p>
<h2>References</h2>
<p><a href="https://cwe.mitre.org/data/definitions/664.html" target="_blank">CWE-664: Improper Control of a Resource Through its Lifetime</a></p>
]]>
    </description>
    <tag>cwe</tag>
    <internalKey>stlBoundaries</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>tooBigSleepTime</key>
    <name>Invalid argument for usleep</name>
    <description>The argument of usleep must be less than 1000000.</description>
    <internalKey>tooBigSleepTime</internalKey>
    <severity>MAJOR</severity>
    <type>BUG</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>uninitStructMember</key>
    <name>Uninitialized struct member</name>
    <description>
<![CDATA[<p>
Missing initialization for a struct member.
</p><h2>References</h2>
<p><a href="https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=482" target="_blank">EXP33-C. Do not read uninitialized memory</a></p>
<p><a href="https://cwe.mitre.org/data/definitions/908.html" target="_blank">CWE-908: Use of Uninitialized Resource</a></p>
]]>
    </description>
    <tag>bug</tag>
    <tag>cert</tag>
    <tag>cwe</tag>
    <internalKey>uninitStructMember</internalKey>
    <severity>MAJOR</severity>
    <type>BUG</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>uselessAssignmentPtrArg</key>
    <name>Effectless function parameter assignment</name>
    <description>
      <![CDATA[
      <p>
Assignment of function parameter has no effect outside the function.
Did you forget dereferencing it?
</p>
<h2>References</h2>
<p><a href="https://cwe.mitre.org/data/definitions/398.html" target="_blank">CWE-398: 7PK - Code Quality</a></p>
    ]]>
    </description>
    <tag>cwe</tag>
    <tag>bug</tag>
    <internalKey>uselessAssignmentPtrArg</internalKey>
    <severity>MINOR</severity>
    <type>BUG</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>varFuncNullUB</key>
    <name>Passing NULL after the last typed argument to a variadic function leads to undefined behaviour</name>
    <description>
      <![CDATA[
      <p>
Passing NULL after the last typed argument to a variadic function
leads to undefined behaviour.
The C99 standard, in section
7.15.1.1, states that if the type used by va_arg() is not compatible
with the type of the actual next argument (as promoted according to
the default argument promotions), the behavior is undefined.
The
value of the NULL macro is an implementation-defined null pointer
constant (7.17), which can be any integer constant expression with the
value 0, or such an expression casted to (void*) (6.3.2.3). This
includes values like 0, 0L, or even 0LL.
In practice on common
architectures, this will cause real crashes if sizeof(int) !=
sizeof(void*), and NULL is defined to 0 or any other null pointer
constant that promotes to int.
To reproduce you might be able to
use this little code example on 64bit platforms. If the output
includes "ERROR", the sentinel had only 4 out of 8 bytes initialized
to zero and was not detected as the final argument to stop argument
processing via va_arg(). Changing the 0 to (void*)0 or 0L will make
the "ERROR" output go away.</p>
<pre>
#include &lt;stdarg.h&gt;
#include &lt;stdio.h&gt;

void f(char *s, ...) {
  va_list ap;
  va_start(ap,s);
  for (;;) {
    char *p = va_arg(ap,char*);
    printf("%018p, %s\n", p, (long)p & 255 ? p : "");
    if(!p) break;
  }
  va_end(ap);
}

void g() {
  char *s2 = "x";
  char *s3 = "ERROR";

  // changing 0 to 0L for the 7th argument (which is intended to act as sentinel) makes the error go away on x86_64
  f("first", s2, s2, s2, s2, s2, 0, s3, (char*)0);
}

void h() {
  int i;
  volatile unsigned char a[1000];
  for (i = 0; i &lt; sizeof(a); i++)
    a[i] = -1;
}

int main() {
  h();
  g();
  return 0;
}
</pre>
<h2>References</h2>
<p><a href="https://cwe.mitre.org/data/definitions/475.html" target="_blank">CWE-475: Undefined Behavior for Input to API</a></p>
]]>
    </description>
    <tag>bug</tag>
    <tag>cwe</tag>
    <internalKey>varFuncNullUB</internalKey>
    <severity>MINOR</severity>
    <type>BUG</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>

  <rule>
    <key>writeOutsideBufferSize</key>
    <name>Writing '1' bytes outside buffer size.</name>
    <description>Writing '1' bytes outside buffer size.</description>
    <tag>bug</tag>
    <internalKey>writeOutsideBufferSize</internalKey>
    <severity>MAJOR</severity>
    <type>BUG</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>

  <rule>
    <key>wrongPipeParameterSize</key>
    <name>Buffer must have size of 2 integers if used as parameter of pipe()</name>
    <description>
      <![CDATA[
      <p>
The pipe()/pipe2() system command takes an argument, which is an array
of exactly two integers.
The variable 'varname' is an array of size
dimension, which does not match.
</p>
<h2>References</h2>
<p><a href="https://cwe.mitre.org/data/definitions/686.html" target="_blank">CWE-686: Function Call With Incorrect Argument Type</a></p>
]]>
    </description>
    <tag>cwe</tag>
    <tag>bug</tag>
    <internalKey>wrongPipeParameterSize</internalKey>
    <severity>MAJOR</severity>
    <type>BUG</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>

  <rule>
    <key>class_X_Y</key>
    <name>Unhandled code</name>
    <description>This code is not handled. You can use -I or --include to add handling of this code.</description>
    <internalKey>class_X_Y</internalKey>
    <severity>MINOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>

  <!-- ########### New in cppcheck 1.60 ########### -->
  <rule>
    <key>derefInvalidIterator</key>
    <name>Possible dereference of an invalid iterator</name>
    <description>
      <![CDATA[
      <p>
Possible dereference of an invalid iterator. Make sure to check
that the iterator is valid before dereferencing it - not after.
</p>
<h2>References</h2>
<p><a href="https://cwe.mitre.org/data/definitions/825.html" target="_blank">CWE-825: Expired Pointer Dereference</a></p>
]]>
    </description>
    <tag>cwe</tag>
    <internalKey>derefInvalidIterator</internalKey>
    <severity>MINOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>

  <!-- ########### New in cppcheck 1.61 ########### -->
  <rule>
    <key>arithOperationsOnVoidPointer</key>
    <name>Undefined pointer calculation behaviour</name>
    <description>
      <![CDATA[
      <p>
When using void pointers in
calculations, the behaviour is undefined. Arithmetic operations on
'void *' is a GNU C extension, which defines the 'sizeof(void)' to be
1.
</p>
<h2>References</h2>
<p><a href="https://cwe.mitre.org/data/definitions/467.html" target="_blank">CWE-467: Use of sizeof() on a Pointer Type</a></p>
]]>
    </description>
    <tag>bug</tag>
    <tag>cwe</tag>
    <internalKey>arithOperationsOnVoidPointer</internalKey>
    <severity>MAJOR</severity>
    <type>BUG</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>commaSeparatedReturn</key>
    <name>Usage of comma in return statements</name>
    <description>
      <![CDATA[
      <p>
Comma is used in return statement. When comma is used in a return
statement it can easily be misread as a semicolon. For example in the
code below the value of 'b' is returned if the condition is true, but
it is easy to think that 'a+1' is returned:</p>
<pre>
  if (x)
    return a + 1,
  b++;
</pre>
However it can be useful to use comma in
macros. Cppcheck does not warn when such a macro is then used in a
return statement, it is less likely such code is misunderstood.
<h2>References</h2>
<p><a href="https://cwe.mitre.org/data/definitions/398.html" target="_blank">CWE-398: 7PK - Code Quality</a></p>
    ]]>
    </description>
    <tag>cwe</tag>
    <internalKey>commaSeparatedReturn</internalKey>
    <severity>MINOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>nanInArithmeticExpression</key>
    <name>Using NaN/Inf in a computation</name>
    <description>
      <![CDATA[
      <p>
Using NaN/Inf in a computation. Although nothing bad really happens,
it is suspicious.
</p>
<h2>References</h2>
<p><a href="https://cwe.mitre.org/data/definitions/369.html" target="_blank">CWE-369: Divide By Zero</a></p>
]]>
    </description>
    <tag>cwe</tag>
    <tag>bug</tag>
    <internalKey>nanInArithmeticExpression</internalKey>
    <severity>MINOR</severity>
    <type>BUG</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>sizeofDereferencedVoidPointer</key>
    <name>Usage of 'sizeof' on dereferenced void pointer</name>
    <description>
      <![CDATA[
      <p>
'*varname' is of type 'void', the behaviour of 'sizeof(void)' is not
covered by the ISO C standard. A value for 'sizeof(void)' is defined
only as part of a GNU C extension, which defines 'sizeof(void)' to be
1.
</p>
<h2>References</h2>
<p><a href="https://cwe.mitre.org/data/definitions/682.html" target="_blank">CWE-682: Incorrect Calculation</a></p>
]]>
    </description>
    <tag>cwe</tag>
    <tag>bug</tag>
    <internalKey>sizeofDereferencedVoidPointer</internalKey>
    <severity>MINOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>sizeofVoid</key>
    <name>Behaviour of 'sizeof(void)' is not covered by the ISO C standard</name>
    <description>
      <![CDATA[
      <p>
Behaviour of 'sizeof(void)' is not covered by the ISO C standard. A
value for 'sizeof(void)' is defined only as part of a GNU C extension,
which defines 'sizeof(void)' to be 1.
</p>
<h2>References</h2>
<p><a href="https://cwe.mitre.org/data/definitions/682.html" target="_blank">CWE-682: Incorrect Calculation</a></p>
]]>
    </description>
    <tag>cwe</tag>
    <tag>bug</tag>
    <internalKey>sizeofVoid</internalKey>
    <severity>MINOR</severity>
    <type>BUG</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>wrongPrintfScanfParameterPositionError</key>
    <name>printf: referencing wrong parameter index</name>
    <description>
<![CDATA[<p>
printf: referencing parameter 'x' while 'y' arguments given.
</p><h2>References</h2>
<p><a href="https://cwe.mitre.org/data/definitions/685.html" target="_blank">CWE-685: Function Call With Incorrect Number of Arguments</a></p>
]]>
    </description>
    <tag>cwe</tag>
    <tag>bug</tag>
    <internalKey>wrongPrintfScanfParameterPositionError</internalKey>
    <severity>MAJOR</severity>
    <type>BUG</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>obsoleteFunctionsctime_r</key>
    <name>Obsolete function 'ctime_r' called</name>
    <description>Obsolete function 'ctime_r' called. It is recommended to use the function 'strftime' instead</description>
    <internalKey>obsoleteFunctionsctime_r</internalKey>
    <severity>MINOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>

  <!-- ########### New in cppcheck 1.62 ########### -->
  <rule>
    <key>duplInheritedMember</key>
    <name>Redefinition of a member variable in a subclass</name>
    <description>
      <![CDATA[
      <p>
The class 'derived' defines member variable with name 'variable' also
defined in its parent class 'base'.
</p>
<h2>References</h2>
<p><a href="https://cwe.mitre.org/data/definitions/398.html" target="_blank">CWE-398: Indicator of Poor Code Quality</a></p>
]]>
    </description>
    <tag>cwe</tag>
    <internalKey>duplInheritedMember</internalKey>
    <severity>MINOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>invalidScanfArgType_int</key>
    <name>Invalid scanf argument type (int pointer required)</name>
    <description>
      <![CDATA[
      <p>
%d in format string requires 'int *'
</p>
<h2>References</h2>
<p><a href="https://cwe.mitre.org/data/definitions/686.html" target="_blank">CWE-686: Function Call With Incorrect Argument Type</a></p>
]]>
    </description>
    <tag>bug</tag>
    <tag>cwe</tag>
    <internalKey>invalidScanfArgType_int</internalKey>
    <severity>MAJOR</severity>
    <type>BUG</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>invalidScanfArgType_float</key>
    <name>Invalid scanf argument type (float pointer required)</name>
    <description>
      <![CDATA[
      <p>
%f in format string requires 'float *'
</p>
<h2>References</h2>
<p><a href="https://cwe.mitre.org/data/definitions/686.html" target="_blank">CWE-686: Function Call With Incorrect Argument Type</a></p>
]]>
    </description>
    <tag>bug</tag>
    <tag>cwe</tag>
    <internalKey>invalidScanfArgType_float</internalKey>
    <severity>MAJOR</severity>
    <type>BUG</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>invalidScanfArgType_s</key>
    <name>Invalid scanf argument type (char pointer required)</name>
    <description>
      <![CDATA[
      <p>
%s in format string requires a 'char *'
</p>
<h2>References</h2>
<p><a href="https://cwe.mitre.org/data/definitions/686.html" target="_blank">CWE-686: Function Call With Incorrect Argument Type</a></p>
]]>
    </description>
    <tag>bug</tag>
    <tag>cwe</tag>
    <internalKey>invalidScanfArgType_s</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>comparisonFunctionIsAlwaysTrueOrFalse</key>
    <name>Suspicious variable comparison with isless()</name>
    <description>
      <![CDATA[
      <p>
The function isless is designed to compare two variables. Calling this
function with one variable (varName) for both parameters leads to a
statement which is always false.
</p>
<h2>References</h2>
<p><a href="https://cwe.mitre.org/data/definitions/570.html" target="_blank">CWE-570: Expression is Always False</a></p>
    ]]>
    </description>
    <tag>cwe</tag>
    <tag>bug</tag>
    <internalKey>comparisonFunctionIsAlwaysTrueOrFalse</internalKey>
    <severity>MINOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>zerodivcond</key>
    <name>Either the condition is redundant or there is division by zero</name>
    <description>
      <![CDATA[
      <p>
Either the condition is redundant or there is division by zero.
</p>
<h2>References</h2>
<p><a href="https://cwe.mitre.org/data/definitions/369.html" target="_blank">CWE-369: Divide By Zero</a></p>
    ]]>
    </description>
    <tag>cwe</tag>
    <tag>bug</tag>
    <tag>cert</tag>
    <internalKey>zerodivcond</internalKey>
    <severity>MINOR</severity>
    <type>BUG</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>

  <!-- ########### New in cppcheck 1.63 ########### -->
  <rule>
    <key>assertWithSideEffect</key>
    <name>Assert with side effect</name>
    <description>
      <![CDATA[
      <p>
Non-pure function: 'function' is called inside assert statement.
Assert statements are removed from release builds so the code inside
assert statement is not executed. If the code is needed also in
release builds, this is a bug.
</p>
<h2>References</h2>
<p><a href="https://cwe.mitre.org/data/definitions/398.html" target="_blank">CWE-398: Indicator of Poor Code Quality</a></p>
     ]]>
    </description>
    <tag>cwe</tag>
    <tag>bug</tag>
    <internalKey>assertWithSideEffect</internalKey>
    <severity>MINOR</severity>
    <type>BUG</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>pointerArithBool</key>
    <name>Pointer arithmetic conversion</name>
    <description>
      <![CDATA[
      <p>
Converting pointer arithmetic result to bool. The boolean result is
always true unless there is pointer arithmetic overflow, and overflow
is undefined behaviour. Probably a dereference is forgotten.
</p>
<h2>References</h2>
<p><a href="https://cwe.mitre.org/data/definitions/571.html" target="_blank">CWE-571: Expression is Always True</a></p>
    ]]>
    </description>
    <tag>cwe</tag>
    <tag>bug</tag>
    <internalKey>pointerArithBool</internalKey>
    <severity>MAJOR</severity>
    <type>BUG</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>leakReturnValNotUsed</key>
    <name>Leak of return value</name>
    <description>
<![CDATA[<p>
Return value of allocation function is not stored.
</p><h2>References</h2>
<p><a href="https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=445" target="_blank">MEM31-C. Free dynamically allocated memory when no longer needed</a></p>
<p><a href="https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=17924853" target="_blank">EXP12-C. Do not ignore values returned by functions</a></p>
<p><a href="https://cwe.mitre.org/data/definitions/771.html" target="_blank">CWE-771: Missing Reference to Active Allocated Resource</a></p>
]]>
    </description>
    <tag>cert</tag>
    <tag>cwe</tag>
    <internalKey>leakReturnValNotUsed</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>invalidFunctionArg</key>
    <name>Invalid value range of function argument</name>
    <description>
      <![CDATA[
      <p>
Invalid value range of function argument
</p>
<h2>References</h2>
<p><a href="https://cwe.mitre.org/data/definitions/628.html" target="_blank">CWE-628: Function Call with Incorrectly Specified Arguments</a></p>
]]>
    </description>
    <tag>cwe</tag>
    <internalKey>invalidFunctionArg</internalKey>
    <severity>MAJOR</severity>
    <type>BUG</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>invalidFunctionArgBool</key>
    <name>Invalid function bool argument</name>
    <description>
<![CDATA[
<p>
A function gets passed an invalid argument. A non-boolean value is required.
</p>
<h2>References</h2>
<p><a href="https://cwe.mitre.org/data/definitions/628.html" target="_blank">CWE-628: Function Call with Incorrectly Specified Arguments</a></p>
]]>
    </description>
    <tag>cwe</tag>
    <tag>bug</tag>
    <internalKey>invalidFunctionArgBool</internalKey>
    <severity>MAJOR</severity>
    <type>BUG</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>

  <!-- ########### New in cppcheck 1.64 ########### -->
  <rule>
    <key>negativeMemoryAllocationSize</key>
    <name>Memory allocation size is negative</name>
    <description>
      <![CDATA[
      <p>
Memory allocation size is negative.Negative allocation size has no
specified behaviour.
</p>
<h2>References</h2>
<p><a href="https://cwe.mitre.org/data/definitions/131.html" target="_blank">CWE-131: Incorrect Calculation of Buffer Size</a></p>
]]>
    </description>
    <tag>cwe</tag>
    <tag>bug</tag>
    <internalKey>negativeMemoryAllocationSize</internalKey>
    <severity>MAJOR</severity>
    <type>BUG</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>memsetFloat</key>
    <name>Memset Float</name>
    <description>
      <![CDATA[
      <p>
The 2nd memset() argument 'varname' is a float, its representation is
implementation defined. memset() is used to set each byte of a block
of memory to a specific value and the actual representation of a
floating-point value is implementation defined.
</p>
<h2>References</h2>
<p><a href="https://cwe.mitre.org/data/definitions/688.html" target="_blank">CWE-688: Function Call With Incorrect Variable or Reference as Argument</a></p>
    ]]>
    </description>
    <tag>cwe</tag>
    <internalKey>memsetFloat</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>memsetValueOutOfRange</key>
    <name>Memset value out of range</name>
    <description>
      <![CDATA[
      <p>
The 2nd memset() argument 'varname' doesn't fit into an 'unsigned
char'. The 2nd parameter is passed as an 'int', but the function fills
the block of memory using the 'unsigned char' conversion of this
value.
</p>
<h2>References</h2>
<p><a href="https://cwe.mitre.org/data/definitions/686.html" target="_blank">CWE-686: Function Call With Incorrect Argument Type</a></p>
]]>
    </description>
    <tag>cwe</tag>
    <tag>bug</tag>
    <tag>cert</tag>
    <tag>cwe</tag>
    <internalKey>memsetValueOutOfRange</internalKey>
    <severity>MAJOR</severity>
    <type>BUG</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
    <!-- ########### New in cppcheck 1.65 ########### -->
  <rule>
    <key>exceptThrowInNoexecptFunction</key>
    <name>Exception thrown in noexcept function</name>
    <description>
      Inproper function declaration using noexcep.
      <!-- see also http://aristeia.com/EC++11-14/noexcept%202014-03-31.pdf (draft) -->
    </description>
    <internalKey>exceptThrowInNoexecptFunction</internalKey>
    <severity>MAJOR</severity>
    <type>BUG</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>exceptThrowInNoThrowFunction</key>
    <name>Exception thrown in nothrow() function</name>
    <description>
      Function is declared as nothrow and but exceptions might occur.
    </description>
    <internalKey>exceptThrowInNoThrowFunction</internalKey>
    <severity>MAJOR</severity>
    <type>BUG</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>exceptThrowInAttributeNoThrowFunction</key>
    <name>Exception thrown in __attribute__((nothrow)) function</name>
    <description>
      Exception thrown in __attribute__((nothrow)) function.
    </description>
    <internalKey>exceptThrowInAttributeNoThrowFunction</internalKey>
    <severity>MAJOR</severity>
    <type>BUG</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>exceptThrowInDeclspecNoThrowFunction</key>
    <name>Exception thrown in __declspec(nothrow) function</name>
    <description>
      Exception thrown in __declspec(nothrow) function.
    </description>
    <internalKey>exceptThrowInDeclspecNoThrowFunction</internalKey>
    <severity>MAJOR</severity>
    <type>BUG</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>seekOnAppendedFile</key>
    <name>Repositioning operation in append mode</name>
    <description>
      <![CDATA[
      <p>
Repositioning operation performed on a file opened in append mode has
no effect.
</p>
<h2>References</h2>
<p><a href="https://cwe.mitre.org/data/definitions/398.html" target="_blank">CWE-398: 7PK - Code Quality</a></p>
    ]]>
    </description>
    <tag>cwe</tag>
    <tag>bug</tag>
    <internalKey>seekOnAppendedFile</internalKey>
    <severity>MINOR</severity>
    <type>BUG</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
    <!-- ########### New in cppcheck 1.66 ########### -->
  <rule>
    <key>arrayIndexOutOfBoundsCond</key>
    <name>Array index out of bounds</name>
    <description>
      <![CDATA[
      <p>
Array 'x[SZ]' accessed at larger index I, which is out of bounds. Otherwise
condition '==I' is redundant.
</p>
<h2>References</h2>
<p><a href="https://cwe.mitre.org/data/definitions/119.html" target="_blank">CWE-119: Improper Restriction of Operations within the Bounds of a Memory Buffer</a></p>
]]>
</description>
    <tag>bug</tag>
    <tag>cert</tag>
    <tag>cwe</tag>
    <internalKey>arrayIndexOutOfBoundsCond</internalKey>
    <severity>MINOR</severity>
    <type>BUG</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>charLiteralWithCharPtrCompare</key>
    <name>Char literal compared with pointer</name>
    <description>
      <![CDATA[
      <p>
Char literal compared with a pointer. Did you intend to
dereference it?
</p>
<h2>References</h2>
<p><a href="https://cwe.mitre.org/data/definitions/595.html" target="_blank">CWE-595: Comparison of Object References Instead of Object Contents</a></p>
]]>
    </description>
    <tag>cwe</tag>
    <tag>bug</tag>
    <internalKey>charLiteralWithCharPtrCompare</internalKey>
    <severity>MINOR</severity>
    <type>BUG</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>obsoleteFunctionasctime</key>
    <name>Avoid usage of the function 'asctime'</name>
    <description>
      The function 'asctime' is obsolete. It is recommended to use
      the function 'strftime' instead.
    </description>
    <internalKey>obsoleteFunctionasctime</internalKey>
    <severity>MINOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
    <!-- ########### New in cppcheck 1.67 ########### -->
  <rule>
    <key>deadpointer</key>
    <name>Dead pointer usage</name>
    <description>
      <![CDATA[
      <p>
Dead pointer usage. Pointer 'pointer' is dead if it has been assigned
'&amp;x'.
</p>
<h2>References</h2>
<p><a href="https://cwe.mitre.org/data/definitions/825.html" target="_blank">CWE-825: Expired Pointer Dereference</a></p>
]]>
    </description>
    <tag>cwe</tag>
    <internalKey>deadpointer</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>ignoredReturnValue</key>
    <name>Return value not used</name>
    <description>
      <![CDATA[
      <p>
Return value of function f() is not used.
</p>
<h2>References</h2>
<p><a href="https://cwe.mitre.org/data/definitions/252.html" target="_blank">CWE-252: Unchecked Return Value</a></p>
]]>
</description>
    <tag>cert</tag>
    <tag>cwe</tag>
    <internalKey>ignoredReturnValue</internalKey>
    <severity>MINOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>integerOverflow</key>
    <name>Signed integer overflow for expression</name>
    <description>
      <![CDATA[
      <p>
Signed integer overflow for expression.
</p>
<h2>References</h2>
<p><a href="https://cwe.mitre.org/data/definitions/190.html" target="_blank">CWE-190: Integer Overflow or Wraparound</a></p>
    ]]>
    </description>
    <tag>cwe</tag>
    <tag>bug</tag>
    <internalKey>integerOverflow</internalKey>
    <severity>MAJOR</severity>
    <type>BUG</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>invalidscanf_libc</key>
    <name>scanf without field width limits can crash</name>
    <description>
      scanf without field width limits can crash with huge input data on some versions of libc.
    </description>
    <internalKey>invalidscanf_libc</internalKey>
    <severity>MINOR</severity>
    <type>VULNERABILITY</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>memsetClassFloat</key>
    <name>Using memset() on class which contains a floating point number</name>
    <description>
      <![CDATA[
      <p>
Using memset() on class which contains a floating point number. This
is not portable because memset() sets each byte of a block of memory
to a specific value and the actual representation of a floating-point
value is implementation defined. Note: In case of an IEEE754-1985
compatible implementation setting all bits to zero results in the
value 0.0.
</p>
<h2>References</h2>
<p><a href="https://cwe.mitre.org/data/definitions/758.html" target="_blank">CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior</a></p>
    ]]>
    </description>
    <tag>cwe</tag>
    <internalKey>memsetClassFloat</internalKey>
    <severity>MINOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>memsetClassReference</key>
    <name>Using memory function on class that contains a reference</name>
    <description>
      <![CDATA[
      <p>
Using 'memfunc' on class that contains a reference.
</p>
<h2>References</h2>
<p><a href="https://cwe.mitre.org/data/definitions/665.html" target="_blank">CWE-665: Improper Initialization</a></p>
    ]]>
    </description>
    <tag>cwe</tag>
    <internalKey>memsetClassReference</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>selfInitialization</key>
    <name>Member variable is initialized by itself</name>
    <description>
      <![CDATA[
      <p>
Member variable 'var' is initialized by itself.
</p>
<h2>References</h2>
<p><a href="https://cwe.mitre.org/data/definitions/665.html" target="_blank">CWE-665: Improper Initialization</a></p>
    ]]>
    </description>
    <tag>cwe</tag>
    <tag>bug</tag>
    <internalKey>selfInitialization</internalKey>
    <severity>MAJOR</severity>
    <type>BUG</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>shiftTooManyBits</key>
    <name>Shifting 32-bit value by 40 bits is undefined behaviour</name>
    <description>
<![CDATA[<p>
Shifting 32-bit value by 40 bits is undefined behaviour.
</p><h2>References</h2>
<p><a href="https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=4385" target="_blank">INT34-C. Do not shift an expression by a negative number of bits or by greater than or equal to the number of bits that exist in the operand</a></p>
<p><a href="https://cwe.mitre.org/data/definitions/758.html" target="_blank">CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior</a></p>
]]>
    </description>
    <tag>bug</tag>
    <tag>cert</tag>
    <tag>cwe</tag>
    <internalKey>shiftTooManyBits</internalKey>
    <severity>MAJOR</severity>
    <type>BUG</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
    <rule>
    <key>shiftTooManyBitsSigned</key>
    <name>Shifting signed 32-bit value by 31 bits is undefined behaviour</name>
    <description>
<![CDATA[<p>
Shifting signed 32-bit value by 31 bits is undefined behaviour.
</p><h2>References</h2>
<p><a href="https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=4385" target="_blank">INT34-C. Do not shift an expression by a negative number of bits or by greater than or equal to the number of bits that exist in the operand</a></p>
<p><a href="https://cwe.mitre.org/data/definitions/758.html" target="_blank">CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior</a></p>
]]>
    </description>
    <tag>bug</tag>
    <tag>cert</tag>
    <tag>cwe</tag>
    <internalKey>shiftTooManyBitsSigned</internalKey>
    <severity>CRITICAL</severity>
    <type>BUG</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>signConversion</key>
    <name>Suspicious sign conversion of var in calculation</name>
    <description>
      <![CDATA[
      <p>
Suspicious code: sign conversion of var in calculation, even though
var can have a negative value
</p>
<h2>References</h2>
<p><a href="https://cwe.mitre.org/data/definitions/195.html" target="_blank">CWE-195: Signed to Unsigned Conversion Error</a></p>
]]>
    </description>
    <tag>cwe</tag>
    <internalKey>signConversion</internalKey>
    <severity>MINOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>sizeofDivisionMemfunc</key>
    <name>Suspicious calculation of memset() bytes size</name>
    <description>
      <![CDATA[
      <p>
Division by result of sizeof(). memset() expects a size in bytes, did
you intend to multiply instead?
</p>
<h2>References</h2>
<p><a href="https://cwe.mitre.org/data/definitions/682.html" target="_blank">CWE-682: Incorrect Calculation</a></p>
]]>
    </description>
    <tag>cwe</tag>
    <internalKey>sizeofDivisionMemfunc</internalKey>
    <severity>MINOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>unpreciseMathCall</key>
    <name>Avoid loss of precision for expression</name>
    <description>
      <![CDATA[
      <p>
Expression '1 - erf(x)' can be replaced by 'erfc(x)' to avoid loss of
precision.
</p>
<h2>References</h2>
<p><a href="https://cwe.mitre.org/data/definitions/758.html" target="_blank">CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior</a></p>
]]>
    </description>
    <tag>cwe</tag>
    <internalKey>unpreciseMathCall</internalKey>
    <severity>MINOR</severity>
    <type>BUG</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>uselessAssignmentArg</key>
    <name>Assignment of function parameter has no effect outside the function</name>
    <description>
<![CDATA[
<p>
Assignment of function parameter has no effect outside the function.
</p>
<h2>References</h2>
<p><a href="https://cwe.mitre.org/data/definitions/398.html" target="_blank">CWE-398: Indicator of Poor Code Quality</a></p>
]]>
    </description>
    <tag>cwe</tag>
    <tag>bug</tag>
    <internalKey>uselessAssignmentArg</internalKey>
    <severity>MINOR</severity>
    <type>BUG</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>va_end_missing</key>
    <name>va_list not closed by va_end()</name>
    <description>
<![CDATA[
<p>
va_list 'vl' was opened but not closed by va_end().
</p>
<h2>References</h2>
<p><a href="https://cwe.mitre.org/data/definitions/664.html" target="_blank">CWE-664: Improper Control of a Resource Through its Lifetime</a></p>
]]>
    </description>
    <tag>cwe</tag>
    <tag>bug</tag>
    <internalKey>va_end_missing</internalKey>
    <severity>MAJOR</severity>
    <type>BUG</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>va_list_usedBeforeStarted</key>
    <name>va_list 'vl' used before va_start() was called</name>
    <description>
<![CDATA[
<p>
va_list 'vl' used before va_start() was called.
</p>
<h2>References</h2>
<p><a href="https://cwe.mitre.org/data/definitions/664.html" target="_blank">CWE-664: Improper Control of a Resource Through its Lifetime</a></p>
]]>
    </description>
    <tag>cwe</tag>
    <internalKey>va_list_usedBeforeStarted</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>va_start_referencePassed</key>
    <name>Using reference as parameter for va_start() is undefined behaviour</name>
    <description>
      <![CDATA[
      <p>
Using reference 'arg1' as parameter for va_start() results in
undefined behaviour.
</p>
<h2>References</h2>
<p><a href="https://cwe.mitre.org/data/definitions/758.html" target="_blank">CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior</a></p>
]]>
    </description>
    <tag>cwe</tag>
    <tag>bug</tag>
    <internalKey>va_start_referencePassed</internalKey>
    <severity>MAJOR</severity>
    <type>BUG</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>va_start_subsequentCalls</key>
    <name>va_start() or va_copy() called without va_end() inbetween</name>
    <description>
      <![CDATA[
      <p>
va_start() or va_copy() called subsequently on 'vl' without va_end()
in between.
</p>
<h2>References</h2>
<p><a href="https://cwe.mitre.org/data/definitions/664.html" target="_blank">CWE-664: Improper Control of a Resource Through its Lifetime</a></p>
]]>
    </description>
    <tag>cwe</tag>
    <tag>bug</tag>
    <internalKey>va_start_subsequentCalls</internalKey>
    <severity>MAJOR</severity>
    <type>BUG</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>va_start_wrongParameter</key>
    <name>Given argument to va_start() is not last one</name>
    <description>
      <![CDATA[
      <p>
'arg1' given to va_start() is not last named argument of the function.
Did you intend to pass 'arg2'?
</p>
<h2>References</h2>
<p><a href="https://cwe.mitre.org/data/definitions/688.html" target="_blank">CWE-688: Function Call With Incorrect Variable or Reference as Argument</a></p>
]]>
    </description>
    <tag>cwe</tag>
    <internalKey>va_start_wrongParameter</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>unmatchedSuppression</key>
    <name>Unmatched suppression</name>
    <description>
      <![CDATA[
<p>cppcheck produces the warning "Unmatched suppression: <code>cppcheck-error-id</code>" if</p>
<ol>
<li>user suppressed <code>cppcheck-error-id</code> by means of command-line arguments or inline suppression, but...</li>
<li>this <code>cppcheck-error-id</code> didn't appear while static code analysis</li>
</ol>
    ]]>
    </description>
    <internalKey>unmatchedSuppression</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
    <!-- ########### New in cppcheck 1.69 Dev ########### -->
  <rule>
    <key>duplicateExpressionTernary</key>
    <name>Same expression in both branches of ternary operator</name>
    <description>
      <![CDATA[
      <p>
Finding the same expression in both branches of ternary operator is
suspicious as the same code is executed regardless of the condition.
</p>
<h2>References</h2>
<p><a href="https://cwe.mitre.org/data/definitions/398.html" target="_blank">CWE-398: 7PK - Code Quality</a></p>
    ]]>
    </description>
    <tag>bug</tag>
    <tag>cwe</tag>
    <internalKey>duplicateExpressionTernary</internalKey>
    <severity>MAJOR</severity>
    <type>BUG</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>noExplicitConstructor</key>
    <name>Class has a constructor with 1 argument that is not explicit</name>
    <description>
      <![CDATA[
      <p>
Class 'classname' has a constructor with 1 argument that is not
explicit. Such constructors should in general be explicit for type
safety reasons. Using the explicit keyword in the constructor means
some mistakes when using the class can be avoided.
</p>
<h2>References</h2>
<p><a href="https://cwe.mitre.org/data/definitions/398.html" target="_blank">CWE-398: 7PK - Code Quality</a></p>
    ]]>
    </description>
    <tag>cwe</tag>
    <internalKey>noExplicitConstructor</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>noExplicitCopyMoveConstructor</key>
    <name>Abstract class has a copy/move constructor that is not explicit</name>
    <description>
      Abstract class &apos;classname&apos; has a copy/move constructor that is not explicit.
    </description>
    <internalKey>noExplicitCopyMoveConstructor</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>operatorEqMissingReturnStatement</key>
    <name>No 'return' statement in non-void function causes undefined behavior</name>
    <description>
      <![CDATA[
      <p>
No <code>return</code> statement in non-void function causes undefined behavior.
</p>
<h2>References</h2>
<p><a href="https://cwe.mitre.org/data/definitions/398.html" target="_blank">CWE-398: Indicator of Poor Code Quality</a></p>
]]>
    </description>
    <tag>cwe</tag>
    <tag>bug</tag>
    <internalKey>operatorEqMissingReturnStatement</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>operatorEqShouldBeLeftUnimplemented</key>
    <name>'operator=' should either return reference to 'this'</name>
    <description>
      <![CDATA[
      <p>
'operator=' should either return reference to 'this' instance or be
declared private and left unimplemented.
</p>
<h2>References</h2>
<p><a href="https://cwe.mitre.org/data/definitions/398.html" target="_blank">CWE-398: Indicator of Poor Code Quality</a></p>
]]>
    </description>
    <tag>cwe</tag>
    <internalKey>operatorEqShouldBeLeftUnimplemented</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>redundantPointerOp</key>
    <name>Redundant pointer operation on varname</name>
    <description>
      <![CDATA[
      <p>
Redundant pointer operation on 'varname' - it's already a pointer.
</p>
<h2>References</h2>
<p><a href="https://cwe.mitre.org/data/definitions/398.html" target="_blank">CWE-398: 7PK - Code Quality</a></p>
    ]]>
    </description>
    <tag>cwe</tag>
    <internalKey>redundantPointerOp</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>throwInNoexceptFunction</key>
    <name>Exception thrown in function declared not to throw exceptions</name>
    <description>
      <![CDATA[
      <p>
Exception thrown in function declared not to throw exceptions.
</p>
<h2>References</h2>
<p><a href="https://cwe.mitre.org/data/definitions/398.html" target="_blank">CWE-398: 7PK - Code Quality</a></p>
    ]]>
    </description>
    <tag>cwe</tag>
    <tag>bug</tag>
    <internalKey>throwInNoexceptFunction</internalKey>
    <severity>MAJOR</severity>
    <type>BUG</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>useAutoPointerMalloc</key>
    <name>Object pointed by an 'auto_ptr' is destroyed using operator 'delete'</name>
    <description>
      <![CDATA[
      <p>
Object pointed by an 'auto_ptr' is destroyed using operator 'delete'.
You should not use 'auto_ptr' for pointers obtained with function
'malloc'. This means that you should only use 'auto_ptr' for pointers
obtained with operator 'new'. This excludes use C library allocation
functions (for example 'malloc'), which must be deallocated by the
appropriate C library function.
</p>
<h2>References</h2>
<p><a href="https://cwe.mitre.org/data/definitions/762.html" target="_blank">CWE-762: Mismatched Memory Management Routines</a></p>
]]>
    </description>
    <tag>cwe</tag>
    <internalKey>useAutoPointerMalloc</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <!-- ########### New in cppcheck 1.70 release ########### -->
  <rule>
    <key>negativeArraySize</key>
    <name>Declaration of array with negative size is undefined behaviour</name>
    <description>
<![CDATA[<p>
Declaration of array with negative size is undefined behaviour
</p><h2>References</h2>
<p><a href="https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=2681" target="_blank">ARR32-C. Ensure size arguments for variable length arrays are in a valid range</a></p>
<p><a href="https://cwe.mitre.org/data/definitions/758.html" target="_blank">CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior</a></p>
]]>
    </description>
    <tag>bug</tag>
    <tag>cert</tag>
    <tag>cwe</tag>
    <internalKey>negativeArraySize</internalKey>
    <severity>MINOR</severity>
    <type>BUG</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>badBitmaskCheck</key>
    <name>Result of operator '|' is always true if one operand is non-zero</name>
    <description>
      <![CDATA[
      <p>
Result of operator '|' is always true if one operand is non-zero. Did
you intend to use '&'?
</p>
<h2>References</h2>
<p><a href="https://cwe.mitre.org/data/definitions/571.html" target="_blank">CWE-571: Expression is Always True</a></p>
]]>
    </description>
    <tag>bug</tag>
    <tag>cwe</tag>
    <internalKey>badBitmaskCheck</internalKey>
    <severity>MINOR</severity>
    <type>BUG</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>knownConditionTrueFalse</key>
    <name>Condition is always true/false</name>
    <description>
<![CDATA[<p>
Condition 'x' is always true/false.
</p><h2>References</h2>
<p><a href="https://cwe.mitre.org/data/definitions/570.html" target="_blank">CWE-570: Expression is Always False</a></p>
<p><a href="https://cwe.mitre.org/data/definitions/571.html" target="_blank">CWE-571: Expression is Always True</a></p>
]]>
    </description>
    <tag>bug</tag>
    <tag>cwe</tag>
    <internalKey>knownConditionTrueFalse</internalKey>
    <severity>MINOR</severity>
    <type>BUG</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>nullPointerDefaultArg</key>
    <name>Possible null pointer dereference if the default parameter value is used: pointer</name>
    <description>
      <![CDATA[
      <p>
Possible null pointer dereference if the default parameter value is
used
</p>
<h2>References</h2>
<p><a href="https://cwe.mitre.org/data/definitions/476.html" target="_blank">CWE-476: NULL Pointer Dereference</a></p>
]]>
    </description>
    <tag>cwe</tag>
    <tag>bug</tag>
    <tag>cert</tag>
    <internalKey>nullPointerDefaultArg</internalKey>
    <severity>MINOR</severity>
    <type>BUG</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>nullPointerRedundantCheck</key>
    <name>Either the condition is redundant or there is possible null pointer dereference: pointer</name>
    <description>
      <![CDATA[
      <p>
Either the condition is redundant or there is possible null pointer
dereference
</p>
<h2>References</h2>
<p><a href="https://cwe.mitre.org/data/definitions/476.html" target="_blank">CWE-476: NULL Pointer Dereference</a></p>
]]>
    </description>
    <tag>bug</tag>
    <tag>cert</tag>
    <tag>cwe</tag>
    <internalKey>nullPointerRedundantCheck</internalKey>
    <severity>MINOR</severity>
    <type>BUG</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>obsoleteFunctionsalloca</key>
    <name>Obsolete function &apos;alloca&apos; called</name>
    <description>
      Obsolete function &apos;alloca&apos; called. In C99 and later it is recommended to use a variable length array instead.
    </description>
    <tag>cwe</tag>
    <internalKey>obsoleteFunctionsalloca</internalKey>
    <severity>MINOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>raceAfterInterlockedDecrement</key>
    <name>Race condition: non-interlocked access after InterlockedDecrement()</name>
    <description>
      <![CDATA[
      <p>
Race condition: non-interlocked access after InterlockedDecrement().
Use InterlockedDecrement() return value instead.
</p>
<h2>References</h2>
<p><a href="https://cwe.mitre.org/data/definitions/362.html" target="_blank">CWE-362: Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')</a></p>
    ]]>
    </description>
    <tag>cwe</tag>
    <internalKey>raceAfterInterlockedDecrement</internalKey>
    <severity>CRITICAL</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>unusedLabel</key>
    <name>Label is not used</name>
    <description>
      <![CDATA[
      <p>
Label is not used.
</p>
<h2>References</h2>
<p><a href="https://cwe.mitre.org/data/definitions/398.html" target="_blank">CWE-398: 7PK - Code Quality</a></p>
    ]]>
    </description>
    <tag>cwe</tag>
    <internalKey>unusedLabel</internalKey>
    <severity>MINOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>stringLiteralWrite</key>
    <name>Modifying string literal directly or indirectly is undefined behaviour</name>
    <description>
      <![CDATA[
      <p>
Modifying string literal directly or indirectly is undefined
behaviour.
</p>
<h2>References</h2>
<p><a href="https://cwe.mitre.org/data/definitions/758.html" target="_blank">CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior</a></p>
]]>
    </description>
    <tag>bug</tag>
    <tag>cwe</tag>
    <internalKey>stringLiteralWrite</internalKey>
    <severity>CRITICAL</severity>
    <type>BUG</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>truncLongCastAssignment</key>
    <name>int result is assigned to long variable (potential truncation)</name>
    <description>
      <![CDATA[
      <p>
int result is assigned to long variable. If the variable is long to
avoid loss of information, then there is loss of information. To avoid
loss of information you must cast a calculation operand to long, for
example 'l = a * b;' => 'l = (long)a * b;'.
</p>
<h2>References</h2>
<p><a href="https://cwe.mitre.org/data/definitions/197.html" target="_blank">CWE-197: Numeric Truncation Error</a></p>
]]>
    </description>
    <tag>cwe</tag>
    <internalKey>truncLongCastAssignment</internalKey>
    <severity>MINOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>truncLongCastReturn</key>
    <name>int result is returned as long value (potential truncation)</name>
    <description>
      <![CDATA[
      <p>
int result is returned as long value. If the return value is long to
avoid loss of information, then there is loss of information. To avoid
loss of information you must cast a calculation operand to long, for
example 'return a*b;' => 'return (long)a*b'.
</p>
<h2>References</h2>
<p><a href="https://cwe.mitre.org/data/definitions/197.html" target="_blank">CWE-197: Numeric Truncation Error</a></p>
]]>
    </description>
    <tag>cwe</tag>
    <internalKey>truncLongCastReturn</internalKey>
    <severity>MINOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <!-- ########### New in cppcheck 1.72 ########### -->
  <rule>
    <key>assignBoolToFloat</key>
    <name>Boolean value assigned to floating point variable</name>
    <description>
<![CDATA[<p>
Boolean value assigned to floating point variable.
</p><h2>References</h2>
<p><a href="https://cwe.mitre.org/data/definitions/704.html" target="_blank">CWE-704: Incorrect Type Conversion or Cast</a></p>
]]>
    </description>
    <tag>cwe</tag>
    <internalKey>assignBoolToFloat</internalKey>
    <severity>MAJOR</severity>
    <type>BUG</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>invalidTestForOverflow</key>
    <name>Invalid test for overflow (undefined behavior)</name>
    <description>
      <![CDATA[
      <p>
Invalid test for overflow 'x + u < x'. Condition is always false
unless there is overflow, and overflow is undefined behaviour.
</p>
<h2>References</h2>
<p><a href="https://cwe.mitre.org/data/definitions/570.html" target="_blank">CWE-570: Expression is Always False</a></p>
]]>
    </description>
    <tag>cwe</tag>
    <internalKey>invalidTestForOverflow</internalKey>
    <severity>MAJOR</severity>
    <type>BUG</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>unknownEvaluationOrder</key>
    <name>Expression depends on order of evaluation (side effects)</name>
    <description>
      <![CDATA[
      <p>
Expression 'x = x++;' depends on order of evaluation of side effects
</p>
<h2>References</h2>
<p><a href="https://cwe.mitre.org/data/definitions/768.html" target="_blank">CWE-768: Incorrect Short Circuit Evaluation</a></p>
]]>
    </description>
    <tag>cwe</tag>
    <internalKey>unknownEvaluationOrder</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <!-- ########### New in cppcheck 1.73 ########### -->
  <rule>
    <key>signedCharArrayIndex</key>
    <name>Signed 'char' type used as array index</name>
    <description>
      <![CDATA[
      <p>
Signed 'char' type used as array index. If the value can be greater
than 127 there will be a buffer underflow because of sign extension.
</p>
<h2>References</h2>
<p><a href="https://cwe.mitre.org/data/definitions/128.html" target="_blank">CWE-128: Wrap-around Error</a></p>
]]>
    </description>
    <tag>cwe</tag>
    <internalKey>signedCharArrayIndex</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>unknownSignCharArrayIndex</key>
    <name>'char' type used as array index</name>
    <description>
      <![CDATA[
      <p>
'char' type used as array index. Values greater that 127 will be
treated depending on whether 'char' is signed or unsigned on target
platform.
</p>
<h2>References</h2>
<p><a href="https://cwe.mitre.org/data/definitions/758.html" target="_blank">CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior</a></p>
]]>
    </description>
    <tag>cwe</tag>
    <internalKey>unknownSignCharArrayIndex</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>unusedLabelSwitch</key>
    <name>Label is not used. </name>
    <description>
      <![CDATA[
      <p>
Label is not used. Should this be a 'case' of the enclosing
switch()?
</p>
<h2>References</h2>
<p><a href="https://cwe.mitre.org/data/definitions/398.html" target="_blank">CWE-398: 7PK - Code Quality</a></p>
    ]]>
    </description>
    <tag>cwe</tag>
    <internalKey>unusedLabelSwitch</internalKey>
    <severity>MINOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <!-- ########### New in cppcheck 1.76 ########### -->
  <!-- this warnings is not reported by "cppcheck -errorlist" -->
  <rule>
    <key>leakUnsafeArgAlloc</key>
    <name>Unsafe allocation. If 'funcName()' throws, memory could be leaked</name>
    <description>
      <![CDATA[
      <p>
Unsafe allocation. If funcName() throws, memory could be leaked. Use
make_shared&lt;T&gt;() / make_unique&lt;T&gt;() instead.
</p>
<h2>References</h2>
<p><a href="https://cwe.mitre.org/data/definitions/401.html" target="_blank">CWE-401: Improper Release of Memory Before Removing Last Reference ('Memory Leak')</a></p>
    ]]>
    </description>
    <tag>cwe</tag>
    <internalKey>leakUnsafeArgAlloc</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>suspiciousCase</key>
    <name>Found suspicious case label in switch()</name>
    <description>
      <![CDATA[
      <p>
Using an operator like '||' in a case label is suspicious. Did you
intend to use a bitwise operator, multiple case labels or if/else
instead?
</p>
<h2>References</h2>
<p><a href="https://cwe.mitre.org/data/definitions/398.html" target="_blank">CWE-398: 7PK - Code Quality</a></p>
    ]]>
    </description>
    <tag>cwe</tag>
    <internalKey>suspiciousCase</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>suspiciousEqualityComparison</key>
    <name>Found suspicious equality comparison</name>
    <description>
      <![CDATA[
      <p>
Found suspicious equality comparison. Did you intend to assign a value
instead?
</p>
<h2>References</h2>
<p><a href="https://cwe.mitre.org/data/definitions/482.html" target="_blank">CWE-482: Comparing instead of Assigning</a></p>
]]>
    </description>
    <tag>cwe</tag>
    <internalKey>suspiciousEqualityComparison</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>multiplySizeof</key>
    <name>Multiplying sizeof() with sizeof()</name>
    <description>
<![CDATA[<p>
Multiplying sizeof() with sizeof() indicates a logic error.
</p><h2>References</h2>
<p><a href="https://cwe.mitre.org/data/definitions/682.html" target="_blank">CWE-682: Incorrect Calculation</a></p>
]]>
    </description>
    <tag>cwe</tag>
    <internalKey>multiplySizeof</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>divideSizeof</key>
    <name>Division of result of sizeof() on pointer type</name>
    <description>
      <![CDATA[
      <p>
Division of result of sizeof() on pointer type. sizeof() returns the
size of the pointer, not the size of the memory area it points to.
</p>
<h2>References</h2>
<p><a href="https://cwe.mitre.org/data/definitions/682.html" target="_blank">CWE-682: Incorrect Calculation</a></p>
]]>
    </description>
    <tag>cwe</tag>
    <internalKey>divideSizeof</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>reademptycontainer</key>
    <name>Reading from empty STL container</name>
    <description>
<![CDATA[<p>
Reading from empty STL container.
</p><h2>References</h2>
<p><a href="https://cwe.mitre.org/data/definitions/398.html" target="_blank">CWE-398: Indicator of Poor Code Quality</a></p>
]]>
    </description>
    <tag>cwe</tag>
    <internalKey>reademptycontainer</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <!-- ########### New in cppcheck 1.77 ########### -->
  <rule>
    <key>nullPointerArithmetic</key>
    <name>Pointer arithmetic with NULL pointer</name>
    <description>
      <![CDATA[
      <p>
Pointer arithmetic with NULL pointer.
</p>
<h2>References</h2>
<p><a href="https://cwe.mitre.org/data/definitions/682.html" target="_blank">CWE-682: Incorrect Calculation</a></p>
]]>
    </description>
    <tag>cwe</tag>
    <tag>bug</tag>
    <internalKey>nullPointerArithmetic</internalKey>
    <severity>MAJOR</severity>
    <type>BUG</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>shiftNegativeLHS</key>
    <name>Shifting a negative value is technically undefined behaviour</name>
    <description>
      <![CDATA[
      <p>
Shifting a negative value is technically undefined behaviour
</p>
<h2>References</h2>
<p><a href="https://cwe.mitre.org/data/definitions/758.html" target="_blank">CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior</a></p>
]]>
    </description>
    <tag>cwe</tag>
    <internalKey>shiftNegativeLHS</internalKey>
    <severity>MAJOR</severity>
    <type>BUG</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>accessMoved</key>
    <name>Access of moved variable 'name'</name>
    <description>
      <![CDATA[
      <p>
Access of moved variable 'name'.
</p>
<h2>References</h2>
<p><a href="https://cwe.mitre.org/data/definitions/672.html" target="_blank">CWE-672: Operation on a Resource after Expiration or Release</a></p>
]]>
    </description>
    <tag>cwe</tag>
    <internalKey>accessMoved</internalKey>
    <severity>MINOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>accessForwarded</key>
    <name>Access of forwarded variable 'name'</name>
    <description>
<![CDATA[<p>
Access of forwarded variable 'name'.
</p><h2>References</h2>
<p><a href="https://cwe.mitre.org/data/definitions/672.html" target="_blank">CWE-672: Operation on a Resource after Expiration or Release</a></p>
]]>
    </description>
    <tag>cwe</tag>
    <internalKey>accessForwarded</internalKey>
    <severity>MINOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>floatConversionOverflow</key>
    <name>Undefined behaviour: float (1e+100) to integer conversion overflow</name>
    <description>
<![CDATA[<p>
Undefined behaviour: float (1e+100) to integer conversion overflow.
</p><h2>References</h2>
<p><a href="https://cwe.mitre.org/data/definitions/190.html" target="_blank">CWE-190: Integer Overflow or Wraparound</a></p>
]]>
    </description>
    <tag>cwe</tag>
    <internalKey>floatConversionOverflow</internalKey>
    <severity>MAJOR</severity>
    <type>BUG</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <!-- ########### New in cppcheck 1.78 ########### -->
  <rule>
    <key>funcArgNamesDifferent</key>
    <name>Different argument name in function declaration and definition</name>
    <description>
      <![CDATA[
      <p>
Different argument name in function declaration and function definition.
</p>
<h2>References</h2>
<p><a href="https://cwe.mitre.org/data/definitions/628.html" target="_blank">CWE-628: Function Call with Incorrectly Specified Arguments</a></p>
]]>
    </description>
    <tag>cwe</tag>
    <internalKey>funcArgNamesDifferent</internalKey>
    <severity>MINOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>funcArgOrderDifferent</key>
    <name>Different argument order in function declaration and definition</name>
    <description>
      <![CDATA[
      <p>
Different argument order in function declaration and definition
</p>
<h2>References</h2>
<p><a href="https://cwe.mitre.org/data/definitions/683.html" target="_blank">CWE-683: Function Call With Incorrect Order of Arguments</a></p>
]]>
    </description>
    <tag>cwe</tag>
    <tag>bug</tag>
    <internalKey>funcArgOrderDifferent</internalKey>
    <severity>MAJOR</severity>
    <type>BUG</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>copyCtorAndEqOperator</key>
    <name>The class 'class' has 'operator=' but lack of 'copy constructor'</name>
    <description>
      <![CDATA[
      The class 'class' has 'operator=' but lack of 'copy constructor'.
    ]]>
    </description>
    <internalKey>copyCtorAndEqOperator</internalKey>
    <severity>MINOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <!-- ########### New in cppcheck 1.82 ########### -->
  <rule>
    <key>unsafeClassDivZero</key>
    <name>Public interface of Class is not safe</name>
    <description>
      <![CDATA[
      Public interface of Class is not safe. When calling Class::dostuff(), if parameter x is 0 that leads to division by zero.
    ]]>
    </description>
    <internalKey>unsafeClassDivZero</internalKey>
    <severity>MINOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>pointerAdditionResultNotNull</key>
    <name>Comparison is wrong. Result of can be 0</name>
    <description>
      <![CDATA[
      Comparison is wrong. Result of 'ptr+1' can't be 0 unless there is pointer overflow, and pointer overflow is undefined behaviour.
    ]]>
    </description>
    <internalKey>pointerAdditionResultNotNull</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>overlappingStrcmp</key>
    <name>Multiple suspicious overlapping strcmp</name>
    <description>
<![CDATA[<p>
The expression 'strcmp(x,"def") != 0' is suspicious. It overlaps 'strcmp(x,"abc") == 0'.
</p>
]]>
    </description>
    <internalKey>overlappingStrcmp</internalKey>
    <severity>MINOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>1min</remediationFunctionGapMultiplier>
  </rule>
  <!-- ########### keys matching the schema <some-function-id>Called are not listed by the simple cppcheck -errorlist          ########### -->
  <!-- ########### they become visible only if corresponding library was loaded, e.g. cppcheck -errorlist -library=posix.cfg   ########### -->
  <!-- ########### see generate_cppcheck_resources.sh for more details                                                         ########### -->
  <rule>
    <key>LocalAllocCalled</key>
    <name>Obsolete function 'LocalAlloc' called. It is recommended to use 'HeapAlloc' instead</name>
    <description>
      <![CDATA[
      <p>
Obsolete function 'LocalAlloc' called. It is recommended to use
'HeapAlloc' instead.
</p>
<h2>References</h2>
<p><a href="https://cwe.mitre.org/data/definitions/477.html" target="_blank">CWE-477: Use of Obsolete Function</a></p>
    ]]>
    </description>
    <tag>cwe</tag>
    <internalKey>LocalAllocCalled</internalKey>
    <severity>MINOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>RtlFillBytesCalled</key>
    <name>Obsolete function 'RtlFillBytes' called. It is recommended to use 'RtlFillMemory' instead</name>
    <description>
      <![CDATA[
      <p>
Obsolete function 'RtlFillBytes' called. It is recommended to use
'RtlFillMemory' instead.
</p>
<h2>References</h2>
<p><a href="https://cwe.mitre.org/data/definitions/477.html" target="_blank">CWE-477: Use of Obsolete Function</a></p>
    ]]>
    </description>
    <tag>cwe</tag>
    <internalKey>RtlFillBytesCalled</internalKey>
    <severity>MINOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>RtlZeroBytesCalled</key>
    <name>Obsolete function 'RtlZeroBytes' called. It is recommended to use 'RtlZeroMemory' instead</name>
    <description>
      <![CDATA[
      <p>
Obsolete function 'RtlZeroBytes' called. It is recommended to use
'RtlZeroMemory' instead.
</p>
<h2>References</h2>
<p><a href="https://cwe.mitre.org/data/definitions/477.html" target="_blank">CWE-477: Use of Obsolete Function</a></p>
    ]]>
    </description>
    <tag>cwe</tag>
    <internalKey>RtlZeroBytesCalled</internalKey>
    <severity>MINOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>asctime_rCalled</key>
    <name>Obsolescent function 'asctime_r' called. It is recommended to use 'strftime' instead</name>
    <description>
      <![CDATA[
      <p>
Obsolescent function 'asctime_r' called. It is recommended to use
'strftime' instead.
</p>
<h2>References</h2>
<p><a href="https://cwe.mitre.org/data/definitions/477.html" target="_blank">CWE-477: Use of Obsolete Function</a></p>
    ]]>
    </description>
    <tag>cwe</tag>
    <internalKey>asctime_rCalled</internalKey>
    <severity>MINOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>autoVariablesAssignGlobalPointer</key>
    <name>Address of local array array is assigned to global pointer pointer and not reassigned before array goes out of scope</name>
    <description>
      <![CDATA[
      <p>
Address of local array array is assigned to global pointer pointer and
not reassigned before array goes out of scope.
</p>
<h2>References</h2>
<p><a href="https://cwe.mitre.org/data/definitions/562.html" target="_blank">CWE-562: Return of Stack Variable Address</a></p>
    ]]>
    </description>
    <tag>cwe</tag>
    <tag>bug</tag>
    <internalKey>autoVariablesAssignGlobalPointer</internalKey>
    <severity>MINOR</severity>
    <type>BUG</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>bcmpCalled</key>
    <name>Obsolescent function 'bcmp' called. It is recommended to use 'memcmp' instead</name>
    <description>
      <![CDATA[
      <p>
Obsolescent function 'bcmp' called. It is recommended to use 'memcmp'
instead.
</p>
<h2>References</h2>
<p><a href="https://cwe.mitre.org/data/definitions/477.html" target="_blank">CWE-477: Use of Obsolete Function</a></p>
    ]]>
    </description>
    <tag>cwe</tag>
    <internalKey>bcmpCalled</internalKey>
    <severity>MINOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>bcopyCalled</key>
    <name>Obsolescent function 'bcopy' called. It is recommended to use 'memcpy' or 'memmove' instead</name>
    <description>
      <![CDATA[
      <p>
Obsolescent function 'bcopy' called. It is recommended to use 'memcpy'
or 'memmove' instead.
</p>
<h2>References</h2>
<p><a href="https://cwe.mitre.org/data/definitions/477.html" target="_blank">CWE-477: Use of Obsolete Function</a></p>
    ]]>
    </description>
    <tag>cwe</tag>
    <internalKey>bcopyCalled</internalKey>
    <severity>MINOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>bsd_signalCalled</key>
    <name>Obsolescent function 'bsd_signal' called. It is recommended to use 'sigaction' instead</name>
    <description>
      <![CDATA[
      <p>
Obsolescent function 'bsd_signal' called. It is recommended to use
'sigaction' instead.
</p>
<h2>References</h2>
<p><a href="https://cwe.mitre.org/data/definitions/477.html" target="_blank">CWE-477: Use of Obsolete Function</a></p>
    ]]>
    </description>
    <tag>cwe</tag>
    <internalKey>bsd_signalCalled</internalKey>
    <severity>MINOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>bzeroCalled</key>
    <name>Obsolescent function 'bzero' called. It is recommended to use 'memset' instead</name>
    <description>
      <![CDATA[
      <p>
Obsolescent function 'bzero' called. It is recommended to use 'memset'
instead.
</p>
<h2>References</h2>
<p><a href="https://cwe.mitre.org/data/definitions/477.html" target="_blank">CWE-477: Use of Obsolete Function</a></p>
    ]]>
    </description>
    <tag>cwe</tag>
    <internalKey>bzeroCalled</internalKey>
    <severity>MINOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>cryptCalled</key>
    <name>Non reentrant function 'crypt' called. For threadsafe applications it is recommended to use the reentrant replacement function 'crypt_r'</name>
    <description>
      <![CDATA[
      <p>
Non reentrant function 'crypt' called. For threadsafe applications it
is recommended to use the reentrant replacement function 'crypt_r'.
</p>
<h2>References</h2>
<p><a href="https://cwe.mitre.org/data/definitions/477.html" target="_blank">CWE-477: Use of Obsolete Function</a></p>
    ]]>
    </description>
    <tag>cwe</tag>
    <internalKey>cryptCalled</internalKey>
    <severity>MINOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>ctermidCalled</key>
    <name>Non reentrant function 'ctermid' called. For threadsafe applications it is recommended to use the reentrant replacement function 'ctermid_r'</name>
    <description>
      <![CDATA[
      <p>
Non reentrant function 'ctermid' called. For threadsafe applications
it is recommended to use the reentrant replacement function
'ctermid_r'.
</p>
<h2>References</h2>
<p><a href="https://cwe.mitre.org/data/definitions/477.html" target="_blank">CWE-477: Use of Obsolete Function</a></p>
    ]]>
    </description>
    <tag>cwe</tag>
    <internalKey>ctermidCalled</internalKey>
    <severity>MINOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>ctime_rCalled</key>
    <name>Obsolescent function 'ctime_r' called. It is recommended to use 'strftime' instead</name>
    <description>
      <![CDATA[
      <p>
Obsolescent function 'ctime_r' called. It is recommended to use
'strftime' instead.
</p>
<h2>References</h2>
<p><a href="https://cwe.mitre.org/data/definitions/477.html" target="_blank">CWE-477: Use of Obsolete Function</a></p>
    ]]>
    </description>
    <tag>cwe</tag>
    <internalKey>ctime_rCalled</internalKey>
    <severity>MINOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>ecvtCalled</key>
    <name>Obsolescent function 'ecvt' called. It is recommended to use 'sprintf' instead</name>
    <description>
      <![CDATA[
      <p>
Obsolescent function 'ecvt' called. It is recommended to use 'sprintf'
instead.
</p>
<h2>References</h2>
<p><a href="https://cwe.mitre.org/data/definitions/477.html" target="_blank">CWE-477: Use of Obsolete Function</a></p>
    ]]>
    </description>
    <tag>cwe</tag>
    <internalKey>ecvtCalled</internalKey>
    <severity>MINOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>fcvtCalled</key>
    <name>Obsolescent function 'fcvt' called. It is recommended to use 'sprintf' instead</name>
    <description>
      <![CDATA[
      <p>
Obsolescent function 'fcvt' called. It is recommended to use 'sprintf'
instead.
</p>
<h2>References</h2>
<p><a href="https://cwe.mitre.org/data/definitions/477.html" target="_blank">CWE-477: Use of Obsolete Function</a></p>
    ]]>
    </description>
    <tag>cwe</tag>
    <internalKey>fcvtCalled</internalKey>
    <severity>MINOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>fgetgrentCalled</key>
    <name>Non reentrant function 'fgetgrent' called. For threadsafe applications it is recommended to use the reentrant replacement function 'fgetgrent_r'</name>
    <description>
      <![CDATA[
      <p>
Non reentrant function 'fgetgrent' called. For threadsafe applications
it is recommended to use the reentrant replacement function
'fgetgrent_r'.
</p>
<h2>References</h2>
<p><a href="https://cwe.mitre.org/data/definitions/477.html" target="_blank">CWE-477: Use of Obsolete Function</a></p>
    ]]>
    </description>
    <tag>cwe</tag>
    <internalKey>fgetgrentCalled</internalKey>
    <severity>MINOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>fgetpwentCalled</key>
    <name>Non reentrant function 'fgetpwent' called. For threadsafe applications it is recommended to use the reentrant replacement function 'fgetpwent_r'</name>
    <description>
      <![CDATA[
      <p>
Non reentrant function 'fgetpwent' called. For threadsafe applications
it is recommended to use the reentrant replacement function
'fgetpwent_r'.
</p>
<h2>References</h2>
<p><a href="https://cwe.mitre.org/data/definitions/477.html" target="_blank">CWE-477: Use of Obsolete Function</a></p>
    ]]>
    </description>
    <tag>cwe</tag>
    <internalKey>fgetpwentCalled</internalKey>
    <severity>MINOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>fgetspentCalled</key>
    <name>Non reentrant function 'fgetspent' called. For threadsafe applications it is recommended to use the reentrant replacement function 'fgetspent_r'</name>
    <description>
      <![CDATA[
      <p>
Non reentrant function 'fgetspent' called. For threadsafe applications
it is recommended to use the reentrant replacement function
'fgetspent_r'.
</p>
<h2>References</h2>
<p><a href="https://cwe.mitre.org/data/definitions/477.html" target="_blank">CWE-477: Use of Obsolete Function</a></p>
    ]]>
    </description>
    <tag>cwe</tag>
    <internalKey>fgetspentCalled</internalKey>
    <severity>MINOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>gcvtCalled</key>
    <name>Obsolescent function 'gcvt' called. It is recommended to use 'sprintf' instead</name>
    <description>
      <![CDATA[
      <p>
Obsolescent function 'gcvt' called. It is recommended to use 'sprintf'
instead.
</p>
<h2>References</h2>
<p><a href="https://cwe.mitre.org/data/definitions/477.html" target="_blank">CWE-477: Use of Obsolete Function</a></p>
    ]]>
    </description>
    <tag>cwe</tag>
    <internalKey>gcvtCalled</internalKey>
    <severity>MINOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>getcontextCalled</key>
    <name>Obsolescent function 'getcontext' called. Applications are recommended to be rewritten to use POSIX threads</name>
    <description>
      <![CDATA[
      <p>
Obsolescent function 'getcontext' called. Applications are recommended
to be rewritten to use POSIX threads.
</p>
<h2>References</h2>
<p><a href="https://cwe.mitre.org/data/definitions/477.html" target="_blank">CWE-477: Use of Obsolete Function</a></p>
    ]]>
    </description>
    <tag>cwe</tag>
    <internalKey>getcontextCalled</internalKey>
    <severity>MINOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>getgrentCalled</key>
    <name>Non reentrant function 'getgrent' called. For threadsafe applications it is recommended to use the reentrant replacement function 'getgrent_r'</name>
    <description>
      <![CDATA[
      <p>
Non reentrant function 'getgrent' called. For threadsafe applications
it is recommended to use the reentrant replacement function
'getgrent_r'.
</p>
<h2>References</h2>
<p><a href="https://cwe.mitre.org/data/definitions/477.html" target="_blank">CWE-477: Use of Obsolete Function</a></p>
    ]]>
    </description>
    <tag>cwe</tag>
    <internalKey>getgrentCalled</internalKey>
    <severity>MINOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>getgrgidCalled</key>
    <name>Non reentrant function 'getgrgid' called. For threadsafe applications it is recommended to use the reentrant replacement function 'getgrgid_r'</name>
    <description>
      <![CDATA[
      <p>
Non reentrant function 'getgrgid' called. For threadsafe applications
it is recommended to use the reentrant replacement function
'getgrgid_r'.
</p>
<h2>References</h2>
<p><a href="https://cwe.mitre.org/data/definitions/477.html" target="_blank">CWE-477: Use of Obsolete Function</a></p>
    ]]>
    </description>
    <tag>cwe</tag>
    <internalKey>getgrgidCalled</internalKey>
    <severity>MINOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>getgrnamCalled</key>
    <name>Non reentrant function 'getgrnam' called. For threadsafe applications it is recommended to use the reentrant replacement function 'getgrnam_r'</name>
    <description>
      <![CDATA[
      <p>
Non reentrant function 'getgrnam' called. For threadsafe applications
it is recommended to use the reentrant replacement function
'getgrnam_r'.
</p>
<h2>References</h2>
<p><a href="https://cwe.mitre.org/data/definitions/477.html" target="_blank">CWE-477: Use of Obsolete Function</a></p>
    ]]>
    </description>
    <tag>cwe</tag>
    <internalKey>getgrnamCalled</internalKey>
    <severity>MINOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>gethostbyaddrCalled</key>
    <name>Obsolescent function 'gethostbyaddr' called. It is recommended to use 'getnameinfo' instead</name>
    <description>
      <![CDATA[
      <p>
Obsolescent function 'gethostbyaddr' called. It is recommended to use
'getnameinfo' instead.
</p>
<h2>References</h2>
<p><a href="https://cwe.mitre.org/data/definitions/477.html" target="_blank">CWE-477: Use of Obsolete Function</a></p>
    ]]>
    </description>
    <tag>cwe</tag>
    <internalKey>gethostbyaddrCalled</internalKey>
    <severity>MINOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>gethostbyname2Called</key>
    <name>Non reentrant function 'gethostbyname2' called. For threadsafe applications it is recommended to use the reentrant replacement function 'gethostbyname2_r'</name>
    <description>
      <![CDATA[
      <p>
Non reentrant function 'gethostbyname2' called. For threadsafe
applications it is recommended to use the reentrant replacement
function 'gethostbyname2_r'.
</p>
<h2>References</h2>
<p><a href="https://cwe.mitre.org/data/definitions/477.html" target="_blank">CWE-477: Use of Obsolete Function</a></p>
    ]]>
    </description>
    <tag>cwe</tag>
    <internalKey>gethostbyname2Called</internalKey>
    <severity>MINOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>gethostentCalled</key>
    <name>Non reentrant function 'gethostent' called. For threadsafe applications it is recommended to use the reentrant replacement function 'gethostent_r'</name>
    <description>
      <![CDATA[
      <p>
Non reentrant function 'gethostent' called. For threadsafe
applications it is recommended to use the reentrant replacement
function 'gethostent_r'.
</p>
<h2>References</h2>
<p><a href="https://cwe.mitre.org/data/definitions/477.html" target="_blank">CWE-477: Use of Obsolete Function</a></p>
    ]]>
    </description>
    <tag>cwe</tag>
    <internalKey>gethostentCalled</internalKey>
    <severity>MINOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>getloginCalled</key>
    <name>Non reentrant function 'getlogin' called. For threadsafe applications it is recommended to use the reentrant replacement function 'getlogin_r'</name>
    <description>
      <![CDATA[
      <p>
Non reentrant function 'getlogin' called. For threadsafe applications
it is recommended to use the reentrant replacement function
'getlogin_r'.
</p>
<h2>References</h2>
<p><a href="https://cwe.mitre.org/data/definitions/477.html" target="_blank">CWE-477: Use of Obsolete Function</a></p>
    ]]>
    </description>
    <tag>cwe</tag>
    <internalKey>getloginCalled</internalKey>
    <severity>MINOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>getnetbyaddrCalled</key>
    <name>Non reentrant function 'getnetbyaddr' called. For threadsafe applications it is recommended to use the reentrant replacement function 'getnetbyaddr_r'</name>
    <description>
      <![CDATA[
      <p>
Non reentrant function 'getnetbyaddr' called. For threadsafe
applications it is recommended to use the reentrant replacement
function 'getnetbyaddr_r'.
</p>
<h2>References</h2>
<p><a href="https://cwe.mitre.org/data/definitions/477.html" target="_blank">CWE-477: Use of Obsolete Function</a></p>
    ]]>
    </description>
    <tag>cwe</tag>
    <internalKey>getnetbyaddrCalled</internalKey>
    <severity>MINOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>getnetbynameCalled</key>
    <name>Non reentrant function 'getnetbyname' called. For threadsafe applications it is recommended to use the reentrant replacement function 'getnetbyname_r'</name>
    <description>
      <![CDATA[
      <p>
Non reentrant function 'getnetbyname' called. For threadsafe
applications it is recommended to use the reentrant replacement
function 'getnetbyname_r'.
</p>
<h2>References</h2>
<p><a href="https://cwe.mitre.org/data/definitions/477.html" target="_blank">CWE-477: Use of Obsolete Function</a></p>
    ]]>
    </description>
    <tag>cwe</tag>
    <internalKey>getnetbynameCalled</internalKey>
    <severity>MINOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>getnetentCalled</key>
    <name>Non reentrant function 'getnetent' called. For threadsafe applications it is recommended to use the reentrant replacement function 'getnetent_r'</name>
    <description>
      <![CDATA[
      <p>
Non reentrant function 'getnetent' called. For threadsafe applications
it is recommended to use the reentrant replacement function
'getnetent_r'.
</p>
<h2>References</h2>
<p><a href="https://cwe.mitre.org/data/definitions/477.html" target="_blank">CWE-477: Use of Obsolete Function</a></p>
    ]]>
    </description>
    <tag>cwe</tag>
    <internalKey>getnetentCalled</internalKey>
    <severity>MINOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>getnetgrentCalled</key>
    <name>Non reentrant function 'getnetgrent' called. For threadsafe applications it is recommended to use the reentrant replacement function 'getnetgrent_r'</name>
    <description>
      <![CDATA[
      <p>
Non reentrant function 'getnetgrent' called. For threadsafe
applications it is recommended to use the reentrant replacement
function 'getnetgrent_r'.
</p>
<h2>References</h2>
<p><a href="https://cwe.mitre.org/data/definitions/477.html" target="_blank">CWE-477: Use of Obsolete Function</a></p>
    ]]>
    </description>
    <tag>cwe</tag>
    <internalKey>getnetgrentCalled</internalKey>
    <severity>MINOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>getprotobynameCalled</key>
    <name>Non reentrant function 'getprotobyname' called. For threadsafe applications it is recommended to use the reentrant replacement function 'getprotobyname_r'</name>
    <description>
      <![CDATA[
      <p>
Non reentrant function 'getprotobyname' called. For threadsafe
applications it is recommended to use the reentrant replacement
function 'getprotobyname_r'.
</p>
<h2>References</h2>
<p><a href="https://cwe.mitre.org/data/definitions/477.html" target="_blank">CWE-477: Use of Obsolete Function</a></p>
    ]]>
    </description>
    <tag>cwe</tag>
    <internalKey>getprotobynameCalled</internalKey>
    <severity>MINOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>getprotobynumberCalled</key>
    <name>Non reentrant function 'getprotobynumber' called. For threadsafe applications it is recommended to use the reentrant replacement function 'getprotobynumber_r'</name>
    <description>
      <![CDATA[
      <p>
Non reentrant function 'getprotobynumber' called. For threadsafe
applications it is recommended to use the reentrant replacement
function 'getprotobynumber_r'.
</p>
<h2>References</h2>
<p><a href="https://cwe.mitre.org/data/definitions/477.html" target="_blank">CWE-477: Use of Obsolete Function</a></p>
    ]]>
    </description>
    <tag>cwe</tag>
    <internalKey>getprotobynumberCalled</internalKey>
    <severity>MINOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>getprotoentCalled</key>
    <name>Non reentrant function 'getprotoent' called. For threadsafe applications it is recommended to use the reentrant replacement function 'getprotoent_r'</name>
    <description>
      <![CDATA[
      <p>
Non reentrant function 'getprotoent' called. For threadsafe
applications it is recommended to use the reentrant replacement
function 'getprotoent_r'.
</p>
<h2>References</h2>
<p><a href="https://cwe.mitre.org/data/definitions/477.html" target="_blank">CWE-477: Use of Obsolete Function</a></p>
    ]]>
    </description>
    <tag>cwe</tag>
    <internalKey>getprotoentCalled</internalKey>
    <severity>MINOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>getpwentCalled</key>
    <name>Non reentrant function 'getpwent' called. For threadsafe applications it is recommended to use the reentrant replacement function 'getpwent_r'</name>
    <description>
      <![CDATA[
      <p>
Non reentrant function 'getpwent' called. For threadsafe applications
it is recommended to use the reentrant replacement function
'getpwent_r'.
</p>
<h2>References</h2>
<p><a href="https://cwe.mitre.org/data/definitions/477.html" target="_blank">CWE-477: Use of Obsolete Function</a></p>
    ]]>
    </description>
    <tag>cwe</tag>
    <internalKey>getpwentCalled</internalKey>
    <severity>MINOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>getpwnamCalled</key>
    <name>Non reentrant function 'getpwnam' called. For threadsafe applications it is recommended to use the reentrant replacement function 'getpwnam_r'</name>
    <description>
      <![CDATA[
      <p>
Non reentrant function 'getpwnam' called. For threadsafe applications
it is recommended to use the reentrant replacement function
'getpwnam_r'.
</p>
<h2>References</h2>
<p><a href="https://cwe.mitre.org/data/definitions/477.html" target="_blank">CWE-477: Use of Obsolete Function</a></p>
    ]]>
    </description>
    <tag>cwe</tag>
    <internalKey>getpwnamCalled</internalKey>
    <severity>MINOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>getpwuidCalled</key>
    <name>Non reentrant function 'getpwuid' called. For threadsafe applications it is recommended to use the reentrant replacement function 'getpwuid_r'</name>
    <description>
      <![CDATA[
      <p>
Non reentrant function 'getpwuid' called. For threadsafe applications
it is recommended to use the reentrant replacement function
'getpwuid_r'.
</p>
<h2>References</h2>
<p><a href="https://cwe.mitre.org/data/definitions/477.html" target="_blank">CWE-477: Use of Obsolete Function</a></p>
    ]]>
    </description>
    <tag>cwe</tag>
    <internalKey>getpwuidCalled</internalKey>
    <severity>MINOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>getrpcbynameCalled</key>
    <name>Non reentrant function 'getrpcbyname' called. For threadsafe applications it is recommended to use the reentrant replacement function 'getrpcbyname_r'</name>
    <description>
      <![CDATA[
      <p>
Non reentrant function 'getrpcbyname' called. For threadsafe
applications it is recommended to use the reentrant replacement
function 'getrpcbyname_r'.
</p>
<h2>References</h2>
<p><a href="https://cwe.mitre.org/data/definitions/477.html" target="_blank">CWE-477: Use of Obsolete Function</a></p>
    ]]>
    </description>
    <tag>cwe</tag>
    <internalKey>getrpcbynameCalled</internalKey>
    <severity>MINOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>getrpcbynumberCalled</key>
    <name>Non reentrant function 'getrpcbynumber' called. For threadsafe applications it is recommended to use the reentrant replacement function 'getrpcbynumber_r'</name>
    <description>
      <![CDATA[
      <p>
Non reentrant function 'getrpcbynumber' called. For threadsafe
applications it is recommended to use the reentrant replacement
function 'getrpcbynumber_r'.
</p>
<h2>References</h2>
<p><a href="https://cwe.mitre.org/data/definitions/477.html" target="_blank">CWE-477: Use of Obsolete Function</a></p>
    ]]>
    </description>
    <tag>cwe</tag>
    <internalKey>getrpcbynumberCalled</internalKey>
    <severity>MINOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>getrpcentCalled</key>
    <name>Non reentrant function 'getrpcent' called. For threadsafe applications it is recommended to use the reentrant replacement function 'getrpcent_r'</name>
    <description>
      <![CDATA[
      <p>
Non reentrant function 'getrpcent' called. For threadsafe applications
it is recommended to use the reentrant replacement function
'getrpcent_r'.
</p>
<h2>References</h2>
<p><a href="https://cwe.mitre.org/data/definitions/477.html" target="_blank">CWE-477: Use of Obsolete Function</a></p>
    ]]>
    </description>
    <tag>cwe</tag>
    <internalKey>getrpcentCalled</internalKey>
    <severity>MINOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>getsCalled</key>
    <name>Obsolete function 'gets' called. It is recommended to use 'fgets' or 'gets_s' instead</name>
    <description>
      <![CDATA[
      <p>
The obsolete function 'gets' is called. With 'gets' you'll get a
buffer overrun if the input data exceeds the size of the buffer. It is
recommended to use the functions 'fgets' or 'gets_s' instead.
</p>
<h2>References</h2>
<p><a href="https://cwe.mitre.org/data/definitions/477.html" target="_blank">CWE-477: Use of Obsolete Function</a></p>
    ]]>
    </description>
    <tag>cwe</tag>
    <internalKey>getsCalled</internalKey>
    <severity>MINOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>getservbynameCalled</key>
    <name>Non reentrant function 'getservbyname' called. For threadsafe applications it is recommended to use the reentrant replacement function 'getservbyname_r'</name>
    <description>
      <![CDATA[
      <p>
Non reentrant function 'getservbyname' called. For threadsafe
applications it is recommended to use the reentrant replacement
function 'getservbyname_r'.
</p>
<h2>References</h2>
<p><a href="https://cwe.mitre.org/data/definitions/477.html" target="_blank">CWE-477: Use of Obsolete Function</a></p>
    ]]>
    </description>
    <tag>cwe</tag>
    <internalKey>getservbynameCalled</internalKey>
    <severity>MINOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>getservbyportCalled</key>
    <name>Non reentrant function 'getservbyport' called. For threadsafe applications it is recommended to use the reentrant replacement function 'getservbyport_r'</name>
    <description>
      <![CDATA[
      <p>
Non reentrant function 'getservbyport' called. For threadsafe
applications it is recommended to use the reentrant replacement
function 'getservbyport_r'.
</p>
<h2>References</h2>
<p><a href="https://cwe.mitre.org/data/definitions/477.html" target="_blank">CWE-477: Use of Obsolete Function</a></p>
    ]]>
    </description>
    <tag>cwe</tag>
    <internalKey>getservbyportCalled</internalKey>
    <severity>MINOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>getserventCalled</key>
    <name>Non reentrant function 'getservent' called. For threadsafe applications it is recommended to use the reentrant replacement function 'getservent_r'</name>
    <description>
      <![CDATA[
      <p>
Non reentrant function 'getservent' called. For threadsafe
applications it is recommended to use the reentrant replacement
function 'getservent_r'.
</p>
<h2>References</h2>
<p><a href="https://cwe.mitre.org/data/definitions/477.html" target="_blank">CWE-477: Use of Obsolete Function</a></p>
    ]]>
    </description>
    <tag>cwe</tag>
    <internalKey>getserventCalled</internalKey>
    <severity>MINOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>getspentCalled</key>
    <name>Non reentrant function 'getspent' called. For threadsafe applications it is recommended to use the reentrant replacement function 'getspent_r'</name>
    <description>
      <![CDATA[
      <p>
Non reentrant function 'getspent' called. For threadsafe applications
it is recommended to use the reentrant replacement function
'getspent_r'.
</p>
<h2>References</h2>
<p><a href="https://cwe.mitre.org/data/definitions/477.html" target="_blank">CWE-477: Use of Obsolete Function</a></p>
    ]]>
    </description>
    <tag>cwe</tag>
    <internalKey>getspentCalled</internalKey>
    <severity>MINOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>getspnamCalled</key>
    <name>Non reentrant function 'getspnam' called. For threadsafe applications it is recommended to use the reentrant replacement function 'getspnam_r'</name>
    <description>
      <![CDATA[
      <p>
Non reentrant function 'getspnam' called. For threadsafe applications
it is recommended to use the reentrant replacement function
'getspnam_r'.
</p>
<h2>References</h2>
<p><a href="https://cwe.mitre.org/data/definitions/477.html" target="_blank">CWE-477: Use of Obsolete Function</a></p>
    ]]>
    </description>
    <tag>cwe</tag>
    <internalKey>getspnamCalled</internalKey>
    <severity>MINOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>getwdCalled</key>
    <name>Obsolescent function 'getwd' called. It is recommended to use 'getcwd' instead</name>
    <description>
      <![CDATA[
      <p>
Obsolescent function 'getwd' called. It is recommended to use 'getcwd'
instead.
</p>
<h2>References</h2>
<p><a href="https://cwe.mitre.org/data/definitions/477.html" target="_blank">CWE-477: Use of Obsolete Function</a></p>
    ]]>
    </description>
    <tag>cwe</tag>
    <internalKey>getwdCalled</internalKey>
    <severity>MINOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>indexCalled</key>
    <name>Obsolescent function 'index' called. It is recommended to use 'strchr' instead</name>
    <description>
      <![CDATA[
      <p>
Obsolescent function 'index' called. It is recommended to use 'strchr'
instead.
</p>
<h2>References</h2>
<p><a href="https://cwe.mitre.org/data/definitions/477.html" target="_blank">CWE-477: Use of Obsolete Function</a></p>
    ]]>
    </description>
    <tag>cwe</tag>
    <internalKey>indexCalled</internalKey>
    <severity>MINOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>lstrcatCalled</key>
    <name>Due to security concerns it is not recommended to use this function, see MSDN for details</name>
    <description>
      <![CDATA[
      <p>
Due to security concerns it is not recommended to use this function,
see MSDN for details.
</p>
<h2>References</h2>
<p><a href="https://cwe.mitre.org/data/definitions/477.html" target="_blank">CWE-477: Use of Obsolete Function</a></p>
    ]]>
    </description>
    <tag>cwe</tag>
    <internalKey>lstrcatCalled</internalKey>
    <severity>MINOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>makecontextCalled</key>
    <name>Obsolescent function 'makecontext' called. Applications are recommended to be rewritten to use POSIX threads</name>
    <description>
      <![CDATA[
      <p>
Obsolescent function 'makecontext' called. Applications are
recommended to be rewritten to use POSIX threads.
</p>
<h2>References</h2>
<p><a href="https://cwe.mitre.org/data/definitions/477.html" target="_blank">CWE-477: Use of Obsolete Function</a></p>
    ]]>
    </description>
    <tag>cwe</tag>
    <internalKey>makecontextCalled</internalKey>
    <severity>MINOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>mktempCalled</key>
    <name>Obsolete function 'mktemp' called. It is recommended to use 'mkstemp' or 'mkdtemp' instead</name>
    <description>
      <![CDATA[
      <p>
The function 'mktemp' is considered to be dangerous due to race
conditions and some implementations generating only up to 26 different
filenames out of each template. This function has been removed in
POSIX.1-2008. Use 'mkstemp' or 'mkdtemp' instead.
</p>
<h2>References</h2>
<p><a href="https://cwe.mitre.org/data/definitions/477.html" target="_blank">CWE-477: Use of Obsolete Function</a></p>
    ]]>
    </description>
    <tag>cwe</tag>
    <internalKey>mktempCalled</internalKey>
    <severity>MINOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>pthread_attr_getstackaddrCalled</key>
    <name>Obsolescent function 'pthread_attr_getstackaddr' called. It is recommended to use 'pthread_attr_getstack' instead</name>
    <description>
      <![CDATA[
      <p>
Obsolescent function 'pthread_attr_getstackaddr' called. It is
recommended to use 'pthread_attr_getstack' instead.
</p>
<h2>References</h2>
<p><a href="https://cwe.mitre.org/data/definitions/477.html" target="_blank">CWE-477: Use of Obsolete Function</a></p>
    ]]>
    </description>
    <tag>cwe</tag>
    <internalKey>pthread_attr_getstackaddrCalled</internalKey>
    <severity>MINOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>pthread_attr_setstackaddrCalled</key>
    <name>Obsolescent function 'pthread_attr_setstackaddr' called. It is recommended to use 'pthread_attr_setstack' instead</name>
    <description>
      <![CDATA[
      <p>
Obsolescent function 'pthread_attr_setstackaddr' called. It is
recommended to use 'pthread_attr_setstack' instead.
</p>
<h2>References</h2>
<p><a href="https://cwe.mitre.org/data/definitions/477.html" target="_blank">CWE-477: Use of Obsolete Function</a></p>
    ]]>
    </description>
    <tag>cwe</tag>
    <internalKey>pthread_attr_setstackaddrCalled</internalKey>
    <severity>MINOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>rand_rCalled</key>
    <name>Obsolescent function 'rand_r' called. It is recommended to use 'rand' instead</name>
    <description>
      <![CDATA[
      <p>
Obsolescent function 'rand_r' called. It is recommended to use 'rand'
instead.
</p>
<h2>References</h2>
<p><a href="https://cwe.mitre.org/data/definitions/477.html" target="_blank">CWE-477: Use of Obsolete Function</a></p>
    ]]>
    </description>
    <tag>cwe</tag>
    <internalKey>rand_rCalled</internalKey>
    <severity>MINOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>readdirCalled</key>
    <name>Non reentrant function 'readdir' called. For threadsafe applications it is recommended to use the reentrant replacement function 'readdir_r'</name>
    <description>
      <![CDATA[
      <p>
Non reentrant function 'readdir' called. For threadsafe applications
it is recommended to use the reentrant replacement function
'readdir_r'.
</p>
<h2>References</h2>
<p><a href="https://cwe.mitre.org/data/definitions/477.html" target="_blank">CWE-477: Use of Obsolete Function</a></p>
    ]]>
    </description>
    <tag>cwe</tag>
    <internalKey>readdirCalled</internalKey>
    <severity>MINOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>rindexCalled</key>
    <name>Obsolescent function 'rindex' called. It is recommended to use 'strrchr' instead</name>
    <description>
      <![CDATA[
      <p>
Obsolescent function 'rindex' called. It is recommended to use
'strrchr' instead.
</p>
<h2>References</h2>
<p><a href="https://cwe.mitre.org/data/definitions/477.html" target="_blank">CWE-477: Use of Obsolete Function</a></p>
    ]]>
    </description>
    <tag>cwe</tag>
    <internalKey>rindexCalled</internalKey>
    <severity>MINOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>scalbCalled</key>
    <name>Obsolescent function 'scalb' called. It is recommended to use 'scalbln', 'scalblnf', 'scalbln', 'scalbn', 'scalbnf' or 'scalbnl' instead</name>
    <description>
      <![CDATA[
      <p>
Obsolescent function 'scalb' called. It is recommended to use
'scalbln', 'scalblnf', 'scalbln', 'scalbn', 'scalbnf' or 'scalbnl'
instead.
</p>
<h2>References</h2>
<p><a href="https://cwe.mitre.org/data/definitions/477.html" target="_blank">CWE-477: Use of Obsolete Function</a></p>
    ]]>
    </description>
    <tag>cwe</tag>
    <internalKey>scalbCalled</internalKey>
    <severity>MINOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>sgetspentCalled</key>
    <name>Non reentrant function 'sgetspent' called. For threadsafe applications it is recommended to use the reentrant replacement function 'sgetspent_r'</name>
    <description>
      <![CDATA[
      <p>
Non reentrant function 'sgetspent' called. For threadsafe applications
it is recommended to use the reentrant replacement function
'sgetspent_r'.
</p>
<h2>References</h2>
<p><a href="https://cwe.mitre.org/data/definitions/477.html" target="_blank">CWE-477: Use of Obsolete Function</a></p>
    ]]>
    </description>
    <tag>cwe</tag>
    <internalKey>sgetspentCalled</internalKey>
    <severity>MINOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>sizeofFunctionCall</key>
    <name>Found function call inside sizeof()</name>
    <description>
      <![CDATA[
      <p>
Found function call inside sizeof().
</p>
<h2>References</h2>
<p><a href="https://cwe.mitre.org/data/definitions/682.html" target="_blank">CWE-682: Incorrect Calculation</a></p>
    ]]>
    </description>
    <tag>cwe</tag>
    <tag>bug</tag>
    <internalKey>sizeofFunctionCall</internalKey>
    <severity>MINOR</severity>
    <type>BUG</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>std::asctimeCalled</key>
    <name>Obsolete function 'std::asctime' called. It is recommended to use 'strftime' instead</name>
    <description>
      <![CDATA[
      <p>
Obsolete function 'std::asctime' called. It is recommended to use
'strftime' instead.
</p>
<h2>References</h2>
<p><a href="https://cwe.mitre.org/data/definitions/477.html" target="_blank">CWE-477: Use of Obsolete Function</a></p>
    ]]>
    </description>
    <tag>cwe</tag>
    <internalKey>std::asctimeCalled</internalKey>
    <severity>MINOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>std::strtokCalled</key>
    <name>Non reentrant function 'strtok' called. For threadsafe applications it is recommended to use the reentrant replacement function 'strtok_r'</name>
    <description>
      <![CDATA[
      <p>
Non reentrant function 'strtok' called. For threadsafe applications it
is recommended to use the reentrant replacement function 'strtok_r'.
</p>
<h2>References</h2>
<p><a href="https://cwe.mitre.org/data/definitions/477.html" target="_blank">CWE-477: Use of Obsolete Function</a></p>
    ]]>
    </description>
    <tag>cwe</tag>
    <internalKey>std::strtokCalled</internalKey>
    <severity>MINOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>strlwrCalled</key>
    <name>Obsolete function 'strlwr' called. It is recommended to use '_strlwr' or '_strlwr_s' instead</name>
    <description>
      <![CDATA[
      <p>
Obsolete function 'strlwr' called. It is recommended to use '_strlwr'
or '_strlwr_s' instead.
</p>
<h2>References</h2>
<p><a href="https://cwe.mitre.org/data/definitions/477.html" target="_blank">CWE-477: Use of Obsolete Function</a></p>
    ]]>
    </description>
    <tag>cwe</tag>
    <internalKey>strlwrCalled</internalKey>
    <severity>MINOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>struprCalled</key>
    <name>Obsolete function 'strupr' called. It is recommended to use '_strupr' or '_strupr_s' instead</name>
    <description>
      <![CDATA[
      <p>
Obsolete function 'strupr' called. It is recommended to use '_strupr'
or '_strupr_s' instead.
</p>
<h2>References</h2>
<p><a href="https://cwe.mitre.org/data/definitions/477.html" target="_blank">CWE-477: Use of Obsolete Function</a></p>
    ]]>
    </description>
    <tag>cwe</tag>
    <internalKey>struprCalled</internalKey>
    <severity>MINOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>swapcontextCalled</key>
    <name>Obsolescent function 'swapcontext' called. Applications are recommended to be rewritten to use POSIX threads</name>
    <description>
      <![CDATA[
      <p>
Obsolescent function 'swapcontext' called. Applications are
recommended to be rewritten to use POSIX threads.
</p>
<h2>References</h2>
<p><a href="https://cwe.mitre.org/data/definitions/477.html" target="_blank">CWE-477: Use of Obsolete Function</a></p>
    ]]>
    </description>
    <tag>cwe</tag>
    <internalKey>swapcontextCalled</internalKey>
    <severity>MINOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>tempnamCalled</key>
    <name>Non reentrant function 'tempnam' called. For threadsafe applications it is recommended to use the reentrant replacement function 'tempnam_r'</name>
    <description>
      <![CDATA[
      <p>
Non reentrant function 'tempnam' called. For threadsafe applications
it is recommended to use the reentrant replacement function
'tempnam_r'.
</p>
<h2>References</h2>
<p><a href="https://cwe.mitre.org/data/definitions/477.html" target="_blank">CWE-477: Use of Obsolete Function</a></p>
    ]]>
    </description>
    <tag>cwe</tag>
    <internalKey>tempnamCalled</internalKey>
    <severity>MINOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>tmpnam_rCalled</key>
    <name>Obsolescent function 'tmpnam_r' called. It is recommended to use 'tmpfile', 'mkstemp' or 'mkdtemp' instead</name>
    <description>
      <![CDATA[
      <p>
Obsolescent function 'tmpnam_r' called. It is recommended to use
'tmpfile', 'mkstemp' or 'mkdtemp' instead.
</p>
<h2>References</h2>
<p><a href="https://cwe.mitre.org/data/definitions/477.html" target="_blank">CWE-477: Use of Obsolete Function</a></p>
    ]]>
    </description>
    <tag>cwe</tag>
    <internalKey>tmpnam_rCalled</internalKey>
    <severity>MINOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>ttynameCalled</key>
    <name>Non reentrant function 'ttyname' called. For threadsafe applications it is recommended to use the reentrant replacement function 'ttyname_r'</name>
    <description>
      <![CDATA[
      <p>
Non reentrant function 'ttyname' called. For threadsafe applications
it is recommended to use the reentrant replacement function
'ttyname_r'.
</p>
<h2>References</h2>
<p><a href="https://cwe.mitre.org/data/definitions/477.html" target="_blank">CWE-477: Use of Obsolete Function</a></p>
    ]]>
    </description>
    <tag>cwe</tag>
    <internalKey>ttynameCalled</internalKey>
    <severity>MINOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>ualarmCalled</key>
    <name>Obsolescent function 'ualarm' called. It is recommended to use 'timer_create', 'timer_delete', 'timer_getoverrun', 'timer_gettime' or 'timer_settime' instead</name>
    <description>
      <![CDATA[
      <p>
Obsolescent function 'ualarm' called. It is recommended to use
'timer_create', 'timer_delete', 'timer_getoverrun', 'timer_gettime' or
'timer_settime' instead.
</p>
<h2>References</h2>
<p><a href="https://cwe.mitre.org/data/definitions/477.html" target="_blank">CWE-477: Use of Obsolete Function</a></p>
    ]]>
    </description>
    <tag>cwe</tag>
    <internalKey>ualarmCalled</internalKey>
    <severity>MINOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>usleepCalled</key>
    <name>Obsolescent function 'usleep' called. It is recommended to use 'nanosleep' or 'setitimer' instead</name>
    <description>
      <![CDATA[
      <p>
The obsolescent function 'usleep' is called. POSIX.1-2001 declares
usleep() function obsolescent and POSIX.1-2008 removes it. It is
recommended that new applications use the 'nanosleep' or 'setitimer'
function.
</p>
<h2>References</h2>
<p><a href="https://cwe.mitre.org/data/definitions/477.html" target="_blank">CWE-477: Use of Obsolete Function</a></p>
    ]]>
    </description>
    <tag>cwe</tag>
    <internalKey>usleepCalled</internalKey>
    <severity>MINOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>utimeCalled</key>
    <name>Obsolescent function 'utime' called. It is recommended to use 'utimensat' instead</name>
    <description>
      <![CDATA[
      <p>
Obsolescent function 'utime' called. It is recommended to use
'utimensat' instead.
</p>
<h2>References</h2>
<p><a href="https://cwe.mitre.org/data/definitions/477.html" target="_blank">CWE-477: Use of Obsolete Function</a></p>
    ]]>
    </description>
    <tag>cwe</tag>
    <internalKey>utimeCalled</internalKey>
    <severity>MINOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>vforkCalled</key>
    <name>Obsolescent function 'vfork' called. It is recommended to use 'fork' instead</name>
    <description>
      <![CDATA[
      <p>
Obsolescent function 'vfork' called. It is recommended to use 'fork'
instead.
</p>
<h2>References</h2>
<p><a href="https://cwe.mitre.org/data/definitions/477.html" target="_blank">CWE-477: Use of Obsolete Function</a></p>
    ]]>
    </description>
    <tag>cwe</tag>
    <internalKey>vforkCalled</internalKey>
    <severity>MINOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>wcswcsCalled</key>
    <name>Obsolescent function 'wcswcs' called. It is recommended to use 'wcsstr' instead</name>
    <description>
      <![CDATA[
      <p>
Obsolescent function 'wcswcs' called. It is recommended to use
'wcsstr' instead.
</p>
<h2>References</h2>
<p><a href="https://cwe.mitre.org/data/definitions/477.html" target="_blank">CWE-477: Use of Obsolete Function</a></p>
    ]]>
    </description>
    <tag>cwe</tag>
    <internalKey>wcswcsCalled</internalKey>
    <severity>MINOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>wxApp::MacOpenFileCalled</key>
    <name>This function is deprecated and kept mostly for backwards compatibility. Please override 'wxApp::MacOpenFiles' method instead in any new code</name>
    <description>
      <![CDATA[
      <p>
This function is deprecated and kept mostly for backwards
compatibility. Please override 'wxApp::MacOpenFiles' method instead in
any new code.
</p>
<h2>References</h2>
<p><a href="https://cwe.mitre.org/data/definitions/477.html" target="_blank">CWE-477: Use of Obsolete Function</a></p>
    ]]>
    </description>
    <tag>cwe</tag>
    <internalKey>wxApp::MacOpenFileCalled</internalKey>
    <severity>MINOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>wxArtProvider::InsertCalled</key>
    <name>This function is deprecated and kept mostly for backwards compatibility. Please override 'PushBack' method instead in any new code</name>
    <description>
      <![CDATA[
      <p>
This function is deprecated and kept mostly for backwards
compatibility. Please override 'PushBack' method instead in any new
code.
</p>
<h2>References</h2>
<p><a href="https://cwe.mitre.org/data/definitions/477.html" target="_blank">CWE-477: Use of Obsolete Function</a></p>
    ]]>
    </description>
    <tag>cwe</tag>
    <internalKey>wxArtProvider::InsertCalled</internalKey>
    <severity>MINOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>wxCalendarCtrl::EnableYearChangeCalled</key>
    <name>This function should be used instead of changing 'wxCAL_NO_YEAR_CHANGE' style bit directly. It allows or disallows the user to change the year interactively. Only in generic 'wxCalendarCtrl'</name>
    <description>
      <![CDATA[
      <p>
This function should be used instead of changing
'wxCAL_NO_YEAR_CHANGE' style bit directly. It allows or disallows the
user to change the year interactively. Only in generic
'wxCalendarCtrl'.
</p>
<h2>References</h2>
<p><a href="https://cwe.mitre.org/data/definitions/477.html" target="_blank">CWE-477: Use of Obsolete Function</a></p>
    ]]>
    </description>
    <tag>cwe</tag>
    <internalKey>wxCalendarCtrl::EnableYearChangeCalled</internalKey>
    <severity>MINOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>wxComboCtrl::GetTextIndentCalled</key>
    <name>This function is deprecated and kept mostly for backwards compatibility. Please override 'GetMargins()' method instead in any new code</name>
    <description>
      <![CDATA[
      <p>
This function is deprecated and kept mostly for backwards
compatibility. Please override 'GetMargins()' method instead in any
new code.
</p>
<h2>References</h2>
<p><a href="https://cwe.mitre.org/data/definitions/477.html" target="_blank">CWE-477: Use of Obsolete Function</a></p>
    ]]>
    </description>
    <tag>cwe</tag>
    <internalKey>wxComboCtrl::GetTextIndentCalled</internalKey>
    <severity>MINOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>wxComboCtrl::HidePopupCalled</key>
    <name>This function is deprecated and kept mostly for backwards compatibility. Please override 'Dismiss()' method instead in any new code</name>
    <description>
      <![CDATA[
      <p>
This function is deprecated and kept mostly for backwards
compatibility. Please override 'Dismiss()' method instead in any new
code.
</p>
<h2>References</h2>
<p><a href="https://cwe.mitre.org/data/definitions/477.html" target="_blank">CWE-477: Use of Obsolete Function</a></p>
    ]]>
    </description>
    <tag>cwe</tag>
    <internalKey>wxComboCtrl::HidePopupCalled</internalKey>
    <severity>MINOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>wxComboCtrl::SetTextIndentCalled</key>
    <name>This function is deprecated and kept mostly for backwards compatibility. Please override 'SetMargins()' method instead in any new code</name>
    <description>
      <![CDATA[
      <p>
This function is deprecated and kept mostly for backwards
compatibility. Please override 'SetMargins()' method instead in any
new code.
</p>
<h2>References</h2>
<p><a href="https://cwe.mitre.org/data/definitions/477.html" target="_blank">CWE-477: Use of Obsolete Function</a></p>
    ]]>
    </description>
    <tag>cwe</tag>
    <internalKey>wxComboCtrl::SetTextIndentCalled</internalKey>
    <severity>MINOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>wxComboCtrl::ShowPopupCalled</key>
    <name>This function is deprecated and kept mostly for backwards compatibility. Please override 'Popup()' method instead in any new code</name>
    <description>
      <![CDATA[
      <p>
This function is deprecated and kept mostly for backwards
compatibility. Please override 'Popup()' method instead in any new
code.
</p>
<h2>References</h2>
<p><a href="https://cwe.mitre.org/data/definitions/477.html" target="_blank">CWE-477: Use of Obsolete Function</a></p>
    ]]>
    </description>
    <tag>cwe</tag>
    <internalKey>wxComboCtrl::ShowPopupCalled</internalKey>
    <severity>MINOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>wxDataViewCustomRenderer::ActivateCalled</key>
    <name>This function is deprecated and kept mostly for backwards compatibility. Please override 'wxDataViewCustomRenderer::ActivateCell()' method instead in any new code</name>
    <description>
      <![CDATA[
      <p>
This function is deprecated and kept mostly for backwards
compatibility. Please override
'wxDataViewCustomRenderer::ActivateCell()' method instead in any new
code.
</p>
<h2>References</h2>
<p><a href="https://cwe.mitre.org/data/definitions/477.html" target="_blank">CWE-477: Use of Obsolete Function</a></p>
    ]]>
    </description>
    <tag>cwe</tag>
    <internalKey>wxDataViewCustomRenderer::ActivateCalled</internalKey>
    <severity>MINOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>wxDebugContext::GetLevelCalled</key>
    <name>This function is deprecated and is replaced by 'wxLog' functionality</name>
    <description>
      <![CDATA[
      <p>
This function is deprecated and is replaced by 'wxLog' functionality.
</p>
<h2>References</h2>
<p><a href="https://cwe.mitre.org/data/definitions/477.html" target="_blank">CWE-477: Use of Obsolete Function</a></p>
    ]]>
    </description>
    <tag>cwe</tag>
    <internalKey>wxDebugContext::GetLevelCalled</internalKey>
    <severity>MINOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>wxDos2UnixFilenameCalled</key>
    <name>This function is deprecated. Construct a 'wxFileName' with 'wxPATH_DOS' and then use 'wxFileName::GetFullPath(wxPATH_UNIX)' instead</name>
    <description>
      <![CDATA[
      <p>
This function is deprecated. Construct a 'wxFileName' with
'wxPATH_DOS' and then use 'wxFileName::GetFullPath(wxPATH_UNIX)'
instead.
</p>
<h2>References</h2>
<p><a href="https://cwe.mitre.org/data/definitions/477.html" target="_blank">CWE-477: Use of Obsolete Function</a></p>
    ]]>
    </description>
    <tag>cwe</tag>
    <internalKey>wxDos2UnixFilenameCalled</internalKey>
    <severity>MINOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>wxFileNameFromPathCalled</key>
    <name>This function is deprecated. Please use 'wxFileName::SplitPath()' instead</name>
    <description>
      <![CDATA[
      <p>
This function is deprecated. Please use 'wxFileName::SplitPath()'
instead.
</p>
<h2>References</h2>
<p><a href="https://cwe.mitre.org/data/definitions/477.html" target="_blank">CWE-477: Use of Obsolete Function</a></p>
    ]]>
    </description>
    <tag>cwe</tag>
    <internalKey>wxFileNameFromPathCalled</internalKey>
    <severity>MINOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>wxGetWorkingDirectoryCalled</key>
    <name>Obsolete function 'wxGetWorkingDirectory' called. It is recommended to use 'wxGetCwd' instead</name>
    <description>
      <![CDATA[
      <p>
Obsolete function 'wxGetWorkingDirectory' called. It is recommended to
use 'wxGetCwd' instead.
</p>
<h2>References</h2>
<p><a href="https://cwe.mitre.org/data/definitions/477.html" target="_blank">CWE-477: Use of Obsolete Function</a></p>
    ]]>
    </description>
    <tag>cwe</tag>
    <internalKey>wxGetWorkingDirectoryCalled</internalKey>
    <severity>MINOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>wxGrid::SetCellAlignmentCalled</key>
    <name>This function is deprecated. Please use 'wxGrid::SetCellAlignment(row, col, horiz, vert)' instead</name>
    <description>
      <![CDATA[
      <p>
This function is deprecated. Please use 'wxGrid::SetCellAlignment(row,
col, horiz, vert)' instead.
</p>
<h2>References</h2>
<p><a href="https://cwe.mitre.org/data/definitions/477.html" target="_blank">CWE-477: Use of Obsolete Function</a></p>
    ]]>
    </description>
    <tag>cwe</tag>
    <internalKey>wxGrid::SetCellAlignmentCalled</internalKey>
    <severity>MINOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>wxSizerItem::SetSizerCalled</key>
    <name>This function is deprecated. This function does not free the old sizer which may result in memory leaks, use 'wxSizerItem::AssignSizer' which does free it instead</name>
    <description>
      <![CDATA[
      <p>
This function is deprecated. This function does not free the old sizer
which may result in memory leaks, use 'wxSizerItem::AssignSizer' which
does free it instead.
</p>
<h2>References</h2>
<p><a href="https://cwe.mitre.org/data/definitions/477.html" target="_blank">CWE-477: Use of Obsolete Function</a></p>
    ]]>
    </description>
    <tag>cwe</tag>
    <internalKey>wxSizerItem::SetSizerCalled</internalKey>
    <severity>MINOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>wxSizerItem::SetSpacerCalled</key>
    <name>This function is deprecated. This function does not free the old sizer which may result in memory leaks, use 'wxSizerItem::AssignSpacer' which does free it instead</name>
    <description>
      <![CDATA[
      <p>
This function is deprecated. This function does not free the old sizer
which may result in memory leaks, use 'wxSizerItem::AssignSpacer'
which does free it instead.
</p>
<h2>References</h2>
<p><a href="https://cwe.mitre.org/data/definitions/477.html" target="_blank">CWE-477: Use of Obsolete Function</a></p>
    ]]>
    </description>
    <tag>cwe</tag>
    <internalKey>wxSizerItem::SetSpacerCalled</internalKey>
    <severity>MINOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>wxSizerItem::SetWindowCalled</key>
    <name>This function is deprecated</name>
    <description>
      <![CDATA[
      <p>
This function is deprecated.
</p>
<h2>References</h2>
<p><a href="https://cwe.mitre.org/data/definitions/477.html" target="_blank">CWE-477: Use of Obsolete Function</a></p>
    ]]>
    </description>
    <tag>cwe</tag>
    <internalKey>wxSizerItem::SetWindowCalled</internalKey>
    <severity>MINOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>wxString::IsNullCalled</key>
    <name>This is the same as 'wxString::IsEmpty' and is kept for wxWidgets 1.xx compatibility. You should not use it in new code</name>
    <description>
      <![CDATA[
      <p>
This is the same as 'wxString::IsEmpty' and is kept for wxWidgets 1.xx
compatibility. You should not use it in new code.
</p>
<h2>References</h2>
<p><a href="https://cwe.mitre.org/data/definitions/477.html" target="_blank">CWE-477: Use of Obsolete Function</a></p>
    ]]>
    </description>
    <tag>cwe</tag>
    <internalKey>wxString::IsNullCalled</internalKey>
    <severity>MINOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>wxString::LengthCalled</key>
    <name>This is the same as 'wxString::Len' and is kept for wxWidgets 1.xx compatibility. You should not use it in new code</name>
    <description>
      <![CDATA[
      <p>
This is the same as 'wxString::Len' and is kept for wxWidgets 1.xx
compatibility. You should not use it in new code.
</p>
<h2>References</h2>
<p><a href="https://cwe.mitre.org/data/definitions/477.html" target="_blank">CWE-477: Use of Obsolete Function</a></p>
    ]]>
    </description>
    <tag>cwe</tag>
    <internalKey>wxString::LengthCalled</internalKey>
    <severity>MINOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>wxString::LowerCaseCalled</key>
    <name>This is the same as 'wxString::MakeLower' and is kept for wxWidgets 1.xx compatibility. You should not use it in new code</name>
    <description>
      <![CDATA[
      <p>
This is the same as 'wxString::MakeLower' and is kept for wxWidgets
1.xx compatibility. You should not use it in new code.
</p>
<h2>References</h2>
<p><a href="https://cwe.mitre.org/data/definitions/477.html" target="_blank">CWE-477: Use of Obsolete Function</a></p>
    ]]>
    </description>
    <tag>cwe</tag>
    <internalKey>wxString::LowerCaseCalled</internalKey>
    <severity>MINOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>asctimeCalled</key>
    <name>Obsolete function 'asctime' called. It is recommended to use 'strftime' instead</name>
    <description>
      <![CDATA[
      <p>
Obsolete function 'asctime' called. It is recommended to use
'strftime' instead.
</p>
<h2>References</h2>
<p><a href="https://cwe.mitre.org/data/definitions/477.html" target="_blank">CWE-477: Use of Obsolete Function</a></p>
    ]]>
    </description>
    <tag>cwe</tag>
    <internalKey>asctimeCalled</internalKey>
    <severity>MINOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>gethostbynameCalled</key>
    <name>Obsolescent function 'gethostbyname' called. It is recommended to use 'getaddrinfo' instead</name>
    <description>
      <![CDATA[
      <p>
Obsolescent function 'gethostbyname' called. It is recommended to use
'getaddrinfo' instead.
</p>
<h2>References</h2>
<p><a href="https://cwe.mitre.org/data/definitions/477.html" target="_blank">CWE-477: Use of Obsolete Function</a></p>
    ]]>
    </description>
    <tag>cwe</tag>
    <internalKey>gethostbynameCalled</internalKey>
    <severity>MINOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>localtimeCalled</key>
    <name>Non reentrant function 'localtime' called. For threadsafe applications it is recommended to use the reentrant replacement function 'localtime_r'</name>
    <description>
      <![CDATA[
      <p>
Non reentrant function 'localtime' called. For threadsafe applications
it is recommended to use the reentrant replacement function
'localtime_r'.
</p>
<h2>References</h2>
<p><a href="https://cwe.mitre.org/data/definitions/477.html" target="_blank">CWE-477: Use of Obsolete Function</a></p>
    ]]>
    </description>
    <tag>cwe</tag>
    <internalKey>localtimeCalled</internalKey>
    <severity>MINOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>strtokCalled</key>
    <name>Non reentrant function 'strtok' called</name>
    <description>
<![CDATA[<p>
Non reentrant function 'strtok' called. For threadsafe applications it is recommended to use the reentrant replacement function 'strtok_r'.
</p><h2>References</h2>
<p><a href="https://cwe.mitre.org/data/definitions/477.html" target="_blank">CWE-477: Use of Obsolete Functions</a></p>
]]>
    </description>
    <tag>cwe</tag>
    <internalKey>strtokCalled</internalKey>
    <severity>MINOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>tmpnamCalled</key>
    <name>Obsolescent function 'tmpnam' called. It is recommended to use 'tmpfile', 'mkstemp' or 'mkdtemp' instead</name>
    <description>
      <![CDATA[
      <p>
Obsolescent function 'tmpnam' called. It is recommended to use
'tmpfile', 'mkstemp' or 'mkdtemp' instead.
</p>
<h2>References</h2>
<p><a href="https://cwe.mitre.org/data/definitions/477.html" target="_blank">CWE-477: Use of Obsolete Function</a></p>
    ]]>
    </description>
    <tag>cwe</tag>
    <internalKey>tmpnamCalled</internalKey>
    <severity>MINOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>unhandledExceptionSpecification</key>
    <name>Unhandled exception specification</name>
    <description>
      <![CDATA[
      <p>
Unhandled exception specification when calling function foo(). Either
use a try/catch around the function call, or add a exception
specification for funcname() also.
</p>
<h2>References</h2>
<p><a href="https://cwe.mitre.org/data/definitions/703.html" target="_blank">CWE-703: Improper Check or Handling of Exceptional Conditions</a></p>
]]>
    </description>
    <tag>cwe</tag>
    <internalKey>unhandledExceptionSpecification</internalKey>
    <severity>MINOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>purgedConfiguration</key>
    <name>The configuration 'define' was not checked because its code equals another one</name>
    <description>
      <![CDATA[
      The configuration 'define' was not checked because its code equals another one.
    ]]>
    </description>
    <internalKey>purgedConfiguration</internalKey>
    <severity>INFO</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>internalError</key>
    <name>Internal Cppcheck tool error</name>
    <description>
<![CDATA[<p>
Internal Cppcheck tool error. Create an issue on the Cppcheck issue tracker.
</p><h2>References</h2>
<p><a href="http://trac.cppcheck.net/" target="_blank">Cppcheck development</a></p>
]]>
    </description>
    <internalKey>internalError</internalKey>
    <severity>INFO</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>QString::vsprintfCalled</key>
    <name>Obsolete function 'QString::vsprintf' called. It is recommended to use 'QString::vasprintf', 'QString::arg' or 'QTextStream' instead</name>
    <description>
      <![CDATA[
      <p>
Obsolete function 'QString::vsprintf' called. It is recommended to use
'QString::vasprintf', 'QString::arg' or 'QTextStream' instead.
</p>
<h2>References</h2>
<p><a href="https://cwe.mitre.org/data/definitions/477.html" target="_blank">CWE-477: Use of Obsolete Function</a></p>
    ]]>
      <![CDATA[]]>
    </description>
    <tag>cwe</tag>
    <internalKey>QString::vsprintfCalled</internalKey>
    <severity>MINOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>asctime_sCalled</key>
    <name>Obsolete function 'asctime_s' called. It is recommended to use 'strftime' instead</name>
    <description>
      <![CDATA[
      <p>
Obsolete function 'asctime_s' called. It is recommended to use
'strftime' instead.
</p>
<h2>References</h2>
<p><a href="https://cwe.mitre.org/data/definitions/477.html" target="_blank">CWE-477: Use of Obsolete Function</a></p>
    ]]>
      <![CDATA[]]>
    </description>
    <tag>cwe</tag>
    <internalKey>asctime_sCalled</internalKey>
    <severity>MINOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>duplicateValueTernary</key>
    <name>Same value in both branches of ternary operator</name>
    <description>
      <![CDATA[
      <p>
Finding the same value in both branches of ternary operator is
suspicious as the same code is executed regardless of the condition.
</p>
<h2>References</h2>
<p><a href="https://cwe.mitre.org/data/definitions/398.html" target="_blank">CWE-398: 7PK - Code Quality</a></p>
    ]]>
      <![CDATA[]]>
    </description>
    <tag>cwe</tag>
    <internalKey>duplicateValueTernary</internalKey>
    <severity>MINOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>identicalInnerCondition</key>
    <name>Identical inner 'if' condition</name>
    <description>
      <![CDATA[
      <p>
Identical inner 'if' condition is always true/false (outer condition is equal to the
inner condition).
</p>
<h2>References</h2>
<p><a href="https://cwe.mitre.org/data/definitions/398.html" target="_blank">CWE-398: 7PK - Code Quality</a></p>
    ]]>
      <![CDATA[]]>
    </description>
    <tag>cwe</tag>
    <tag>bug</tag>
    <internalKey>identicalInnerCondition</internalKey>
    <severity>MINOR</severity>
    <type>BUG</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>missingOverride</key>
    <name>Missing override</name>
    <description>
      <![CDATA[
      The function overrides a function in a base class but is not marked with a 'override' specifier.
    ]]>
      <![CDATA[]]>
    </description>
    <internalKey>missingOverride</internalKey>
    <severity>MINOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>noDestructor</key>
    <name>Missing destructor</name>
    <description>
      <![CDATA[
      <p>
Class 'class' does not have a destructor which is recommended since it
has dynamic memory/resource allocation(s).
</p>
<h2>References</h2>
<p><a href="https://cwe.mitre.org/data/definitions/398.html" target="_blank">CWE-398: 7PK - Code Quality</a></p>
    ]]>
      <![CDATA[]]>
    </description>
    <tag>cwe</tag>
    <internalKey>noDestructor</internalKey>
    <severity>MINOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>noOperatorEq</key>
    <name>Missing assignment operator</name>
    <description>
      <![CDATA[
      <p>
Class 'class' does not have a operator= which is recommended since it
has dynamic memory/resource allocation(s).
</p>
<h2>References</h2>
<p><a href="https://cwe.mitre.org/data/definitions/398.html" target="_blank">CWE-398: 7PK - Code Quality</a></p>
    ]]>
      <![CDATA[]]>
    </description>
    <tag>cwe</tag>
    <internalKey>noOperatorEq</internalKey>
    <severity>MINOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>oppositeExpression</key>
    <name>Opposite expression on both sides of logical operator</name>
    <description>
      <![CDATA[
      <p>
Finding the opposite expression on both sides of an operator is
suspicious and might indicate a cut and paste or logic error. Please
examine this code carefully to determine if it is correct.
</p>
<h2>References</h2>
<p><a href="https://cwe.mitre.org/data/definitions/398.html" target="_blank">CWE-398: 7PK - Code Quality</a></p>
    ]]>
      <![CDATA[]]>
    </description>
    <tag>cwe</tag>
    <internalKey>oppositeExpression</internalKey>
    <severity>MINOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>pureVirtualCall</key>
    <name>Call of pure virtual function in constructor</name>
    <description>
      <![CDATA[
      Call of pure virtual function in constructor. The call will fail during runtime.
    ]]>
      <![CDATA[]]>
    </description>
    <tag>bug</tag>
    <internalKey>pureVirtualCall</internalKey>
    <severity>MINOR</severity>
    <type>BUG</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>qInstallMsgHandlerCalled</key>
    <name>Obsolete function 'qInstallMsgHandler' called. It is recommended to use 'qInstallMessageHandler' instead</name>
    <description>
      <![CDATA[
      <p>
Obsolete function 'qInstallMsgHandler' called. It is recommended to
use 'qInstallMessageHandler' instead.
</p>
<h2>References</h2>
<p><a href="https://cwe.mitre.org/data/definitions/477.html" target="_blank">CWE-477: Use of Obsolete Function</a></p>
    ]]>
      <![CDATA[]]>
    </description>
    <tag>cwe</tag>
    <internalKey>qInstallMsgHandlerCalled</internalKey>
    <severity>MINOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>qrandCalled</key>
    <name>Obsolete function 'qrand' called. It is recommended to use 'QRandomGenerator' instead</name>
    <description>
      <![CDATA[
      <p>
Obsolete function 'qrand' called. It is recommended to use
'QRandomGenerator' instead.
</p>
<h2>References</h2>
<p><a href="https://cwe.mitre.org/data/definitions/477.html" target="_blank">CWE-477: Use of Obsolete Function</a></p>
    ]]>
      <![CDATA[]]>
    </description>
    <tag>cwe</tag>
    <internalKey>qrandCalled</internalKey>
    <severity>MINOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>qsrandCalled</key>
    <name>Obsolete function 'qsrand' called. It is recommended to use 'QRandomGenerator' instead</name>
    <description>
      <![CDATA[
      <p>
Obsolete function 'qsrand' called. It is recommended to use
'QRandomGenerator' instead.
</p>
<h2>References</h2>
<p><a href="https://cwe.mitre.org/data/definitions/477.html" target="_blank">CWE-477: Use of Obsolete Function</a></p>
    ]]>
      <![CDATA[]]>
    </description>
    <tag>cwe</tag>
    <internalKey>qsrandCalled</internalKey>
    <severity>MINOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>std::asctime_sCalled</key>
    <name>Obsolete function 'std::asctime_s' called. It is recommended to use 'strftime' instead</name>
    <description>
      <![CDATA[
      <p>
Obsolete function 'std::asctime_s' called. It is recommended to use
'strftime' instead.
</p>
<h2>References</h2>
<p><a href="https://cwe.mitre.org/data/definitions/477.html" target="_blank">CWE-477: Use of Obsolete Function</a></p>
    ]]>
      <![CDATA[]]>
    </description>
    <tag>cwe</tag>
    <internalKey>std::asctime_sCalled</internalKey>
    <severity>MINOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>umaskCalled</key>
    <name>Obsolete function 'umask' called. It is recommended to use '_umask' instead</name>
    <description>
      <![CDATA[
      <p>
Obsolete function 'umask' called. It is recommended to use '_umask'
instead.
</p>
<h2>References</h2>
<p><a href="https://cwe.mitre.org/data/definitions/477.html" target="_blank">CWE-477: Use of Obsolete Function</a></p>
    ]]>
      <![CDATA[]]>
    </description>
    <tag>cwe</tag>
    <internalKey>umaskCalled</internalKey>
    <severity>MINOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>virtualCallInConstructor</key>
    <name>Virtual function is called from constructor</name>
    <description>
      <![CDATA[
      Call of pure virtual function in constructor. Dynamic binding is not used.
    ]]>
      <![CDATA[]]>
    </description>
    <tag>bug</tag>
    <internalKey>virtualCallInConstructor</internalKey>
    <severity>MINOR</severity>
    <type>BUG</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
</rules>

<!-- ########### Deprecated as of 1.63 ########### -->
<!-- tooBigSleepTime -->
<!-- dangerousUsageStrtol -->
<!-- wrongcctypecall -->

<!-- ########### Deprecated as of 1.63.1 ########### -->
<!-- dangerousUsageStrtol -->
<!-- conditionAlwaysTrueFalse -->
<!-- sizeArgumentAsChar -->
<!-- complexPatternError -->
<!-- missingPercentCharacter -->
<!-- redundantStrcpyInSwitch -->
<!-- stlcstrthrow -->
<!-- wrongcctypecall -->
<!-- debug -->
<!-- strncatUsage -->
<!-- invalidScanfFormatWidth -->
<!-- leakconfiguration -->
<!-- missingScanfFormatWidth -->
<!-- redundantOperationInSwitch -->
<!-- unknownPattern -->
<!-- invalidFree -->
<!-- invalidLengthModifierError -->
<!-- tooBigSleepTime -->
<!-- class_X_Y -->

<!-- ########### Deprecated as of 1.64 ########### -->
<!-- duplicateBranch -->

