<?xml version="1.0" encoding="UTF-8"?>
<rules>
  <rule>
    <key>C1252</key>
    <name>C1252: Circular or missing dependency between plugins: requires GUID</name>
    <description><![CDATA[<p>
This warning appears for an internal error with plugin dependencies, not in the code being analyzed.
</p><h2>Microsoft Documentation</h2>
<p><a href="https://docs.microsoft.com/en-us/visualstudio/code-quality/C1252" target="_blank">https://docs.microsoft.com/en-us/visualstudio/code-quality/C1252</a></p>
]]>
    </description>
    <internalKey>C1252</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C1253</key>
    <name>C1253: Unable to load model file</name>
    <description><![CDATA[<p>
This warning appears for an internal error in the model file, not in the code being analyzed.
</p><h2>Microsoft Documentation</h2>
<p><a href="https://docs.microsoft.com/en-us/visualstudio/code-quality/c1253" target="_blank">https://docs.microsoft.com/en-us/visualstudio/code-quality/c1253</a></p>
]]>
    </description>
    <internalKey>C1253</internalKey>
    <severity>INFO</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C1254</key>
    <name>C1254: Plugin version mismatch : version doesn't match the version of the PREfast driver</name>
    <description><![CDATA[<p>
This warning appears for an internal error with the plugin version, not in the code being analyzed.
</p><h2>Microsoft Documentation</h2>
<p><a href="https://docs.microsoft.com/en-us/visualstudio/code-quality/c1254" target="_blank">https://docs.microsoft.com/en-us/visualstudio/code-quality/c1254</a></p>
]]>
    </description>
    <internalKey>C1254</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C1255</key>
    <name>C1255: PCH data for plugin has incorrect length</name>
    <description><![CDATA[<p>
This warning when there is an internal error with plugin dependencies, not in the code being analyzed.
</p><h2>Microsoft Documentation</h2>
<p><a href="https://docs.microsoft.com/en-us/visualstudio/code-quality/c1255" target="_blank">https://docs.microsoft.com/en-us/visualstudio/code-quality/c1255</a></p>
]]>
    </description>
    <internalKey>C1255</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C1256</key>
    <name>C1256: PCH must be both written and read</name>
    <description><![CDATA[<p>
This warning when there is an internal error in the tool, not in the code being analyzed.
</p><h2>Microsoft Documentation</h2>
<p><a href="https://docs.microsoft.com/en-us/visualstudio/code-quality/c1256" target="_blank">https://docs.microsoft.com/en-us/visualstudio/code-quality/c1256</a></p>
]]>
    </description>
    <internalKey>C1256</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C1257</key>
    <name>C1257: Circular or missing dependency between plugins: requires GUID </name>
    <description><![CDATA[<p>
This warning appears for an internal error in the plugin, not in the code being analyzed.
</p><h2>Microsoft Documentation</h2>
<p><a href="https://docs.microsoft.com/en-us/visualstudio/code-quality/c1257" target="_blank">https://docs.microsoft.com/en-us/visualstudio/code-quality/c1257</a></p>
]]>
    </description>
    <internalKey>C1257</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>CustomRuleTemplate"</key>
    <cardinality>MULTIPLE</cardinality>
    <name><![CDATA[Template for custom Custom rules]]></name>
    <description>
      <![CDATA[
<p>
Follow these steps to make your custom Custom rules available in SonarQube:
</p>

<ol>
  <ol>
    <li>Create a new rule in SonarQube by "copying" this rule template and specify the <code>CheckId</code> of your custom rule, a title, a description, and a default severity.</li>
    <li>Enable the newly created rule in your quality profile</li>
  </ol>
  <li>Relaunch an analysis on your projects, et voil√†, your custom rules are executed!</li>
</ol>
      ]]>
    </description>
    <severity>MAJOR</severity>
  </rule>    
  <rule>
    <key>C4001</key>
    <name>C4001: nonstandard extension 'single line comment' was used</name>
    <description><![CDATA[<p>
Single-line comments are standard in C++ and nonstandard in C. Under strict ANSI compatibility (/Za), C files that contain single-line comments, generate C4001 due to the usage of a nonstandard extension. Since single-line comments are standard in C++, C files containing single-line comments do not produce C4001 when compiling with Microsoft extensions (/Ze).
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/f795hcch.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/f795hcch.aspx</a></p>
]]>
    </description>
    <internalKey>C4001</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4002</key>
    <name>C4002: too many actual parameters for macro 'identifier'</name>
    <description><![CDATA[<p>
The number of actual parameters in the macro exceeds the number of formal parameters in the macro definition. The preprocessor collects the extra parameters but ignores them during macro expansion.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/y37zb304(v=vs.90).aspx" target="_blank">https://msdn.microsoft.com/en-us/library/y37zb304(v=vs.90).aspx</a></p>
]]>
    </description>
    <internalKey>C4002</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4003</key>
    <name>C4003: not enough actual parameters for macro 'identifier'</name>
    <description><![CDATA[<p>
The number of formal parameters in the macro definition exceeds the number of actual parameters in the macro. Macro expansion substitutes empty text for the missing parameters.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/zf9t054c.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/zf9t054c.aspx</a></p>
]]>
    </description>
    <internalKey>C4003</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4005</key>
    <name>C4005: 'identifier' : macro redefinition</name>
    <description><![CDATA[<p>
The macro identifier is defined twice. The compiler uses the second macro definition.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/zf9t054c.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/zf9t054c.aspx</a></p>
]]>
    </description>
    <internalKey>C4005</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4007</key>
    <name>C4007: 'function' : must be 'attribute'</name>
    <description><![CDATA[<p>
A required attribute for a function is not explicitly stated. For example, the function main must have the __cdecl attribute. The compiler forces the attribute.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/taz18t83.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/taz18t83.aspx</a></p>
]]>
    </description>
    <internalKey>C4007</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4010</key>
    <name>C4010: single-line comment contains line-continuation character</name>
    <description><![CDATA[<p>
A single-line comment, which is introduced by //, contains a backslash (\) that serves as a line-continuation character. The compiler considers the next line to be a continuation and treats it as a comment.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/56ybs0yk.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/56ybs0yk.aspx</a></p>
]]>
    </description>
    <internalKey>C4010</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4013</key>
    <name>C4013: 'function' undefined; assuming extern returning int</name>
    <description><![CDATA[<p>
The compiler encountered a call to an undefined function.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/d3ct4kz9.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/d3ct4kz9.aspx</a></p>
]]>
    </description>
    <internalKey>C4013</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4015</key>
    <name>C4015: 'identifier' : type of bit field must be integral</name>
    <description><![CDATA[<p>
The bit field is not declared as an integer type. The compiler assumes the base type of the bit field to be unsigned. Bit fields must be declared as unsigned integer types.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/d32e257e.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/d32e257e.aspx</a></p>
]]>
    </description>
    <internalKey>C4015</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4018</key>
    <name>C4018: 'expression' : signed/unsigned mismatch</name>
    <description><![CDATA[<p>
Comparing a signed and unsigned number required the compiler to convert the signed value to unsigned.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/y92ktdf2.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/y92ktdf2.aspx</a></p>
]]>
    </description>
    <internalKey>C4018</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4020</key>
    <name>C4020: 'function' : too many actual parameters</name>
    <description><![CDATA[<p>
The number of actual parameters in a function call exceeds the number of formal parameters in the function prototype or definition. The compiler passes the extra actual parameters according to the calling convention of the function.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/a4e1hy1k.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/a4e1hy1k.aspx</a></p>
]]>
    </description>
    <tag>bug</tag>
    <internalKey>C4020</internalKey>
    <severity>MAJOR</severity>
    <type>BUG</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4022</key>
    <name>C4022: 'function' : pointer mismatch for actual parameter 'number'
    </name>
    <description><![CDATA[<p>
The pointer type of the actual parameter differs from the pointer type of the corresponding formal parameter. The actual parameter is passed without change.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/6z9t5w0t.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/6z9t5w0t.aspx</a></p>
]]>
    </description>
    <internalKey>C4022</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4024</key>
    <name>C4024: 'function' : different types for formal and actual parameter
    'number'</name>
    <description><![CDATA[<p>
Corresponding formal and actual parameters have different types. The compiler passes the actual parameter without change. The receiving function converts the parameter type to the type expected.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/f05chc45.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/f05chc45.aspx</a></p>
]]>
    </description>
    <internalKey>C4024</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4028</key>
    <name>C4028: formal parameter 'number' different from declaration</name>
    <description><![CDATA[<p>
The type of the formal parameter does not agree with the corresponding parameter in the declaration. The type in the original declaration is used.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/cw989136.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/cw989136.aspx</a></p>
]]>
    </description>
    <internalKey>C4028</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4029</key>
    <name>C4029: declared formal parameter list different from definition</name>
    <description><![CDATA[<p>
Formal parameter types in the function declaration do not agree with those in the function definition. The compiler uses the parameter list from the definition.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/zteh7th6.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/zteh7th6.aspx</a></p>
]]>
    </description>
    <internalKey>C4029</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4031</key>
    <name>C4031: second formal parameter list longer than the first list</name>
    <description><![CDATA[<p>
A function is redeclared with different formal parameters. The compiler uses the formal parameters given in the first declaration.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/82t41b6c.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/82t41b6c.aspx</a></p>
]]>
    </description>
    <internalKey>C4031</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4032</key>
    <name>C4032: formal parameter 'number' has different type when promoted
    </name>
    <description><![CDATA[<p>
The parameter type is not compatible, through default promotions, with the type in a previous declaration
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/tzb2a7ya.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/tzb2a7ya.aspx</a></p>
]]>
    </description>
    <internalKey>C4032</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4034</key>
    <name>C4034: sizeof returns 0</name>
    <description><![CDATA[<p>
The sizeof operator is applied to an operand of size zero (an empty structure, union, class, or enumerated type, or type void).
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/tf66xte5.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/tf66xte5.aspx</a></p>
]]>
    </description>
    <tag>bug</tag>
    <internalKey>C4034</internalKey>
    <severity>MAJOR</severity>
    <type>BUG</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4042</key>
    <name>C4042: 'identifier' : has bad storage class</name>
    <description><![CDATA[<p>
The specified storage class cannot be used with this identifier in this context. The compiler uses the default storage class instead:
- extern , if identifier is a function.
- auto, if identifier is a formal parameter or local variable.
- No storage class, if identifier is a global variable.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/z9d31kt4.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/z9d31kt4.aspx</a></p>
]]>
    </description>
    <internalKey>C4042</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4047</key>
    <name>C4047: 'operator' : 'identifier1' differs in levels of indirection from 'identifier2' </name>
    <description><![CDATA[<p>
A pointer can point to a variable (one level of indirection), to another pointer that points to a variable (two levels of indirection), and so on.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/3t92260h.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/3t92260h.aspx</a></p>
]]>
    </description>
    <internalKey>C4047</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4048</key>
    <name>C4048: different declared array subscripts : 'identifier1' and
    'identifier2'</name>
    <description><![CDATA[<p>
An expression involves pointers to arrays of different size. The pointers are used without conversion.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/c3yxfdkx.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/c3yxfdkx.aspx</a></p>
]]>
    </description>
    <internalKey>C4048</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4049</key>
    <name>C4049: compiler limit : terminating line number emission</name>
    <description><![CDATA[<p>
The file contains more than 16,777,215 source lines. The compiler stops numbering at 16,777,215.
For code after line 16,777,215:
- The image will contain no debug information for line numbers.
- Some diagnostics may be reported with incorrect line numbers.
- .asm listings (/FAs) may have incorrect line numbers.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/8skb5hay.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/8skb5hay.aspx</a></p>
]]>
    </description>
    <internalKey>C4049</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4056</key>
    <name>C4056: overflow in floating point constant arithmetic</name>
    <description><![CDATA[<p>
Floating-point constant arithmetic generates a result that exceeds the maximum allowable value.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/cwt7tyxx.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/cwt7tyxx.aspx</a></p>
]]>
    </description>
    <tag>bug</tag>
    <internalKey>C4056</internalKey>
    <severity>MAJOR</severity>
    <type>BUG</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4061</key>
    <name>C4061: enumerator 'identifier' in switch of enum 'enumeration' is not
    explicitly handled by a case label</name>
    <description><![CDATA[<p>
The enumerate has no associated handler in a switch statement.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/96f5t7fy.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/96f5t7fy.aspx</a></p>
]]>
    </description>
    <internalKey>C4061</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4062</key>
    <name>C4062: enumerator 'identifier' in switch of enum 'enumeration' is not
    handled</name>
    <description><![CDATA[<p>
The enumerate has no associated handler in a switch statement, and there is no default label.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/fdt9w8tf.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/fdt9w8tf.aspx</a></p>
]]>
    </description>
    <tag>bug</tag>
    <internalKey>C4062</internalKey>
    <severity>MAJOR</severity>
    <type>BUG</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4067</key>
    <name>C4067: unexpected tokens following preprocessor directive - expected a
    newline</name>
    <description><![CDATA[<p>
The compiler found and ignored extra characters following a preprocessor directive. This warning appears only under ANSI compatibility (/Za).
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/fdt9w8tf.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/fdt9w8tf.aspx</a></p>
]]>
    </description>
    <internalKey>C4067</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4073</key>
    <name>C4073: initializers put in library initialization area</name>
    <description><![CDATA[<p>
Only third-party library developers should use the library initialization area, which is specified by '#pragma init_seg'.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/c5c0a6es.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/c5c0a6es.aspx</a></p>
]]>
    </description>
    <internalKey>C4073</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4074</key>
    <name>C4074: initializers put in compiler reserved initialization area</name>
    <description><![CDATA[<p>
The compiler initialization area, which is specified by '#pragma init_seg', is reserved by Microsoft. Code in this area may be executed before initialization of the C run-time library.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/bsddh1ys.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/bsddh1ys.aspx</a></p>
]]>
    </description>
    <internalKey>C4074</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4079</key>
    <name>C4079: unexpected token 'token'</name>
    <description><![CDATA[<p>
An unexpected separator token occurs in a pragma argument list. The remainder of the pragma was ignored.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/sa6y3dd8.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/sa6y3dd8.aspx</a></p>
]]>
    </description>
    <internalKey>C4079</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4083</key>
    <name>C4083: expected 'token'; found identifier 'identifier'</name>
    <description><![CDATA[<p>
An identifier occurs in the wrong place in a #pragma statement.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/h75d190h.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/h75d190h.aspx</a></p>
]]>
    </description>
    <internalKey>C4083</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4088</key>
    <name>C4088: 'function' : pointer mismatch in actual parameter 'number',
    formal parameter 'number'</name>
    <description><![CDATA[<p>
The corresponding formal and actual parameters have a different level of indirection. The actual parameter is passed without change. The called function interprets its value as a pointer.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/y1wew2t6.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/y1wew2t6.aspx</a></p>
]]>
    </description>
    <internalKey>C4088</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4089</key>
    <name>C4089: 'function' : different types in actual parameter 'number',
    formal parameter 'number'</name>
    <description><![CDATA[<p>
The corresponding formal and actual parameters have different types. The actual parameter is passed without change. The function casts the actual parameter to the type specified in the fuction definition.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/es4e5d80.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/es4e5d80.aspx</a></p>
]]>
    </description>
    <internalKey>C4089</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4090</key>
    <name>C4090: 'operation' : different 'modifier' qualifiers</name>
    <description><![CDATA[<p>
A variable used in an operation is defined with a specified modifier that prevents it from being modified without detection by the compiler. The expression is compiled without modification.
This warning can be caused when a pointer to a const or volatile item is assigned to a pointer not declared as pointing to const or volatile.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/k77bkb8d.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/k77bkb8d.aspx</a></p>
]]>
    </description>
    <internalKey>C4090</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4091</key>
    <name>C4091: 'keyword' : ignored on left of 'type' when no variable is
    declared</name>
    <description><![CDATA[<p>
The compiler detected a situation where the user probably intended a variable to be declared, but the compiler was not able to declare the variable.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/eehkcz60.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/eehkcz60.aspx</a></p>
]]>
    </description>
    <internalKey>C4091</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4092</key>
    <name>C4092: sizeof returns 'unsigned long'</name>
    <description><![CDATA[<p>
The operand of the sizeof operator was very large, so sizeof returned an unsigned long. This warning occurs under the Microsoft extensions (/Ze). Under ANSI compatibility (/Za), the result is truncated instead.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/03hx019t.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/03hx019t.aspx</a></p>
]]>
    </description>
    <internalKey>C4092</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4094</key>
    <name>C4094: untagged 'token' declared no symbols</name>
    <description><![CDATA[<p>
The compiler detected an empty declaration using an untagged structure, union, or class. The declaration is ignored.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/7y0f9tby.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/7y0f9tby.aspx</a></p>
]]>
    </description>
    <internalKey>C4094</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4096</key>
    <name>C4096: 'a': interface is not a COM interface; will not be emitted to
    IDL</name>
    <description><![CDATA[<p>
An interface definition that you may have intended as a COM interface was not defined as a COM interface and therefore will not be emitted to the IDL file.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/e5kabat7.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/e5kabat7.aspx</a></p>
]]>
    </description>
    <internalKey>C4096</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4098</key>
    <name>C4098: 'function' : void function returning a value</name>
    <description><![CDATA[<p>
A function declared with return type void has a return statement that returns a value. The compiler assumes the function returns a value of type int.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/3zeyw5e0.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/3zeyw5e0.aspx</a></p>
]]>
    </description>
    <internalKey>C4098</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4099</key>
    <name>C4099: 'identifier' : type name first seen using 'objecttype1' now seen
    using 'objecttype2'</name>
    <description><![CDATA[<p>
An object declared as a structure is defined as a class, or an object declared as a class is defined as a structure. The compiler uses the type given in the definition.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/695x5bes.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/695x5bes.aspx</a></p>
]]>
    </description>
    <internalKey>C4099</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4100</key>
    <name>C4100: 'identifier' : unreferenced formal variable</name>
    <description><![CDATA[<p>
The formal parameter is not referenced in the body of the function. The unreferenced parameter is ignored.
C4100 can also be issued when code calls a destructor on a otherwise unreferenced parameter of primitive type.
This is a limitation of the Visual C++ compiler.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/26kb9fy0.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/26kb9fy0.aspx</a></p>
]]>
    </description>
    <internalKey>C4100</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4101</key>
    <name>C4101: 'identifier' : unreferenced local variable</name>
    <description><![CDATA[<p>
      The local variable is never used.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/c733d5h9.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/695x5bes.aspx</a></p>
]]>
    </description>
    <internalKey>C4101</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4103</key>
    <name>C4103: 'filename' : alignment changed after including header, may be due to missing #pragma pack(pop)</name>
    <description><![CDATA[<p>
Packing affects the layout of classes, and commonly, if packing changes across header files, there can be problems.
Use #pragma pack(pop) before exiting the header file to resolve this warning.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/t4d0762d.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/t4d0762d.aspx</a></p>
]]>
    </description>
    <internalKey>C4103</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4113</key>
    <name>C4113: 'identifier1' differs in parameter lists from 'identifier2'</name>
    <description><![CDATA[<p>
A function pointer is assigned to another function pointer, but the formal parameter lists of the functions do not agree. The assignment is compiled without modification.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/38xttckh.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/38xttckh.aspx</a></p>
]]>
    </description>
    <internalKey>C4113</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4114</key>
    <name>C4114: same type qualifier used more than once</name>
    <description><![CDATA[<p>
A type declaration or definition uses a type qualifier (const, volatile, signed, or unsigned) more than once.
This causes a warning with Microsoft extensions (/Ze) and an error under ANSI compatibility (/Za).
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/x9db2t0x.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/x9db2t0x.aspx</a></p>
]]>
    </description>
    <internalKey>C4114</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4116</key>
    <name>C4116: unnamed type definition in parentheses</name>
    <description><![CDATA[<p>
A structure, union, or enumerated type with no name is defined in a parenthetical expression. The type definition is meaningless.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/tx07a0tt.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/tx07a0tt.aspx</a></p>
]]>
    </description>
    <internalKey>C4116</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4121</key>
    <name>C4121: 'symbol' : alignment of a member was sensitive to packing</name>
    <description><![CDATA[<p>
The compiler added padding to align a structure member on the packing boundary but the packing value is less than the member's size.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/kabt0ka3.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/kabt0ka3.aspx</a></p>
]]>
    </description>
    <internalKey>C4121</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4124</key>
    <name>C4124: __fastcall with stack checking is inefficient</name>
    <description><![CDATA[<p>
The __fastcall convention generates faster code, but stack checking causes slower code. When using __fastcall, turn off stack checking with the check_stack pragma or /Gs.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/1txs3kya.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/1txs3kya.aspx</a></p>
]]>
    </description>
    <internalKey>C4124</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4127</key>
    <name>C4127: conditional expression is constant</name>
    <description><![CDATA[<p>
The controlling expression of an if statement or while loop evaluates to a constant. If the controlling expression of a while loop is a constant because the loop will exit in the middle, consider replacing the while loop with a for loop. You can omit the initialization, termination test and loop increment of a for loop, which causes the loop to be infinite (like while(1)) and you can exit the loop from the body of the for statement.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/6t66728h(v=vs.90).aspx" target="_blank">https://msdn.microsoft.com/en-us/library/6t66728h(v=vs.90).aspx</a></p>
]]>
    </description>
    <internalKey>C4127</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4129</key>
    <name>C4129: 'character' : unrecognized character escape sequence</name>
    <description><![CDATA[<p>
The character following a backslash (\) in a character or string constant is not recognized as a valid escape sequence. The backslash is ignored and not printed. The character following the backslash is printed.  To print a single backslash, specify a double backslash (\\).
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/ew69e79d.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/ew69e79d.aspx</a></p>
]]>
    </description>
    <internalKey>C4129</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4130</key>
    <name>C4130: 'operator' : logical operation on address of string constant</name>
    <description><![CDATA[<p>
Using the operator with the address of a string literal produces unexpected code.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/bc0sw9c6.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/bc0sw9c6.aspx</a></p>
]]>
    </description>
    <internalKey>C4130</internalKey>
    <severity>MAJOR</severity>
    <type>BUG</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>  
  <rule>
    <key>C4133</key>
    <name>C4133: 'type' : incompatible types - from 'type1' to 'type2'</name>
    <description><![CDATA[<p>
This Can be caused by trying to subtract two pointers of different types.  To avoid this warning, provide an appropriate type cast.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/h1k71tf0.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/h1k71tf0.aspx</a></p>
]]>
    </description>
    <tag>bug</tag>
    <internalKey>C4133</internalKey>
    <severity>MAJOR</severity>
    <type>BUG</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4138</key>
    <name>C4138: '*/' found outside of comment</name>
    <description><![CDATA[<p>
The closing-comment delimiter is not preceded by an opening-comment delimiter. The compiler assumes a space between the asterisk (*) and the forward slash (/).
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/aa733826.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/aa733826.aspx</a></p>
]]>
    </description>  
    <tag>bug</tag>
    <internalKey>C4138</internalKey>
    <severity>MAJOR</severity>
    <type>BUG</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4142</key>
    <name>C4142: benign redefinition of type</name>
    <description><![CDATA[<p>
A type is redefined in a manner that has no effect on the generated code.  To fix by checking the following possible causes: 
- A member function of a derived class has a different return type from the corresponding member function of the base class.
- A type defined with the typedef command is redefined using different syntax.
 </p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/cbs8z6wh.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/cbs8z6wh.aspx</a></p>
]]>
    </description>
    <internalKey>C4142</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4144</key>
    <name>C4144: 'expression' : relational expression as switch expression</name>
    <description><![CDATA[<p>
The specified relational expression was used as the control expression of a switch statement. The associated case statements will be offered Boolean values.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/1xaa803a.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/1xaa803a.aspx</a></p>
]]>
    </description>
    <internalKey>C4144</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4146</key>
    <name>C4146: unary minus operator applied to unsigned type, result still unsigned</name>
    <description><![CDATA[<p>
Unsigned types can hold only non-negative values, so unary minus (negation) does not usually make sense when applied to an unsigned type. Both the operand and the result are non-negative.  You can avoid C4146 by using INT_MIN from limits.h, which has the type signed int.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/4kh09110.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/4kh09110.aspx</a></p>
]]>
    </description>
    <internalKey>C4146</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4150</key>
    <name>C4150: deletion of pointer to incomplete type 'type'; no destructor called</name>
    <description><![CDATA[<p>
The delete operator is called to delete a type that was declared but not defined, so the compiler cannot find a destructor.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/ba5dy3f2.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/ba5dy3f2.aspx</a></p>
]]>
    </description>
    <internalKey>C4150</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4154</key>
    <name>C4154: deletion of an array expression; conversion to pointer supplied</name>
    <description><![CDATA[<p>
You cannot use delete on an array, so the compiler converts the array to a pointer.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/f7h7y2d3.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/f7h7y2d3.aspx</a></p>
]]>
    </description>
    <internalKey>C4154</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4156</key>
    <name>C4156: deletion of an array expression without using the array form of 'delete'; array form substituted</name>
    <description><![CDATA[<p>
The non-array form of delete cannot delete an array. The compiler translated delete to the array form.
This warning occurs only under Microsoft extensions (/Ze).
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/h0d7122c.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/h0d7122c.aspx</a></p>
]]>
    </description>
    <internalKey>C4156</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4157</key>
    <name>C4157: pragma was ignored by C compiler</name>
    <description><![CDATA[<p>
Only the C++ compiler recognizes init_seg().
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/1f3haah1.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/1f3haah1.aspx</a></p>
]]>
    </description>
    <internalKey>C4157</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4159</key>
    <name>C4159: #pragma pragma(pop,...) : has popped previously pushed identifier 'identifier'</name>
    <description><![CDATA[<p>
Your source code contains a push instruction with an identifier for a pragma followed by a pop instruction without an identifier. As a result, identifier is popped, and subsequent uses of identifier may cause unexpected behavior.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/c9h6as54.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/c9h6as54.aspx</a></p>
]]>
    </description>
    <internalKey>C4159</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4162</key>
    <name>C4162: 'identifier' : no function with C linkage found</name>
    <description><![CDATA[<p>
A function with C linkage is declared but cannot be found. To resolve this warning, compile in a .c file (invoke the C compiler). If you must invoke the C++ compiler, place extern "C" before the function declaration.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/sk4wxk3t.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/sk4wxk3t.aspx</a></p>
]]>
    </description>
    <internalKey>C4162</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4172</key>
    <name>C4172: returning address of local variable or temporary</name>
    <description><![CDATA[<p>
A function returns the address of a local variable or temporary object. Local variables and temporary objects are destroyed when a function returns, so the address returned is not valid. Redesign the function so that it does not return the address of a local object.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/d0ws2xs1.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/d0ws2xs1.aspx</a></p>
]]>
    </description>
    <tag>bug</tag>
    <internalKey>C4172</internalKey>
    <severity>MAJOR</severity>
    <type>BUG</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4183</key>
    <name>C4183: 'identifier': missing return type; assumed to be a member function returning 'int'</name>
    <description><![CDATA[<p>
The inline definition of a member function in a class or a structure does not have a return type. This member function is assumed to have a default return type of int.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/fbh59y2h.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/fbh59y2h.aspx</a></p>
]]>
    </description>
    <internalKey>C4183</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4189</key>
    <name>C4189: 'identifier' : local variable is initialized but not referenced</name>
    <description><![CDATA[<p>
A variable is declared and initialized but not used.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/aa734018.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/aa734018.aspx</a></p>
]]>
    </description>
    <internalKey>C4189</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4190</key>
    <name>C4190: 'identifier1' has C-linkage specified, but returns UDT 'identifier2' which is incompatible with C</name>
    <description><![CDATA[<p>
A function or pointer to function has a UDT (user-defined type, which is a class, structure, enum, union, or __value type) as return type and extern "C" linkage. This is legal if:
- All calls to this function occur from C++.
- The definition of the function is in C++.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/aa734013.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/aa734013.aspx</a></p>
]]>
    </description>
    <internalKey>C4190</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4191</key>
    <name>C4191: 'operator/operation' : unsafe conversion from 'type of expression' to 'type required'</name>
    <description><![CDATA[
<p>Several operations involving function pointers are considered unsafe: 
</p><ul>
<li>Function types with different calling conventions.</li>
<li>Function types with different return conventions.</li>
<li>Argument or return types with different sizes, type categories, or classifications.</li>
<li>Differing argument list lengths (on <i><b>__cdecl</b></i>, only on cast from longer list to shorter list, even if shorter is varargs).</li>
<li>Pointer to data (other than <i><b>void*</b></i>) aliased against a pointer to function.</li>
<li>Any other type difference that would yield an error or warning on a <i><b>reinterpret_cast</b></i>.</li>
</ul>
<p>Calling this function through the result pointer might cause your program to crash.</p>
<h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/aa734013.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/aa734013.aspx</a></p>
]]>
    </description>
    <internalKey>C4191</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4192</key>
    <name>C4192: automatically excluding 'name' while importing type library 'library'</name>
    <description><![CDATA[<p>
      A #import library contains an item, name, that is also defined in the Win32 system headers. Due to limitations of type libraries, names such as IUnknown or GUID are often defined in a type library, duplicating the definition from the system headers. #import will detect these items and refuse to incorporate them in the .tlh and .tli header files.
      To override this behavior, use #import attributes no_auto_exclude and include().
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/aa734014.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/aa734014.aspx</a></p>
]]>
    </description>
    <internalKey>C4192</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4197</key>
    <name>C4197: 'type' : top-level volatile in cast is ignored</name>
    <description><![CDATA[<p>
      The compiler detected a cast to an r-value type which is qualified with volatile, or a cast of an r-value type to some type that is qualified with volatile. According to the C standard (6.5.3), properties associated with qualified types are meaningful only for l-value expressions.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/ydet06y0.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/ydet06y0.aspx</a></p>
]]>
    </description>
    <internalKey>C4197</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4200</key>
    <name>C4200: nonstandard extension used : zero-sized array in struct/union</name>
    <description><![CDATA[<p>
A structure or union contains an array with zero size. Level-2 warning when compiling a C++ file and a Level-4 warning when compiling a C file.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/aa233835.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/aa233835.aspx</a></p>
]]>
    </description>
    <internalKey>C4200</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4201</key>
    <name>C4201: nonstandard extension used : nameless struct/union</name>
    <description><![CDATA[<p>
      Under Microsoft extensions (/Ze), you can specify a structure without a declarator as members of another structure or union. These structures generate an error under ANSI compatibility (/Za).
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/aa233836.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/aa233836.aspx</a></p>
]]>
    </description>
    <internalKey>C4201</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4202</key>
    <name>C4202: nonstandard extension used : '...': prototype parameter in name list illegal</name>
    <description><![CDATA[<p>
An old-style function definition contains variable arguments. These definitions generate an error under ANSI compatibility (/Za).
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/9yzc6y3b.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/9yzc6y3b.aspx</a></p>
]]>
    </description>
    <internalKey>C4202</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4203</key>
    <name>C4203: nonstandard extension used : union with static member variable</name>
    <description><![CDATA[<p>
      Static union members are valid using Microsoft extensions (/Ze). Such members are invalid in the ANSI standard (/Za). Conforming to the ANSI standard ensures more portable programs.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/yax3f30x.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/yax3f30x.aspx</a></p>
]]>
    </description>
    <internalKey>C4203</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4204</key>
    <name>C4204: nonstandard extension used : non-constant aggregate initializer</name>
    <description><![CDATA[<p>
With Microsoft extensions (/Ze), you can initialize aggregate types (arrays, structures, unions, and classes) with values that are not constants.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/6b73z23c.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/6b73z23c.aspx</a></p>
]]>
    </description>
    <internalKey>C4204</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4205</key>
    <name>C4205: nonstandard extension used : static function declaration in function scope</name>
    <description><![CDATA[<p>
With Microsoft extensions (/Ze), static functions can be declared inside another function. The function is given global scope.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/7a94ekhs.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/7a94ekhs.aspx</a></p>
]]>
    </description>
    <internalKey>C4205</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4206</key>
    <name>C4206: nonstandard extension used : translation unit is empty</name>
    <description><![CDATA[<p>
The file was empty after preprocessing. This extension can prevent your code from being portable to other compilers. It generates an error under ANSI compatibility (/Za) and only applies to C source code.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/2xz1ww4k.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/2xz1ww4k.aspx</a></p>
]]>
    </description>
    <internalKey>C4206</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4207</key>
    <name>C4207: nonstandard extension used : extended initializer form</name>
    <description><![CDATA[<p>
With Microsoft extensions (/Ze), you can initialize an unsized array of char using a string within braces.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/h40wte08.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/h40wte08.aspx</a></p>
]]>
    </description>
    <internalKey>C4207</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4208</key>
    <name>C4208: nonstandard extension used : delete [exp] - exp evaluated but ignored</name>
    <description><![CDATA[<p>
With Microsoft extensions (/Ze), you can delete an array using a value within brackets with the delete operator. The value is ignored.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/x9z4waxa.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/x9z4waxa.aspx</a></p>
]]>
    </description>
    <internalKey>C4208</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4210</key>
    <name>C4210: nonstandard extension used : function given file scope</name>
    <description><![CDATA[<p>
With the default Microsoft extensions (/Ze), function declarations have file scope.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/d8fs65w0.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/d8fs65w0.aspx</a></p>
]]>
    </description>
    <internalKey>C4210</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4211</key>
    <name>C4211: nonstandard extension used : redefined extern to static</name>
    <description><![CDATA[<p>
With the default Microsoft extensions (/Ze), you can redefine an extern identifier as static.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/88zaxt6c.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/88zaxt6c.aspx</a></p>
]]>
    </description>
    <internalKey>C4211</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4212</key>
    <name>C4212: nonstandard extension used : function declaration used ellipsis</name>
    <description><![CDATA[<p>
The function prototype has a variable number of arguments. The function definition does not.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/z4cahb0t.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/z4cahb0t.aspx</a></p>
]]>
    </description>
    <internalKey>C4212</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4213</key>
    <name>C4213: nonstandard extension used : cast on l-value</name>
    <description><![CDATA[<p>
With the default Microsoft extensions (/Ze), you can use casts on the left side of an assignment statement.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/yshyhfby.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/yshyhfby.aspx</a></p>
]]>
    </description>
    <internalKey>C4213</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4214</key>
    <name>C4214: nonstandard extension used : bit field types other than int</name>
    <description><![CDATA[<p>
With the default Microsoft extensions (/Ze), bitfield structure members can be of any integer type.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/k7ea7ce7.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/k7ea7ce7.aspx</a></p>
]]>
    </description>
    <internalKey>C4214</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4215</key>
    <name>C4215: nonstandard extension used : long float</name>
    <description><![CDATA[<p>
The default Microsoft extensions (/Ze) treat long float as double. ANSI compatibility (/Za) does not. Use double to maintain compatibility.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/00yasssw.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/00yasssw.aspx</a></p>
]]>
    </description>
    <internalKey>C4215</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4216</key>
    <name>C4216: nonstandard extension used : float long</name>
    <description><![CDATA[<p>
The default Microsoft extensions (/Ze) treat float long as double. ANSI compatibility (/Za) does not. Use double to maintain compatibility.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/477k4w1s.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/477k4w1s.aspx</a></p>
]]>
    </description>
    <internalKey>C4216</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4218</key>
    <name>C4218: nonstandard extension used : must specify at least a storage class or a type</name>
    <description><![CDATA[<p>
With the default Microsoft extensions (/Ze), you can declare a variable without specifying a type or storage class. The default type is int.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/2xye9y6s.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/2xye9y6s.aspx</a></p>
]]>
    </description>
    <internalKey>C4218</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4220</key>
    <name>C4220: varargs matches remaining parameters</name>
    <description><![CDATA[<p>
Under the default Microsoft extensions (/Ze), a pointer to a function matches a pointer to a function with similar, but variable, arguments
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/901aefh7.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/901aefh7.aspx</a></p>
]]>
    </description>
    <internalKey>C4220</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4221</key>
    <name>C4221: nonstandard extension used : 'identifier' : cannot be initialized using address of automatic variable</name>
    <description><![CDATA[<p>
With the default Microsoft extensions (/Ze), you can initialize an aggregate type (array, struct, or union) with the address of a local (automatic) variable.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/d2719049.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/d2719049.aspx</a></p>
]]>
    </description>
    <internalKey>C4221</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4223</key>
    <name>C4223: nonstandard extension used : non-lvalue array converted to pointer</name>
    <description><![CDATA[<p>
In standard C, you cannot convert a non-lvalue array to a pointer. With the default Microsoft extensions (/Ze), you can.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/81f5xs47.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/81f5xs47.aspx</a></p>
]]>
    </description>
    <internalKey>C4223</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4224</key>
    <name>C4224: nonstandard extension used : formal parameter 'identifier' was previously defined as a type</name>
    <description><![CDATA[<p>
The identifier was previously used as a typedef. This causes a warning under ANSI compatibility (/Za).
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/wh722488.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/wh722488.aspx</a></p>
]]>
    </description>
    <internalKey>C4224</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4226</key>
    <name>C4226: nonstandard extension used : 'keyword' is an obsolete keyword</name>
    <description><![CDATA[<p>
The current version of Visual C++ does not use this keyword.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/7585wc3f.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/7585wc3f.aspx</a></p>
]]>
    </description>
    <internalKey>C4226</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4227</key>
    <name>C4227: anachronism used : qualifiers on reference are ignored</name>
    <description><![CDATA[<p>
Using qualifiers like const or volatile with C++ references is an outdated practice.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/ydx93b5s.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/ydx93b5s.aspx</a></p>
]]>
    </description>
    <internalKey>C4227</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4228</key>
    <name>C4228: nonstandard extension used : qualifiers after comma in declarator list are ignored</name>
    <description><![CDATA[<p>
Use of qualifiers like const or volatile after a comma when declaring variables is a Microsoft extension (/Ze).
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/c5886yty.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/c5886yty.aspx</a></p>
]]>
    </description>
    <internalKey>C4228</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4229</key>
    <name>C4229: anachronism used : modifiers on data are ignored</name>
    <description><![CDATA[<p>
Using a Microsoft modifier such as __cdecl on a data declaration is an outdated practice.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/b64e3yk3.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/b64e3yk3.aspx</a></p>
]]>
    </description>
    <internalKey>C4229</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4230</key>
    <name>C4230: anachronism used : modifiers/qualifiers interspersed; qualifier ignored</name>
    <description><![CDATA[<p>
Using a qualifier before a Microsoft modifier such as __cdecl is an outdated practice.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/ytxde1x7.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/ytxde1x7.aspx</a></p>
]]>
    </description>
    <internalKey>C4230</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4231</key>
    <name>C4231: nonstandard extension used : 'identifier' before template explicit instantiation</name>
    <description><![CDATA[<p>
When Microsoft extensions are enabled (/Ze), an extern template can be instantiated, generating this warning. Under ANSI compatibility (/Za), such instantiations cause an error.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/9d0x3403.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/9d0x3403.aspx</a></p>
]]>
    </description>
    <internalKey>C4231</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4232</key>
    <name>C4232: nonstandard extension used : 'identifier' : address of dllimport 'dllimport' is not static, identity not guaranteed</name>
    <description><![CDATA[<p>
Under Microsoft extensions (/Ze), you can give a nonstatic value as the address of a function declared with the dllimport modifier. Under ANSI compatibility (/Za), this causes an error.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/9a1sy630.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/9a1sy630.aspx</a></p>
]]>
    </description>
    <internalKey>C4232</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4233</key>
    <name>C4233: nonstandard extension used : 'keyword' keyword only supported in C++, not C</name>
    <description><![CDATA[<p>
The compiler compiled your source code as C rather than C++, and you used a keyword that is only valid in C++. The compiler compiles your source file as C if the extension of the source file is .c or you use /Tc.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/7ebe1389.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/7ebe1389.aspx</a></p>
]]>
    </description>
    <internalKey>C4233</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4234</key>
    <name>C4234: nonstandard extension used: 'keyword' keyword reserved for future use</name>
    <description><![CDATA[<p>
The compiler does not yet implement the keyword you used.
This warning is automatically promoted to an error. If you wish to modify this behavior, use #pragma warning.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/6zz25ez2.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/6zz25ez2.aspx</a></p>
]]>
    </description>
    <internalKey>C4234</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4235</key>
    <name>C4235: nonstandard extension used : 'keyword' keyword not supported on this architecture</name>
    <description><![CDATA[<p>
The compiler does not support the keyword you used.
For example, the _asm keyword is not supported for the Itanium Processor Family (IPF) compiler. All assembly code must be written in a separate file or should be used through an intrinsic. See Intrinsics Available on Intel 64-bit Platforms for more information.
This warning is automatically promoted to an error. If you wish to modify this behavior, use #pragma warning.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/7e5yy2kb.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/7e5yy2kb.aspx</a></p>
]]>
    </description>
    <internalKey>C4235</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4237</key>
    <name>C4237: 'keyword' keyword is not yet supported, but reserved for future use</name>
    <description><![CDATA[<p>
A keyword in the C++ specification is not implemented in the Visual C++ compiler, but the keyword is not available as a user-defined symbol.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/4k7984d7.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/4k7984d7.aspx</a></p>
]]>
    </description>
    <internalKey>C4237</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4238</key>
    <internalKey>C4238</internalKey>
    <severity>MAJOR</severity>
    <name>C4238: nonstandard extension used : class rvalue used as lvalue</name>
    <description><![CDATA[<p>
For compatibility with previous versions of Visual C++, Microsoft extensions (/Ze) allow you to use a class type as an rvalue in a context that implicitly or explicitly takes its address. In some cases, such as the example below, this can be dangerous.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/7zyb9yb4.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/7zyb9yb4.aspx</a></p>
]]>
    </description>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4239</key>
    <name>C4239: nonstandard extension used : 'token' : conversion from 'type' to 'type'</name>
    <description><![CDATA[<p>
This type conversion is not allowed by the C++ standard, but it is permitted here as an extension. This warning is always followed by at least one line of explanation describing the language rule being violated.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/186yxbac.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/186yxbac.aspx</a></p>
]]>
    </description>
    <internalKey>C4239</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4240</key>
    <name>C4240: nonstandard extension used : access to 'classname' now defined to be 'access specifier', previously it was defined to be 'access specifier'</name>
    <description><![CDATA[<p>
Under ANSI compatibility (/Za), you cannot change the access to a nested class. Under the default Microsoft extensions (/Ze), you can, with this warning.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/h2kd22yx.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/h2kd22yx.aspx</a></p>
]]>
    </description>
    <internalKey>C4240</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4242</key>
    <name>C4242: 'identifier' : conversion from 'type1' to 'type2', possible loss of data</name>
    <description><![CDATA[<p>
The types are different. Type conversion may result in loss of data. The compiler makes the type conversion.
This warning is off by default. See Compiler Warnings That Are Off by Default for more information.
For additional information on C4242, see Common Compiler Errors.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/3hca13eh.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/3hca13eh.aspx</a></p>
]]>
    </description>
    <internalKey>C4242</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4243</key>
    <name>C4243: 'conversion type' conversion exists from 'type1' to 'type2', but is inaccessible</name>
    <description><![CDATA[<p>
A pointer to a derived class is converted to a pointer to a base class, but the derived class inherits the base class with private or protected access.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/faaf67cx.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/faaf67cx.aspx</a></p>
]]>
    </description>
    <tag>bug</tag>
    <internalKey>C4243</internalKey>
    <severity>MAJOR</severity>
    <type>BUG</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4244</key>
    <name>C4244: 'argument' : conversion from 'type1' to 'type2', possible loss of data</name>
    <description><![CDATA[<p>
(/W2)A floating point type was converted to an integer type. A possible loss of data may have occurred.
If you get C4244, you should either change your program to use compatible types, or add some logic to your code, to ensure that the range of possible values will always be compatible with the types you are using.
(/W3, /W4) An integer type is converted to a smaller integer type. This is a level-4 warning if type1 is int and type2 is smaller than int. Otherwise, it is a level 3 (assigned a value of type __int64 to a variable of type unsigned int). A possible loss of data may have occurred.
If you get C4244, you should either change your program to use compatible types, or add some logic to your code, to ensure that the range of possible values will always be compatible with the types you are using.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/th7a07tz.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/th7a07tz.aspx</a></p>
]]>
    </description>
    <internalKey>C4244</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4245</key>
    <name>C4245: 'conversion' : conversion from 'type1' to 'type2', signed/unsigned mismatch</name>
    <description><![CDATA[<p>
You tried to convert a signed const that has a negative value to an unsigned.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/e9s7thk1.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/e9s7thk1.aspx</a></p>
]]>
    </description>
    <tag>bug</tag>
    <internalKey>C4245</internalKey>
    <severity>MAJOR</severity>
    <type>BUG</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4250</key>
    <name>C4250: 'class1' : inherits 'class2::member' via dominance</name>
    <description><![CDATA[<p>
      Two or more members have the same name. The one in class2 is inherited because it is a base class for the other classes that contained this member.
      To suppress C4250, use the warning pragma.
      Because a virtual base class is shared among multiple derived classes, a name in a derived class dominates a name in a base class. For example, given the following class hierarchy, there are two definitions of func inherited within diamond: the vbc::func() instance through the weak class, and the dominant::func() through the dominant class. An unqualified call of func() through a diamond class object, always calls the dominate::func() instance. If the weak class were to introduce an instance of func(), neither definition would dominate, and the call would be flagged as ambiguous.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/6b3sy7ae.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/6b3sy7ae.aspx</a></p>
]]>
    </description>
    <internalKey>C4250</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4251</key>
    <name>C4251: 'identifier' : class 'type' needs to have dll-interface to be used by clients of class 'type2'</name>
    <description><![CDATA[<p>
To minimize the possibility of data corruption when exporting a class with __declspec(dllexport), ensure that:
- All your static data is access through functions that are exported from the DLL.
- No inlined methods of your class can modify static data.
- No inlined methods of your class use CRT functions or other library functions use static data (see Potential Errors Passing CRT Objects Across DLL Boundaries for more information).
- No methods of your class (regardless of inlining) can use types where the instantiation in the EXE and DLL have static data differences.
You can avoid exporting classes by defining a DLL that defines a class with virtual functions, and functions you can call to instantiate and delete objects of the type. You can then just call virtual functions on the type.
C4251 can be ignored if you are deriving from a type in the Standard C++ Library, compiling a debug release (/MTd) and where the compiler error message refers to _Container_base.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/esew7y1w.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/esew7y1w.aspx</a></p>
]]>
    </description>
    <internalKey>C4251</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4254</key>
    <name>C4254: 'operator' : conversion from 'type1' to 'type2', possible loss of data</name>
    <description><![CDATA[<p>
A larger bit field was assigned to a smaller bit field. There could be a loss of data.
This warning is off by default. See Compiler Warnings That Are Off by Default for more information.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/3fbf7w04.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/3fbf7w04.aspx</a></p>
]]>
    </description>
    <internalKey>C4254</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4255</key>
    <name>C4255: 'function' : no function prototype given: converting '()' to '(void)'</name>
    <description><![CDATA[<p>
The compiler did not find an explicit list of arguments to a function. This warning is for the C compiler only.
This warning is off by default. See Compiler Warnings That Are Off by Default for more information.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/0k9z2ey4.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/0k9z2ey4.aspx</a></p>
]]>
    </description>
    <internalKey>C4255</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4256</key>
    <name>C4256: 'function' : constructor for class with virtual bases has '...'; calls may not be compatible with older versions of Visual C++</name>
    <description><![CDATA[<p>
Possible incompatibility.
Consider the following code example. If the definition of the constructor S2::S2( int i, ... ) was compiled by using a version of the Visual C++ compiler before version 7, but the following example is compiled by using the current version, the call to the constructor for S3 would not work correctly because of a special-case calling-convention change. If both were compiled by using Visual C++ 6.0, the call would not work quite right either, unless no parameters were passed for the ellipsis.
To fix this warning,
- Don't use ellipsis in a constructor.
- Make sure that all components in their project are built with the current version (including any libraries that may define or reference this class), then disable the warning using the warning pragma.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/ex7xa0zs.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/ex7xa0zs.aspx</a></p>
]]>
    </description>
    <internalKey>C4256</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4258</key>
    <name>C4258: 'variable' : definition from the for loop is ignored; the definition from the enclosing scope is used"</name>
    <description><![CDATA[<p>
Under /Ze and /Zc:forScope, variables defined in a for loop go out of scope after the for loop ends. This warning occurs if a variable with the same name as the loop variable, but defined in the enclosing loop, is used again in the scope containing the for loop.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/0hx5ckb0.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/0hx5ckb0.aspx</a></p>
]]>
    </description>
    <internalKey>C4258</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4263</key>
    <name>C4263: 'function' : member function does not override any base class virtual member function</name>
    <description><![CDATA[<p>
A class function definition has the same name as a virtual function in a base class but not the same number or type of arguments. This effectively hides the virtual function in the base class.
This warning is off by default. See Compiler Warnings That Are Off by Default for more information.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/ay4h0tc9.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/ay4h0tc9.aspx</a></p>
]]>
    </description>
    <internalKey>C4263</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4264</key>
    <name>C4264: 'virtual_function' : no override available for virtual member function from base 'class'; function is hidden</name>
    <description><![CDATA[<p>
C4264 is always generated after C4263.
This warning is off by default. See Compiler Warnings That Are Off by Default for more information.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/tb55b5f4.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/tb55b5f4.aspx</a></p>
]]>
    </description>
    <internalKey>C4264</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4265</key>
    <name>C4265: 'class' : class has virtual functions, but destructor is not virtual</name>
    <description><![CDATA[<p>
When a class has virtual functions but a nonvirtual destructor, objects of the type might not be destroyed properly when the class is destroyed through a base class pointer.
This warning is off by default. See Compiler Warnings That Are Off by Default for more information.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/wzxffy8c.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/wzxffy8c.aspx</a></p>
]]>
    </description>
    <internalKey>C4265</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4266</key>
    <name>C4266: 'function' : no override available for virtual member function from base 'type'; function is hidden</name>
    <description><![CDATA[<p>
A derived class did not override all overloads of a virtual function.
This warning is off by default. See Compiler Warnings That Are Off by Default for more information.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/4b76ty10.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/4b76ty10.aspx</a></p>
]]>
    </description>
    <internalKey>C4266</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4267</key>
    <name>C4267: 'var' : conversion from 'size_t' to 'type', possible loss of data</name>
    <description><![CDATA[<p>
When compiling with /Wp64, or when compiling on a 64-bit operating system, type is 32 bits but size_t is 64 bits when compiling for 64-bit targets.
To fix this warning, use size_tinstead of a type.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/6kck0s93.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/6kck0s93.aspx</a></p>
]]>
    </description>
    <internalKey>C4267</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4268</key>
    <name>C4268: 'identifier' : 'const' static/global data initialized with compiler generated default constructor fills the object with zeros</name>
    <description><![CDATA[<p>
A const global or static instance of a non-trivial class is initialized with a compiler-generated default constructor.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/y806ax56.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/y806ax56.aspx</a></p>
]]>
    </description>
    <internalKey>C4268</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4269</key>
    <name>C4269: 'identifier' : 'const' automatic data initialized with compiler generated default constructor produces unreliable results</name>
    <description><![CDATA[<p>
A const automatic instance of a non-trivial class is initialized with a compiler-generated default constructor.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/424ea098.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/424ea098.aspx</a></p>
]]>
    </description>
    <internalKey>C4269</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4272</key>
    <name>C4272: 'function' : is marked __declspec(dllimport); must specify native calling convention when importing a function</name>
    <description><![CDATA[<p>
It is an error to export a function marked with the __clrcall calling convention, and the compiler issues this warning if you attempt to import a function marked __clrcall.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/s5k2h2fa.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/s5k2h2fa.aspx</a></p>
]]>
    </description>
    <internalKey>C4272</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4273</key>
    <name>C4273: 'function' : inconsistent DLL linkage</name>
    <description><![CDATA[<p>
Two definitions in a file differ in their use of dllimport.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/35bhkfb6.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/35bhkfb6.aspx</a></p>
]]>
    </description>
    <internalKey>C4273</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4275</key>
    <name>C4275: non ‚Äì DLL-interface classkey 'identifier' used as base for DLL-interface classkey 'identifier'</name>
    <description><![CDATA[<p>
An exported class was derived from a class that was not exported.
To minimize the possibility of data corruption when exporting a class with __declspec(dllexport), ensure that:
- All your static data is accessed through functions that are exported from the DLL.
- No inlined methods of your class can modify static data.
- No inlined methods of your class use CRT functions or other library functions use static data.
- No inlined class functions use CRT functions, or other library functions, where, for example, you access static data.
- No methods of your class (regardless of inlining) can use types where the instantiation in the EXE and DLL have static data differences.
You can avoid exporting classes by defining a DLL that defines a class with virtual functions, and functions you can call to instantiate and delete objects of the type. You can then just call virtual functions on the type.
C4275 can be ignored in Visual C++ if you are deriving from a type in the Standard C++ Library, compiling a debug release (/MTd) and where the compiler error message refers to _Container_base.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/3tdb471s.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/3tdb471s.aspx</a></p>
]]>
    </description>
    <internalKey>C4275</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4276</key>
    <name>C4276: 'function' : no prototype provided; assumed no parameters</name>
    <description><![CDATA[<p>
When you take the address of a function with the __stdcall calling convention, you must give a prototype so the compiler can create the function's decorated name. Since function has no prototype, the compiler, when creating the decorated name, assumes the function has no parameters.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/48xa779y.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/48xa779y.aspx</a></p>
]]>
    </description>
    <internalKey>C4276</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4278</key>
    <name>C4278: 'identifier': identifier in type library 'tlb' is already a macro; use the 'rename' qualifier</name>
    <description><![CDATA[<p>
When using #import, an identifier in the typelib you are importing is attempting to declare an identifier identifier. However, this is already a valid symbol.
Use the #import rename attribute to assign an alias to the symbol in the type library.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/eszd7edh.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/eszd7edh.aspx</a></p>
]]>
    </description>
    <internalKey>C4278</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4280</key>
    <name>C4280: 'operator ‚Äì>' was self recursive through type 'type'</name>
    <description><![CDATA[<p>
Your code incorrectly allows operator‚Äì> to call itself.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/fxhxzbw8.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/fxhxzbw8.aspx</a></p>
]]>
    </description>
    <internalKey>C4280</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4281</key>
    <name>C4281: 'operator ‚Äì>' recursion occurred through type 'type'</name>
    <description><![CDATA[<p>
Your code allows operator‚Äì> to call itself.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/73z06dez.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/73z06dez.aspx</a></p>
]]>
    </description>
    <internalKey>C4281</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4282</key>
    <name>C4282: then through type 'type'</name>
    <description><![CDATA[<p>
This continuation of C4281 shows that operator‚Äì> calls itself through type.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/3sbz4h80.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/3sbz4h80.aspx</a></p>
]]>
    </description>
    <internalKey>C4282</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4283</key>
    <name>C4283: and through type 'type'</name>
    <description><![CDATA[<p>
This continuation of C4281 shows that operator‚Äì> calls itself through type.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/tf0c15s7.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/tf0c15s7.aspx</a></p>
]]>
    </description>
    <internalKey>C4283</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4285</key>
    <name>C4285: return type for 'identifier::operator ‚Äì>' is recursive if applied using infix notation</name>
    <description><![CDATA[<p>
The specified operator‚Äì>() function cannot return the type for which it is defined or a reference to the type for which it is defined.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/e9e8hhdb.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/e9e8hhdb.aspx</a></p>
]]>
    </description>
    <internalKey>C4285</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4286</key>
    <name>C4286: 'type1' : is caught by base class ('type2') on line number</name>
    <description><![CDATA[<p>
The specified exception type is handled by a previous handler. The type for the second catch is derived from the type of the first. Exceptions for a base class catch exceptions for a derived class.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/z9ta10a8.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/z9ta10a8.aspx</a></p>
]]>
    </description>
    <internalKey>C4286</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4287</key>
    <name>C4287: 'operator' : unsigned/negative constant mismatch</name>
    <description><![CDATA[<p>
An unsigned variable was used in an operation with a negative number.
This warning is off by default. See Compiler Warnings That Are Off by Default for more information.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/33s0was4.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/33s0was4.aspx</a></p>
]]>
    </description>
    <internalKey>C4287</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4288</key>
    <name>C4288: nonstandard extension used : 'var' : loop control variable declared in the for-loop is used outside the for-loop scope; it conflicts with the declaration in the outer scope</name>
    <description><![CDATA[<p>
When compiling with /Ze and /Zc:forscope-, a variable declared in a for loop was used after the for-loop scope. A Microsoft extension to the C++ language allows this variable to remain in scope, and C4288 reminds you that the first declaration of the variable is not used.
See /Zc:forScope for information about how to specify the Microsoft extension in for loops with /Ze.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/bk5hc10s.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/bk5hc10s.aspx</a></p>
]]>
    </description>
    <internalKey>C4288</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4289</key>
    <name>C4289: nonstandard extension used : 'var' : loop control variable declared in the for-loop is used outside the for-loop scope</name>
    <description><![CDATA[<p>
When compiling with /Ze and /Zc:forScope-, a variable declared in a for loop was used after the for-loop scope.
See /Zc:forScope for information about how to specify standard behavior in for loops with /Ze.
This warning is off by default. See Compiler Warnings That Are Off by Default for more information.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/06d758c0.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/06d758c0.aspx</a></p>
]]>
    </description>
    <internalKey>C4289</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4290</key>
    <name>C4290: C++ exception specification ignored except to indicate a function is not __declspec(nothrow)</name>
    <description><![CDATA[<p>
A function is declared using exception specification, which Visual C++ accepts but does not implement. Code with exception specifications that are ignored during compilation may need to be recompiled and linked to be reused in future versions supporting exception specifications.
For more information, see Exception Specifications.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/sa28fef8.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/sa28fef8.aspx</a></p>
]]>
    </description>
    <internalKey>C4290</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4291</key>
    <name>C4291: 'declaration' : no matching operator delete found; memory will not be freed if initialization throws an exception</name>
    <description><![CDATA[<p>
A placement new is used for which there is no placement delete.
When memory is allocated for an object with operator new, the object's constructor is called. If the constructor throws an exception, any memory that was allocated for the object should be deallocated. This cannot take place unless an operator delete function exists that matches the operator new.
If you use the operator new without any extra arguments and compile with /GX, /EHs, or /EHa options to enable exception handling, the compiler will generate code to call operator delete if the constructor throws an exception.
If you use the placement form of the new operator (the form with arguments in addition to the size of the allocation) and the object's constructor throws an exception, the compiler will still generate code to call operator delete; but it will only do so if a placement form of operator delete exists matching the placement form of the operator new that allocated the memory.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/cxdxz3x6.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/cxdxz3x6.aspx</a></p>
]]>
    </description>
    <tag>bug</tag>
    <internalKey>C4291</internalKey>
    <severity>MAJOR</severity>
    <type>BUG</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4293</key>
    <name>C4293: 'operator' : shift count negative or too big, undefined behavior</name>
    <description><![CDATA[<p>
If a shift count is negative or too large, the behavior of the resulting image is undefined.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/cx0bb1cy.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/cx0bb1cy.aspx</a></p>
]]>
    </description>
    <tag>bug</tag>
    <internalKey>C4293</internalKey>
    <severity>MAJOR</severity>
    <type>BUG</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4295</key>
    <name>C4295: ' array ' : array is too small to include a terminating null character</name>
    <description><![CDATA[<p>
An array was initialized but the last character in the array is not a null; accessing the array may produce unexpected results.</p>
<h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/t12y6ed4.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/t12y6ed4.aspx</a></p>
<h2>References</h2>
<p><a href="https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=47677453" target="_blank">ARR30-C. Do not form or use out-of-bounds pointers or array subscripts</a></p>
<p><a href="https://cwe.mitre.org/data/definitions/788.html" target="_blank">CWE-788: Access of Memory Location After End of Buffer</a></p>
]]>
    </description>
    <tag>bug</tag>
    <tag>cwe</tag>
    <internalKey>C4295</internalKey>
    <severity>MAJOR</severity>
    <type>BUG</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4296</key>
    <name>C4296: 'operator' : expression is always false</name>
    <description><![CDATA[<p>
An unsigned variable was used in a comparison operation with zero.
This warning is off by default. See Compiler Warnings That Are Off by Default for more information.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/wz2y40yt.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/wz2y40yt.aspx</a></p>
]]>
    </description>
    <tag>bug</tag>
    <internalKey>C4296</internalKey>
    <severity>MAJOR</severity>
    <type>BUG</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4297</key>
    <name>C4297: 'function' : function assumed not to throw an exception but does</name>
    <description><![CDATA[<p>
A function contains a nothrow declaration and one or more throw statements. To resolve C4297, do not attempt to throw exceptions in functions that are declared with nothrow or to remove the nothrow specification.
For more information on exception specifications, see Exception Specifications. Also, see /EH (Exception Handling Model) for information on how to modify exception handling behavior at compile time.
This warning is also generated for __declspec(dllexport) functions marked extern "C", even if they are C++ functions.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/84e2zwhh.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/84e2zwhh.aspx</a></p>
]]>
    </description>
    <internalKey>C4297</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4302</key>
    <name>C4302: 'conversion' : truncation from 'type 1' to 'type 2'</name>
    <description><![CDATA[<p>
The compiler detected a conversion from a larger type to a smaller type. Information may be lost.
This warning is off by default. See Compiler Warnings That Are Off by Default for more information.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/c9ctb1z9.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/c9ctb1z9.aspx</a></p>
]]>
    </description>
    <internalKey>C4302</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4303</key>
    <name>C4303: 'cast' from 'type1' to 'type2' is deprecated, use static_cast, __try_cast or dynamic_cast</name>
    <description><![CDATA[<p>
C-style type casting or function-style casting is not supported when using Managed Extensions for C++. To cast, use either dynamic_cast Operator or static_cast Operator.
C4303 is not reachable using /clr and the new syntax; see C-Style Casts with /clr for more information.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/232ek3wx.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/232ek3wx.aspx</a></p>
]]>
    </description>
    <internalKey>C4303</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4305</key>
    <name>C4305: 'identifier' : truncation from 'type1' to 'type2'</name>
    <description><![CDATA[<p>
If you used the ATL Connection Point Wizard, see Knowledge Base article:
Q250847 : ATL Connection Point Wizard Generated Code for Event with VARIANT Argument Gives C4305 Warning
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/0as1ke3f.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/0as1ke3f.aspx</a></p>
]]>
    </description>
    <internalKey>C4305</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4306</key>
    <name>C4306: 'identifier' : conversion from 'type1' to 'type2' of greater size</name>
    <description><![CDATA[<p>
The identifier is type cast to a larger pointer. The unfilled high bits of the new type will be zero-filled.
This warning may indicate an unwanted conversion. The resulting pointer may not be valid.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/1s11t648.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/1s11t648.aspx</a></p>
]]>
    </description>
    <internalKey>C4306</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4307</key>
    <name>C4307: 'operator' : integral constant overflow</name>
    <description><![CDATA[<p>
The operator is used in an expression that results in an integer constant overflowing the space allocated for it. You may need to use a larger type for the constant. A signed int holds a smaller value than an unsigned int because the signed int uses one bit to represent the sign.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/4kze989h.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/4kze989h.aspx</a></p>
]]>
    </description>
    <internalKey>C4307</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4308</key>
    <name>C4308: negative integral constant converted to unsigned type</name>
    <description><![CDATA[<p>
An expression converts a negative integer constant to an unsigned type. The result of the expression is probably meaningless.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/5ft2cz8d.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/5ft2cz8d.aspx</a></p>
]]>
    </description>
    <internalKey>C4308</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4309</key>
    <name>C4309: 'conversion' : truncation of constant value</name>
    <description><![CDATA[<p>
The type conversion causes a constant to exceed the space allocated for it. You may need to use a larger type for the constant.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/sz5z1byt.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/sz5z1byt.aspx</a></p>
]]>
    </description>
    <tag>bug</tag>
    <internalKey>C4309</internalKey>
    <severity>MAJOR</severity>
    <type>BUG</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4310</key>
    <name>C4310: cast truncates constant value</name>
    <description><![CDATA[<p>
A constant value is cast to a smaller type. The compiler performs the cast, which truncates data.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/z8f60833.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/z8f60833.aspx</a></p>
]]>
    </description>
    <internalKey>C4310</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4311</key>
    <name>C4311: 'variable' : pointer truncation from 'type' to 'type'</name>
    <description><![CDATA[<p>
This warning detects 64-bit portability issues. For example, if code is compiled on a 64-bit platform, the value of a pointer (64 bits) will be truncated if it is assigned to an int (32 bits).
This warning is only issued when /Wp64 is used. See /Wp64 for more information. Also, see Rules for Using Pointers.
For additional information on C4311, see Common Compiler Errors.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/4t91x2k5.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/4t91x2k5.aspx</a></p>
]]>
    </description>
    <internalKey>C4311</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4312</key>
    <name>C4312: 'operation' : conversion from 'type1' to 'type2' of greater size</name>
    <description><![CDATA[<p>
This warning detects 64-bit portability issues. You attempted to assign a 32-bit value to a 64-bit type. For example, casting a 32-bit int or 32-bit long to a 64-bit pointer.
This can be an unsafe conversion in some circumstances when sign extension occurs. If a negative number is assigned to a pointer type of a size greater than the int, sign extension will occur and the pointer value will refer to a memory address different from the value of the int.
This warning is only issued when /Wp64 is used. See /Wp64 for more information. Also, see Rules for Using Pointers.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/h97f4b9y.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/h97f4b9y.aspx</a></p>
]]>
    </description>
    <internalKey>C4312</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4313</key>
    <name>C4313: 'function' : 'format specifier' in format string conflicts with argument %d of type 'type'</name>
    <description><![CDATA[<p>
There is a conflict between the format specified and the value that you are passing. For example, you passed a 32-bit pointer to %d format specifier, which can hold a 64-bit integer. This warning is only in effect with /Wp64.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/wbe05206.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/wbe05206.aspx</a></p>
]]>
    </description>
    <tag>bug</tag>
    <internalKey>C4313</internalKey>
    <severity>MAJOR</severity>
    <type>BUG</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4316</key>
    <name>C4316: 'printf' : Object allocated on the heap may not be aligned for this type</name>
    <description><![CDATA[<p>
An over-aligned object allocated by using operator new may not have the specified alignment. Override operator new and operator delete for over-aligned types so that they use the aligned allocation routines‚Äîfor example, _aligned_malloc and _aligned_free.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/dn448573.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/dn448573.aspx</a></p>
]]>
    </description>
    <internalKey>C4316</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4317</key>
    <name>C4317: 'printf' : not enough arguments passed for format string</name>
    <description><![CDATA[<p>
There is a conflict between the format specified and the number of parameters. For example the following statement will report this warning</p>
<pre><code>
  printf("%d %d\n", 1); //C4317
</code></pre>
<h2>MSDN Documentation</h2>
<p><a href="http://blogs.msdn.com/b/vcblog/archive/2014/11/12/improvements-to-warnings-in-the-c-compiler.aspx" target="_blank">http://blogs.msdn.com/b/vcblog/archive/2014/11/12/improvements-to-warnings-in-the-c-compiler.aspx</a></p>
]]>
    </description>
    <tag>bug</tag>
    <internalKey>C4317</internalKey>
    <severity>MAJOR</severity>
    <type>BUG</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4318</key>
    <name>C4318: passing constant zero as the length to memset</name>
    <description><![CDATA[<p>
You called the C run-time library's memset function with a zero character length. For example, memset(p,size,0). Instead, specify memset(p,0,size).
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/5ebzszaw.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/5ebzszaw.aspx</a></p>
]]>
    </description>
    <internalKey>C4318</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4319</key>
    <name>C4319: 'operator' : zero extending 'type' to 'type' of greater size</name>
    <description><![CDATA[<p>
The result of the ~ operator is unsigned and then converted to a larger type.
In the following example, ~(a - 1) is evaluated as a 32-bit unsigned long expression and then converted to 64 bits by zero extension. This leads to pointer truncations.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/bh558kz2.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/bh558kz2.aspx</a></p>
]]>
    </description>
    <internalKey>C4319</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4324</key>
    <name>C4324: 'struct_name' : structure was padded due to __declspec(align())</name>
    <description><![CDATA[<p>
Padding was added at the end of a structure because you specified a __declspec(align) value.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/92fdk6xx.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/92fdk6xx.aspx</a></p>
]]>
    </description>
    <internalKey>C4324</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4325</key>
    <name>C4325: attributes for standard section ' section ' ignored</name>
    <description><![CDATA[<p>
You may not change the attributes of a standard section.
This would overwrite the .sdata standard section which uses the short data type with the long data type.
Standard sections whose attributes you may not change include,
.data
.sdata
.bss
.sbss
.text
.const
.sconst
.rdata
.srdata
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/5sxdd6c5.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/5sxdd6c5.aspx</a></p>
]]>
    </description>
    <internalKey>C4325</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4326</key>
    <name>C4326: return type of 'function' should be 'type1' instead of 'type2'</name>
    <description><![CDATA[<p>
A function returned a type other than type1. For example, using /Za, main did not return an int.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/1wk7h414.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/1wk7h414.aspx</a></p>
]]>
    </description>
    <internalKey>C4326</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4329</key>
    <name>C4329: __declspec(align()) is ignored on enum</name>
    <description><![CDATA[<p>
Use of the align keyword of the __declspec modifier is not allowed on an enum
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/bs1ck6ty.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/bs1ck6ty.aspx</a></p>
]]>
    </description>
    <internalKey>C4329</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4333</key>
    <name>C4333: 'operator' : right shift by too large amount, data loss</name>
    <description><![CDATA[<p>
A right shift operation was too large an amount. All significant bits are shifted out and the result will always be zero.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/4wz07268.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/4wz07268.aspx</a></p>
]]>
    </description>
    <tag>bug</tag>
    <internalKey>C4333</internalKey>
    <severity>MAJOR</severity>
    <type>BUG</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4334</key>
    <name>C4334: 'operator' : result of 32-bit shift implicitly converted to 64 bits (was 64-bit shift intended?)</name>
    <description><![CDATA[<p>
The result of 32-bit shift was implicitly converted to 64-bits, and the compiler suspects that a 64-bit shift was intended. To resolve this warning, either use 64-bit shift, or explicitly cast the shift result to 64-bit.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/ke55d167.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/ke55d167.aspx</a></p>
]]>
    </description>
    <internalKey>C4334</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4335</key>
    <name>C4335: Mac file format detected: please convert the source file to either DOS or UNIX format</name>
    <description><![CDATA[<p>
The line termination character of the first line of a source file is Macintosh style ('\r') as opposed to UNIX ('\n') or DOS ('\r\n').
This warning is always issued as an errror. See warning pragma for information about how to disable this warning. Also, this warning is only issued once per compiland. Therefore, if there are multiple #include directives that specify files in Macintosh format, C4335 will only be issued once.
One way to generate files in Macintosh format is by using the Advanced Save Options (on the File menu) in Visual Studio.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/aad7fash.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/aad7fash.aspx</a></p>
]]>
    </description>
    <internalKey>C4335</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4336</key>
    <name>C4336: import cross-referenced type library 'type_lib1' before importing 'type_lib2'</name>
    <description><![CDATA[<p>
A type library was referenced with the #import directive. However, the type library contained a reference to another type library that was not referenced with #import. This other .tlb file was found by the compiler.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/h3t9d8h0.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/h3t9d8h0.aspx</a></p>
]]>
    </description>
    <internalKey>C4336</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4337</key>
    <name>C4337: cross-referenced type library 'typelib1' in 'typelib2' is being automatically imported</name>
    <description><![CDATA[<p>
The auto_search attribute of the #import directive caused a type library to be implicitly imported.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/bcke43tz.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/bcke43tz.aspx</a></p>
]]>
    </description>
    <internalKey>C4337</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4339</key>
    <name>C4339: 'type' : use of undefined type detected in CLR meta-data - use of this type may lead to a runtime exception</name>
    <description><![CDATA[<p>
A type was not defined in code that was compiled for the common language runtime. Define the type to avoid a possible runtime exception.
This warning is off by default. See Compiler Warnings That Are Off by Default for more information.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/3fxw8y6x.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/3fxw8y6x.aspx</a></p>
]]>
    </description>
    <tag>bug</tag>
    <internalKey>C4339</internalKey>
    <severity>MAJOR</severity>
    <type>BUG</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4340</key>
    <name>C4340: 'value' : value wrapped from positive to negative value</name>
    <description><![CDATA[<p>
The enum value is greater than the largest enum positive value wrapped around to a negative value.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/bb09f371.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/bb09f371.aspx</a></p>
]]>
    </description>
    <tag>bug</tag>
    <internalKey>C4340</internalKey>
    <severity>MAJOR</severity>
    <type>BUG</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4341</key>
    <name>C4341: 'value' : signed value is out of range for enum constant</name>
    <description><![CDATA[<p>
An enumerated constant exceeds the limit for an int. The value of the invalid constant is undefined. Constants must resolve to integers between ‚Äì4,294,967,295 and +4,294,967,295 (signed).
Note that this is a level 3 warning under /Ze and a level 1 warning under /Za.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/aa733844.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/aa733844.aspx</a></p>
]]>
    </description>
    <tag>bug</tag>
    <internalKey>C4341</internalKey>
    <severity>MAJOR</severity>
    <type>BUG</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4342</key>
    <name>C4342: behavior change: 'function' called, but a member operator was called in previous versions</name>
    <description><![CDATA[<p>
In previous versions of Visual C++, a member was called, but this behavior has been changed and the compiler will find the best match in namespace scope.
If a member operator was found, the compiler would previously not consider any namespace scope operators. If there is a better match at namespace scope, the current compiler will correctly call it, whereas previous compilers wouldn't consider it.
This warning should be disabled after you successfully port your code to the current version. The compiler may give false positives, generating this warning for code where there is no behavior change.
This warning is off by default. For more information, see Compiler Warnings That Are Off by Default.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/z8910865.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/z8910865.aspx</a></p>
]]>
    </description>
    <internalKey>C4342</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4343</key>
    <name>C4343: #pragma optimize("g",off) overrides /Og option</name>
    <description><![CDATA[<p>
This warning, only valid in the Itanium Processor Family (IPF) compiler, reports that a pragma optimize overrode a /Og compiler option.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/dwys70x2.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/dwys70x2.aspx</a></p>
]]>
    </description>
    <internalKey>C4343</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4344</key>
    <name>C4344: behavior change: use of explicit template arguments results in call to 'function'</name>
    <description><![CDATA[<p>
A call to a function using explicit template arguments calls a different function than it would if explicit arguments had not been specified.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/absx690y.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/absx690y.aspx</a></p>
]]>
    </description>
    <internalKey>C4344</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4345</key>
    <name>C4345: behavior change: an object of POD type constructed with an initializer of the form () will be default-initialized</name>
    <description><![CDATA[<p>
This warning reports a behavior change from the Visual C++ compiler that shipped in Visual Studio .NET when initializing a POD (plain old data) object with (); the compiler will default-initialize the object.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/wewb47ee.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/wewb47ee.aspx</a></p>
]]>
    </description>
    <internalKey>C4345</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4346</key>
    <name>C4346: 'name' : dependent name is not a type</name>
    <description><![CDATA[<p>
The typename keyword is required if a dependent name is to be treated as a type. This is a breaking change in the Visual C++ .NET 2003 compiler, made in order to conform to the ISO C++ standard.
For code that works the same in all versions of Visual C++, add typename to the declaration.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/tsx7wabs.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/tsx7wabs.aspx</a></p>
]]>
    </description>
    <internalKey>C4346</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4347</key>
    <name>C4347: behavior change: 'function template' is called instead of 'function'</name>
    <description><![CDATA[<p>
In Visual Studio .NET, if you had a template function and a nontemplate function with the same name as the template function, the compiler incorrectly treated the nontemplate function as a specialization of the template function.
For code that works the same in all versions of Visual C++, add template&lt;&gt; above the nontemplate function, making it a real explicit specialization.
This warning is off by default. For more information, see Compiler Warnings That Are Off by Default.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/vstudio/x7wb5te0.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/vstudio/x7wb5te0.aspx</a></p>
]]>
    </description>
    <internalKey>C4347</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4348</key>
    <name>C4348: 'type' : redefinition of default parameter : parameter number</name>
    <description><![CDATA[<p>
A template parameter was redefined.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/kxef26tw.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/kxef26tw.aspx</a></p>
]]>
    </description>
    <internalKey>C4348</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4350</key>
   <name>C4350: behavior change: 'member1' called instead of 'member2'</name>
    <description><![CDATA[<p>
An rvalue cannot be bound to a non-const reference. In previous versions of Visual C++, it was possible to bind an rvalue to a non-const reference in a direct initialization. This code now gives a warning.
For backward compatibility, it is still possible to bind rvalues to non-const references, but standard conversions are preferred wherever possible.
This warning represents a change of behavior from the Visual C++ .NET 2002 compiler. If enabled, this Could possibly be given for correct code. For example, it could be given when using the std::auto_ptr class template.
If you get this warning, examine your code to see if it depends on binding rvalues to non-const references. Adding a const to the reference or providing a additional const-reference overload may solve the problem.
This warning is off by default. For more information, see Compiler Warnings That Are Off by Default. 
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/0eestyah.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/0eestyah.aspx</a></p>
]]>
    </description>
    <internalKey>C4350</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4351</key>
    <name>C4351: new behavior: elements of array 'array' will be default initialized</name>
    <description><![CDATA[<p>
When an array is in a constructor's member initialization list, the elements of the array will be default initialized. In previous versions of Visual C++, when an array was in a constructor's member initialization list, the elements of the array may not have been default initialized in some cases.
If the array's element type does not have a constructor, the elements of the array will be initialized with the corresponding zero representation for that type.
C4351 means that you should inspect your code. If you want the compiler's previous behavior, remove the array from the constructor's member initialization list.
If you want the new behavior, which is likely, because the array was explicitly added to the constructor's member initialization list, use the warning pragma to disable the warning. The new behavior should be fine for most users.
One situation where the new behavior can result in unexpected behavior is when placement new is used to construct the object that has the array as a member, and the program depends on the contents that the memory (for the elements of the default initialized array) had before the call to placement new. In this case, the older compiler would have left the contents of memory unchanged, but the new behavior will cause default initialization of the array elements, overwriting the original contents in memory.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/1ywe7hcy.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/1ywe7hcy.aspx</a></p>
]]>
    </description>
    <internalKey>C4351</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4353</key>
    <name>C4353: nonstandard extension used: constant 0 as function expression. Use '__noop' function intrinsic instead</name>
    <description><![CDATA[<p>
You cannot use the constant zero (0) as a function expression. For more information, see __noop.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/2a68558f.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/2a68558f.aspx</a></p>
]]>
    </description>
    <internalKey>C4353</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4355</key>
    <name>C4355: 'this' : used in base member initializer list</name>
    <description><![CDATA[<p>
The this pointer is valid only within nonstatic member functions. It cannot be used in the initializer list for a base class.
The base-class constructors and class member constructors are called before this constructor. In effect, you've passed a pointer to an unconstructed object to another constructor. If those other constructors access any members or call member functions on this, the result will be undefined. You should not use the this pointer until all construction has completed.
This warning is off by default. See Compiler Warnings That Are Off by Default for more information.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/3c594ae3.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/3c594ae3.aspx</a></p>
]]>
    </description>
     <tag>bug</tag>
   <internalKey>C4355</internalKey>
    <severity>MAJOR</severity>
    <type>BUG</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4356</key>
    <name>C4356: 'member' : static data member cannot be initialized via derived class</name>
    <description><![CDATA[<p>
The initialization of a static data member was ill formed. The compiler accepted the initialization.
This is a breaking change in the Visual C++ .NET 2003 compiler.
For code that works the same in all versions of Visual C++, initialize the member through the base class.
Use the warning pragma to suppress this warning.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/30kfwt8c.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/30kfwt8c.aspx</a></p>
]]>
    </description>
    <tag>bug</tag>
    <internalKey>C4356</internalKey>
    <severity>MAJOR</severity>
    <type>BUG</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4357</key>
    <name>C4357: param array argument in formal argument list for delegate 'del' ignored when generating 'function'</name>
    <description><![CDATA[<p>
The ParamArray attribute was ignored, and function cannot be called with variable arguments.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/x344fy02.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/x344fy02.aspx</a></p>
]]>
    </description>
    <internalKey>C4357</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4358</key>
    <name>C4358: 'operator': return type of combined delegates is not 'void'; returned value is undefined</name>
    <description><![CDATA[<p>
Two delegates were combined and the return value is not void. If two delegates with non-void return values are combined, the compiler will not be able to do a proper assignment if the return value of the delegate is used.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/a7d8s945.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/a7d8s945.aspx</a></p>
]]>
    </description>
    <tag>bug</tag>
    <internalKey>C4358</internalKey>
    <severity>MAJOR</severity>
    <type>BUG</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4359</key>
    <name>C4359: 'type': actual alignment (8) is greater than the value specified in __declspec(align())</name>
    <description><![CDATA[<p>
The alignment specified for a type is less than the alignment of the type of one of its data members. For more information, see align (C++).
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/ms173681.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/ms173681.aspx</a></p>
]]>
    </description>
    <tag>bug</tag>
    <internalKey>C4359</internalKey>
    <severity>MAJOR</severity>
    <type>BUG</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4364</key>
    <name>C4364: #using for assembly 'file' previously seen at location(line_number) without as_friend attribute; as_friend not applied</name>
    <description><![CDATA[<p>
A #using directive was repeated for a given metadata file, but the as_friend qualifier was not used in the first occurrence; the compiler will ignore the second as_friend.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/ms173682.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/ms173682.aspx</a></p>
]]>
    </description>
    <internalKey>C4364</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4365</key>
    <name>C4365: 'action' : conversion from 'type_1' to 'type_2', signed/unsigned mismatch</name>
    <description><![CDATA[<p>
For example, you tried to convert an unsigned value to a signed value.
C4365 is off by default. For more information, see Compiler Warnings That Are Off by Default.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/ms173683.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/ms173683.aspx</a></p>
]]>
    </description>
    <internalKey>C4365</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4366</key>
    <name>C4366: The result of the unary 'operator' operator may be unaligned</name>
    <description><![CDATA[<p>
If a structure member could ever be unaligned because of packing, the compiler will warn when that member's address is assigned to an aligned pointer. By default, all pointers are aligned.
To resolve C4366, either change the alignment of the structure or declare the pointer with the __unaligned keyword.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/ms173684.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/ms173684.aspx</a></p>
]]>
    </description>
    <internalKey>C4366</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4368</key>
    <name>C4368: cannot define 'member' as a member of managed 'type': mixed types are not supported</name>
    <description><![CDATA[<p>
You can, however, declare a pointer to a native type and control its lifetime in the constructor and destructor and finalizer of your managed class (see Destructors and Finalizers in Visual C++ for more information).
This warning is always issued as an error. Use the warning pragma to disable C4368.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/xhfb39es.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/xhfb39es.aspx</a></p>
]]> 
    </description>
    <tag>bug</tag>
    <internalKey>C4368</internalKey>
    <severity>MAJOR</severity>
    <type>BUG</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4369</key>
    <name>C4369: 'enumerator' : enumerator value 'value' cannot be represented as 'type', value is 'new_value'</name>
    <description><![CDATA[<p>
An enumerator was calculated to be greater than the greatest value for the specified underlying type. This caused an overflow and the compiler wrapped the enumerator value to the lowest possible value for the type.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/ms173685.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/ms173685.aspx</a></p>
]]>
    </description>
    <internalKey>C4369</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4374</key>
    <name>C4374: 'function1': interface method will not be implemented by non-virtual method 'function2'</name>
    <description><![CDATA[<p>
The compiler expected to find the virtual keyword on a method definition.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/48b96tkx.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/48b96tkx.aspx</a></p>
]]>
    </description>
    <internalKey>C4374</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4375</key>
    <name>C4375: non-public method 'method2' does not override 'method1'</name>
    <description><![CDATA[<p>
A type that implements another type defined an override method, but the override was not public. Therefore, the method does not override the base type method.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/0xk9wx78.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/0xk9wx78.aspx</a></p>
]]>
    </description>
    <internalKey>C4375</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4376</key>
    <name>C4376: access specifier 'old_specifier:' is no longer supported: please use 'new_specifier:' instead</name>
    <description><![CDATA[<p>
For more information on specifying type and member accessibility in metadata, see Type and Member Visibility.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/ms173686.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/ms173686.aspx</a></p>
]]>
    </description>
    <internalKey>C4376</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4377</key>
    <name>C4377: native types are private by default; -d1PrivateNativeTypes is deprecated</name>
    <description><![CDATA[<p>
In previous releases, native types in assemblies were public by default, and an internal, undocumented compiler option (/d1PrivateNativeTypes) was used to make them private.
All types, native and CLR, are now private by default in an assembly, so /d1PrivateNativeTypes is no longer needed.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/ms173687.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/ms173687.aspx</a></p>
]]>
    </description>
    <internalKey>C4377</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4378</key>
    <name>C4378: Must obtain function pointers to run initializers; consider System::ModuleHandle::ResolveMethodHandle</name>
    <description><![CDATA[<p>
Under /clr, initializer symbols contain function tokens, not functions pointers. You need to convert tokens to pointers using ResolveMethodHandle.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/ms173688.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/ms173688.aspx</a></p>
]]>
    </description>
    <internalKey>C4378</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4379</key>
    <name>C4379: Version version of the common language runtime is not supported by this compiler. Using this version may cause unexpected results</name>
    <description><![CDATA[<p>
You have a previous version of the common language runtime on your machine, but not the current version. To resolve C4379, install the version of the common language runtime that shipped with your compiler.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/ms173689.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/ms173689.aspx</a></p>
]]>
    </description>
    <internalKey>C4379</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4381</key>
    <name>C4381: 'function1': interface method will not be implemented by non-public method 'function2'</name>
    <description><![CDATA[<p>
A class must implement all function in an interface. A class can satisfy this condition if one of its base classes implements the function. However, the function must be implemented as a public function.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/ms173691.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/ms173691.aspx</a></p>
]]>
    </description>
    <internalKey>C4381</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4382</key>
    <name>C4382: throwing 'type' : a type with __clrcall destructor or copy constructor can only be caught in /clr:pure module</name>
    <description><![CDATA[<p>
When compiled with /clr (not /clr:pure), exception handling expects the member functions in a native type to be __cdecl and not __clrcall. Native types with member functions using __clrcall calling convention cannot be caught in a module compiled with /clr.
If the exception will be caught in a module compiled with /clr:pure, you can ignore this warning.
for more information, see /clr (Common Language Runtime Compilation).
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/ms235344.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/ms235344.aspx</a></p>
]]>
    </description>
    <internalKey>C4382</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4383</key>
    <name>C4383: 'instance_dereference_operator' : meaning of dereferencing a handle can change, when a user-defined 'operator' exists; write  operator as a static function to be explicit about operand</name>
    <description><![CDATA[<p>
When you add a user-defined instance override of the dereference operator in a managed type, you potentially override the ability of the type's dereference operator to return the handle's object. Consider writing a static, user-defined dereference operator.
For more information, see Handle to Object Operator (^) and Tracking Reference Operator.
Also, an instance operator is not available to other language compilers via referenced metadata. For more information, see User-Defined Operators.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/ms235537.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/ms235537.aspx</a></p>
]]>
    </description>
    <internalKey>C4383</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4384</key>
    <name>C4384: #pragma 'make_public' should only be used at global scope</name>
    <description><![CDATA[<p>
The make_public pragma was applied incorrectly.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/ms235604.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/ms235604.aspx</a></p>
]]>
    </description>
    <internalKey>C4384</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4389</key>
    <name>C4389: 'operator' : signed/unsigned mismatch</name>
    <description><![CDATA[<p>
An operation involved signed and unsigned variables. This could result in a loss of data.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/bx7x617k.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/bx7x617k.aspx</a></p>
]]>
    </description>
    <internalKey>C4389</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4390</key>
    <name>C4390: ';' : empty controlled statement found; is this the intent?</name>
    <description><![CDATA[<p>
A semicolon was found after a control statement that contains no instructions.
If you get C4390 because of a macro, you should use the warning pragma to disable C4390 in the module containing the macro.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/8f1zx4y1.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/8f1zx4y1.aspx</a></p>
]]>
    </description>
    <internalKey>C4390</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4391</key>
    <name>C4391: 'signature' : incorrect return type for intrinsic function, expected 'type'</name>
    <description><![CDATA[<p>
A function declaration for a compiler intrinsic had the wrong return type. The resulting image may not run correctly.
To fix this warning, either correct the declaration or delete the declaration and simply #include the appropriate header file.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/s8fszsx1.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/s8fszsx1.aspx</a></p>
]]>
    </description>
    <internalKey>C4391</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4392</key>
    <name>C4392: 'signature' : incorrect number of arguments for intrinsic function, expected 'number' arguments</name>
    <description><![CDATA[<p>
A function declaration for a compiler intrinsic had the wrong number of arguments. The resulting image may not run correctly.
To fix this warning, either correct the declaration or delete the declaration and simply #include the appropriate header file.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/484cb4sk.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/484cb4sk.aspx</a></p>
]]>
    </description>
    <internalKey>C4392</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4393</key>
    <name>C4393: 'var' : const has no effect on literal data member; ignored</name>
    <description><![CDATA[<p>
A literal data member was also specified as const. Since a literal data member implies const, you do not need to add const to the declaration.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/9k5t0x0t.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/9k5t0x0t.aspx</a></p>
]]>
    </description>
    <internalKey>C4393</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4394</key>
    <name>C4394: 'function' : per-appdomain symbol should not be marked with __declspec(dllexport)</name>
    <description><![CDATA[<p>
A function marked with the appdomain __declspec modifier is compiled to MSIL (not to native), and export tables (export __declspec modifier) are not supported for managed functions.
You can declare a managed function to have public accessibility, see Type and Member Visibility for more information.
C4394 is always issued as an error. You can turn off this warning with the #pragma warning or /wd; see warning or /w, /Wn, /WX, /Wall, /wln, /wdn, /wen, /won (Warning Level) for more information.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/ms173692.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/ms173692.aspx</a></p>
]]>
    </description>
    <internalKey>C4394</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4395</key>
    <name>C4395: 'function' : member function will be invoked on a copy of the initonly data member 'member'</name>
    <description><![CDATA[<p>
A member function was called on an initonly data member. C4395 warns that the initonly data member cannot be modified by the function.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/1f389xcy.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/1f389xcy.aspx</a></p>
]]>
    </description>
    <internalKey>C4395</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4397</key>
    <name>C4397: DefaultCharSetAttribute is ignored</name>
    <description><![CDATA[<p>
      DefaultCharSetAttribute is ignored by the Visual C++ compiler. To specify a character set for the DLL, use the CharSet option of DllImport. For more information, see Using C++ Interop (Implicit PInvoke).
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/ms173694.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/ms173694.aspx</a></p>
]]>
    </description>
    <internalKey>C4397</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4398</key>
    <name>C4398: 'variable' : per-process global object might not work correctly with multiple appdomains; consider using __declspec(appdomain)</name>
    <description><![CDATA[<p>
A virtual function with __clrcall calling convention in a native type causes the creation of a per application domain vtable. Such a variable may not correct correctly when used in multiple application domains.
You can resolve this warning by compiling with /clr:pure, which makes global variables per appdomain by default, or by explicitly marking the variable __declspec(appdomain).
For more information, see appdomain and Application Domains and Visual C++.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/ms235574.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/ms235574.aspx</a></p>
]]>
    </description>
    <internalKey>C4398</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4399</key>
    <name>C4399: 'symbol' : per-process symbol should not be marked with __declspec(dllimport) when compiled with /clr:pure</name>
    <description><![CDATA[<p>
Data from a native image or an image with native and CLR constructs can not be imported into a pure image. To resolve this warning, compile with /clr (not /clr:pure) or delete __declspec(dllimport).
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/ms173695.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/ms173695.aspx</a></p>
]]>
    </description>
    <internalKey>C4399</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4400</key>
    <name>C4400: 'type' : const/volatile qualifiers on this type are not supported</name>
    <description><![CDATA[<p>
The const (C++)and volatile (C++)qualifiers will not work with variables of common language runtime types.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/ms235594.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/ms235594.aspx</a></p>
]]>
    </description>
    <internalKey>C4400</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4401</key>
    <name>C4401: 'bitfield' : member is bit field</name>
    <description><![CDATA[<p>
Inline assembly code tries to access a bit-field member. Inline assembly cannot access bit-field members, so the last packing boundary before the bit-field member is used.
To avoid this warning, cast the bit field to an appropriate type before making the reference in inline assembly code.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/dxwyde2y.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/dxwyde2y.aspx</a></p>
]]>
    </description>
    <internalKey>C4401</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4402</key>
    <name>C4402: must use PTR operator</name>
    <description><![CDATA[<p>
A type is used on an operand without a PTR operator when referring to or casting to a type in inline assembly code.
The compiler assumes the PTR operator.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/fzbzdtd3.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/fzbzdtd3.aspx</a></p>
]]>
    </description>
    <internalKey>C4402</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4403</key>
    <name>C4403: illegal PTR operator</name>
    <description><![CDATA[<p>
A PTR operator is used inappropriately in inline assembler code.
The compiler ignored the PTR operator.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/7wsdszas.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/7wsdszas.aspx</a></p>
]]>
    </description>
    <internalKey>C4403</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4404</key>
    <name>C4404: period on directive ignored</name>
    <description><![CDATA[<p>
The optional period preceding the directive is ignored.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/0dw45x2e.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/0dw45x2e.aspx</a></p>
]]>
    </description>
    <internalKey>C4404</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4405</key>
    <name>C4405: 'identifier' : identifier is reserved word</name>
    <description><![CDATA[<p>
A word reserved for inline assembly is used as a variable name. This may cause unpredictable results. To fix this warning, avoid naming variables with words reserved for inline assembly.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/74sawc79.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/74sawc79.aspx</a></p>
]]> 
 </description>
    <tag>bug</tag>
    <internalKey>C4405</internalKey>
    <severity>MAJOR</severity>
    <type>BUG</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4406</key>
    <name>C4406: operand on directive ignored</name>
    <description><![CDATA[<p>
The directive does not take any operands, but an operand was specified.
The compiler ignored the given operand or operands.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/b2a8280t.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/b2a8280t.aspx</a></p>
]]>
    </description>
    <internalKey>C4406</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4407</key>
    <name>C4407: cast between different pointer to member representations, compiler may generate incorrect code</name>
    <description><![CDATA[<p>
An incorrect cast was detected.
C4407 can be generated because of compiler conformance work that was done in Visual C++ 2005. Pointer-to-member now requires a qualified name and the address-of operator (&amp;).
C4407 can occur if you cast between a multiple inheritance pointer-to-member to a single inheritance pointer-to-member. Sometimes this can work, but sometimes it can't because the single inheritance pointer-to-member representation doesn't hold sufficient information. Compiling with the /vmm might help (for more information, see /vmm, /vms, /vmv (General Purpose Representation)). You can also try rearranging your base classes; the compiler is detecting a loss of information in the conversion because a base class is at a non-zero offset from the derived.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/1s6193tt.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/1s6193tt.aspx</a></p>
]]> 
    </description>
    <tag>bug</tag>
    <internalKey>C4407</internalKey>
    <severity>MAJOR</severity>
    <type>BUG</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4408</key>
    <name>C4408: anonymous union did not declare any data members</name>
    <description><![CDATA[<p>
An anonymous union must have at least one data member.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/s5d7cdcd.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/s5d7cdcd.aspx</a></p>
]]>
    </description>
    <internalKey>C4408</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4409</key>
    <name>C4409: illegal instruction size</name>
    <description><![CDATA[<p>
The instruction did not have a form with the specified size. The smallest legal size was used.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/x18e3zcd.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/x18e3zcd.aspx</a></p>
]]>
    </description>
    <internalKey>C4409</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4410</key>
    <name>C4410: illegal size for operand</name>
    <description><![CDATA[<p>
One of the operands on the instruction had an incorrect size. The smallest legal size for the operand was used.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/xkf30z74.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/xkf30z74.aspx</a></p>
]]>
    </description>
    <internalKey>C4410</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4411</key>
    <name>C4411: 'identifier' : symbol resolves to displacement register</name>
    <description><![CDATA[<p>
The identifier is a local symbol that resolves to a displacement register and therefore may be used on an operand with another symbol.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/2xt5x838.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/2xt5x838.aspx</a></p>
]]>
    </description>
    <internalKey>C4411</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4412</key>
    <name>C4412: 'function' : function signature contains type 'type'; C++ objects are unsafe to pass between pure code and mixed or native</name>
    <description><![CDATA[<p>
The compiler detected a potentially unsafe situation that could result in a runtime error: a call is being made from a /clr:pure compiland to a function that was imported via dllimport and the function signature contains an unsafe type. A type is unsafe if it contains a member function or has a data member that is an unsafe type or an indirection to an unsafe type.
This is unsafe because of the difference in the default calling conventions between pure and native code (or mixed native and managed). When importing (via dllimport) a function into a /clr:pure compiland, ensure that the declarations of each type in the signature are identical to those in the compiland that exports the function (being especially careful about differences in implicit calling conventions).
A virtual member function is especially prone to give unexpected results. However, even a non-virtual function should be tested to ensure that you get the correct results. If you are sure that you are getting the correct results, you can ignore this warning.
For more information on /clr:pure, see How to: Migrate to /clr:pure (C++/CLI).
C4412 is off by default. See Compiler Warnings That Are Off by Default and dllexport, dllimport for more information.
To resolve this warning, remove all functions from the type.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/ms235599.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/ms235599.aspx</a></p>
]]>
    </description>
    <internalKey>C4412</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4414</key>
    <name>C4414: 'function' : short jump to function converted to near</name>
    <description><![CDATA[<p>
Short jumps generate compact instruction which branches to an address within a limited range from the instruction. The instruction includes a short offset that represents the distance between the jump and the target address, the function definition. During linking a function may be moved or subject to link-time optimizations that cause the function to be moved out of the range reachable from a short offset. The compiler must generate a special record for the jump, which requires the jmp instruction to be either NEAR or FAR. The compiler made the conversion.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/eh37b37w.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/eh37b37w.aspx</a></p>
]]> 
    </description>
    <internalKey>C4414</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4420</key>
    <name>C4420: 'operator' : operator not available, using 'operator' instead; run-time checking may be compromised</name>
    <description><![CDATA[<p>
This warning is generated when you use the /RTCv (vector new/delete checking) and when no vector form is found. In this case, the non-vector form is used.
In order for /RTCv to work correctly, the compiler should always call the vector form of new/delete if the vector syntax was used.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/ka64k7sz.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/ka64k7sz.aspx</a></p>
]]>
    </description>
    <internalKey>C4420</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4422</key>
    <name>C4422: 'printf' : too many arguments passed for format string</name>
    <description><![CDATA[<p>
There is a conflict between the format specified and the number of parameters. For example the following statement will report this warning</p>
<pre><code>
  printf("%d\n", 1, 2); //C4422
</code></pre>
<h2>MSDN Documentation</h2>
<p><a href="http://blogs.msdn.com/b/vcblog/archive/2014/11/12/improvements-to-warnings-in-the-c-compiler.aspx" target="_blank">http://blogs.msdn.com/b/vcblog/archive/2014/11/12/improvements-to-warnings-in-the-c-compiler.aspx</a></p>
]]>
    </description>
    <tag>bug</tag>
    <internalKey>C4422</internalKey>
    <severity>MAJOR</severity>
    <type>BUG</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4426</key>
    <name>C4426: 'symbol' is not allowed in the format string of function 'name'</name>
    <description><![CDATA[<p>
Some specifiers that aren't allowed to be used in some variants of printf. For example printf_s disallows '%n'.</p>
<pre><code>
    int n; 
    printf_s("Test %n", &amp;n); //C4426
</code></pre>
<h2>MSDN Documentation</h2>
<p><a href="http://blogs.msdn.com/b/vcblog/archive/2014/11/12/improvements-to-warnings-in-the-c-compiler.aspx" target="_blank">http://blogs.msdn.com/b/vcblog/archive/2014/11/12/improvements-to-warnings-in-the-c-compiler.aspx</a></p>
]]>
    </description>
    <tag>bug</tag>
    <internalKey>C4426</internalKey>
    <severity>MAJOR</severity>
    <type>BUG</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4428</key>
    <name>C4428: universal-character-name encountered in source</name>
    <description><![CDATA[<p>
The compiler issues C4428 when it detects at least one universal character name in a source code file. To fix this warning, use the Unicode equivalent of the universal character name.
This warning is only issued once per compiland.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/ttw8abkd.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/ttw8abkd.aspx</a></p>
]]>
    </description>
    <internalKey>C4428</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4429</key>
    <name>C4429: possible incomplete or improperly formed universal-character-name</name>
    <description><![CDATA[<p>
The compiler detected a character sequence that may be a badly formed universal character name. A universal character name is \u followed by four hex digits, or \U followed by eight hex digits.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/z78hwa6k.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/z78hwa6k.aspx</a></p>
]]>
    </description>
    <internalKey>C4429</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4430</key>
    <name>C4430: missing type specifier - int assumed. Note: C++ does not support default-int</name>
    <description><![CDATA[<p>
This error can be generated as a result of compiler conformance work that was done for Visual C++ 2005: all declarations must explicitly specify the type; int is no longer assumed.
C4430 is always issued as an error. You can turn off this warning with the #pragma warning or /wd; see warning or /w, /Wn, /WX, /Wall, /wln, /wdn, /wen, /won (Warning Level) for more information.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/ms173696.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/ms173696.aspx</a></p>
]]>
    </description>
    <internalKey>C4430</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4431</key>
    <name>C4431: missing type specifier - int assumed. Note: C no longer supports default-int</name>
    <description><![CDATA[<p>
This error can be generated as a result of compiler conformance work that was done for Visual C++ 2005: Visual C++ no longer creates untyped identifiers as int by default. The type of an identifier must be specified explicitly.
This warning is off by default. See Compiler Warnings That Are Off by Default for more information.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/ms173697.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/ms173697.aspx</a></p>
]]>
    </description>
    <internalKey>C4431</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4432</key>
    <name>C4432: a destructor in a ref-class must have public accessibility; changing to public access</name>
    <description><![CDATA[<p>
The compiler made a destructor public. To resolve this warning, explicitly put the destructor in a public section of the class.
For more information, see Destructors and Finalizers in Visual C++.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/ms173698.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/ms173698.aspx</a></p>
]]>
    </description>
    <internalKey>C4432</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4433</key>
    <name>C4433: a finalizer must have protected accessibility; changing to protected access</name>
    <description><![CDATA[<p>
C4433 indicates that the compiler changed the accessibility of a finalizer. Finalizers must have protected accessibility. For more information, see Destructors and Finalizers in Visual C++.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/ms235520.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/ms235520.aspx</a></p>
]]>
    </description>
    <internalKey>C4433</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4434</key>
    <name>C4434: a class constructor must have private accessibility; changing to private access</name>
    <description><![CDATA[<p>
  C4434 indicates that the compiler changed the accessibility of a static constructor. Static constructors must have private accessibility, as they are only meant to be called by the common language runtime. For more information, see How to: Define Static Constructors in a Class or Struct.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/ms235306.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/ms235306.aspx</a></p>
]]>
    </description>
    <internalKey>C4434</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4435</key>
    <name>C4435: 'class1' : Object layout under /vd2 will change due to virtual base 'class2'</name>
    <description><![CDATA[<p>
This warning is off by default. See Compiler Warnings That Are Off by Default for more information.
Under the default compile option of /vd1, the derived class does not have a vtordisp field for the indicated virtual base. If /vd2 or #pragma vtordisp(2) is in effect, a vtordisp field will be present, changing the object layout. This can lead to binary compatibility problems if interacting modules are compiled with different vtordisp settings.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/jj155806.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/jj155806.aspx</a></p>
]]>
    </description>
    <internalKey>C4435</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4436</key>
    <name>C4436: dynamic_cast from virtual base 'class1' to 'class2' in constructor/destructor could fail with partially-constructed object Compile with /vd2 or define 'class2' with #pragma vtordisp(2)</name>
    <description><![CDATA[<p>
The compiler has encountered a dynamic_cast operation with the following characteristics.
- The cast is from a base class pointer to a derived class pointer.
- The derived class virtually inherits the base class.
- The derived class does not have a vtordisp field for the virtual base.
- The cast is found in a constructor or destructor of the derived class, or some class which further inherits from the derived class.
The warning indicates the dynamic_cast might not perform correctly, if it is operating on a partially-constructed object. That happens if the derived constructor/destructor is operating on a sub-object of some further derived object. If the derived class named in the warning is never further derived, the Can be ignored.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/jj155805.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/jj155805.aspx</a></p>
]]>
    </description>
    <internalKey>C4436</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4437</key>
    <name>C4437: dynamic_cast from virtual base 'class1' to 'class2' could fail in some contexts Compile with /vd2 or define 'class2' with #pragma vtordisp(2) in effect</name>
    <description><![CDATA[<p>
This warning is off by default. See Compiler Warnings That Are Off by Default for more information.
The compiler has encountered a dynamic_cast operation with the following characteristics.
- The cast is from a base class pointer to a derived class pointer.
- The derived class virtually inherits the base class.
- The derived class does not have a vtordisp field for the virtual base.
- The cast is not found in a constructor or destructor of the derived class, or some class which further inherits from the derived class (otherwise, compiler C4436 will be issued).
The warning indicates that the dynamic_cast might not perform correctly if it is operating on a partially-constructed object. This situation occurs when the enclosing function is called from a constructor or destructor of a class that inherits the derived class that is named in the warning. If the derived class that is named in the warning is never further derived, or the enclosing function is not called during object construction or destruction, the Can be ignored.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/jj155807.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/jj155807.aspx</a></p>
]]>
    </description>
    <internalKey>C4437</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4439</key>
    <name>C4439: 'function' : function definition with a managed type in the signature must have a __clrcall calling convention</name>
    <description><![CDATA[<p>
The compiler implicitly replaced a calling convention with __clrcall. To resolve this warning, remove the __cdecl or __stdcall calling convention.
C4439 is always issued as an error. You can turn off this warning with the #pragma warning or /wd; see warning or /w, /Wn, /WX, /Wall, /wln, /wdn, /wen, /won (Warning Level) for more information.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/ms173699.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/ms173699.aspx</a></p>
]]>
    </description>
    <internalKey>C4439</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4440</key>
    <name>C4440: calling convention redefinition from 'calling_convention1' to 'calling_convention2' ignored</name>
    <description><![CDATA[<p>
An attempt to change the calling convention was ignored.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/xbsa2yce.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/xbsa2yce.aspx</a></p>
]]>
    </description>
    <internalKey>C4440</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4441</key>
    <name>C4441: calling convention of 'cc1' ignored; 'cc2' used instead</name>
    <description><![CDATA[<p>
Member functions in managed user-defined types and global function generics must use the __clrcall calling convention. The compiler used __clrcall.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/ms173700.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/ms173700.aspx</a></p>
]]>
    </description>
    <internalKey>C4441</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4445</key>
    <name>C4445: 'function' : in a managed type a virtual method cannot be private</name>
    <description><![CDATA[<p>
If a virtual function is private, it cannot be accessed by a derived type.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/ms173701.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/ms173701.aspx</a></p>
]]>
    </description>
    <internalKey>C4445</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4456</key>
    <name>C4456: declaration of 'variable' hides previous local declaration</name>
    <description><![CDATA[<p>
      A variable declaration "shadows" another if the enclosing scope already contains a variable with the same name.
</p><h2>MSDN Documentation</h2>
<p><a href="http://blogs.msdn.com/b/vcblog/archive/2014/11/12/improvements-to-warnings-in-the-c-compiler.aspx" target="_blank">http://blogs.msdn.com/b/vcblog/archive/2014/11/12/improvements-to-warnings-in-the-c-compiler.aspx</a></p>
]]>
    </description>
    <internalKey>C4456</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4457</key>
    <name>C4457: declaration of 'variable' hides function parameter</name>
    <description><![CDATA[<p>
      The inner declaration of 'variable' shadows the parameter of function with the same name.
</p><h2>MSDN Documentation</h2>
<p><a href="http://blogs.msdn.com/b/vcblog/archive/2014/11/12/improvements-to-warnings-in-the-c-compiler.aspx" target="_blank">http://blogs.msdn.com/b/vcblog/archive/2014/11/12/improvements-to-warnings-in-the-c-compiler.aspx</a></p>
]]>
    </description>
    <internalKey>C4457</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4458</key>
    <name>C4458: declaration of 'parameter' hides class member</name>
    <description><![CDATA[<p>
The inner declaration of 'paramter' shadows the member of class with the same name.
]]>
    </description>
    <internalKey>C4458</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4460</key>
    <name>C4460: CLR operator 'operator', has parameter passed by reference. CLR operator 'operator' has different semantics from C++ operator 'operator', did you intend to pass by value?</name>
    <description><![CDATA[<p>
You passed a value by reference to a user-defined CLR operator. If the value is changed inside the function, note that the value returned after the function call will be assigned the return value of the function. In standard C++, the changed value is reflected after the function call.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/2ah9xat3.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/2ah9xat3.aspx</a></p>
]]>
    </description>
    <internalKey>C4460</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4461</key>
    <name>C4461: 'type' : this class has a finalizer 'finalizer' but no destructor 'dtor'</name>
    <description><![CDATA[<p>
The presence of a finalizer in a type implies resources to delete. Unless a finalizer is explicitly called from the type's destructor, the common language runtime determines when to run the finalizer, after your object goes out of scope.
If you define a destructor in the type and explicitly call the finalizer from the destructor, you can deterministically run your finalizer.
For more information, see Destructors and Finalizers in Visual C++.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/ms235250.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/ms235250.aspx</a></p>
]]>
    </description>
    <internalKey>C4461</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4462</key>
    <name>C4462: cannot determine the GUID of the type. Program may fail at runtime</name>
    <description><![CDATA[<p>
Warning C4462 occurs in a Windows Runtime app or component when a public TypedEventHandler has as one of its type parameters a reference to the enclosing class. 
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/dn659698.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/dn659698.aspx</a></p>
]]>
    </description>
    <internalKey>C4462</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4470</key>
    <name>C4470: floating-point control pragmas ignored under /clr</name>
    <description><![CDATA[<p>
The float-control pragmas:
- fenv_access
- float_control
- fp_contract
have no effect under /clr.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/s3x2c0hw.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/s3x2c0hw.aspx</a></p>
]]>
    </description>
    <internalKey>C4470</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4471</key>
    <name>C4471: forward declaration of an unscoped enumeration must have an underlying type</name>
    <description>
    <![CDATA[<p>
A forward declaration of an unscoped enumeration must have an underlying type( int assumed ).</p>
<pre><code>
// unscoped enum
enum class C {x,y}; //scoped, base is int by default
// scoped enum
enum class Z: char {x,y}; //scoped, base is char
// forward declaration
enum class Direction: short; //enum base is short
</code></pre>
<h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/23k5d385.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/23k5d385.aspx</a></p>
]]>
    </description>
    <internalKey>C4471</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4473</key>
    <name>C4473: '&lt;function&gt;' : not enough arguments passed for format string</name>
    <description>
    <![CDATA[<p>
Missing variadic arguments can be as big of a security concern as incorrect types, because they may cause your program to read garbage from the stack.
</p><h2>MSDN Documentation</h2>
<p><a href="http://blogs.msdn.com/b/vcblog/archive/2015/06/22/format-specifiers-checking.aspx#C4473" target="_blank">http://blogs.msdn.com/b/vcblog/archive/2015/06/22/format-specifiers-checking.aspx#C4473</a></p>
<h2>References</h2>
<p><a href="https://cwe.mitre.org/data/definitions/398.html" target="_blank">CWE-398: Indicator of Poor Code Quality</a></p>
]]>
    </description>
    <tag>bug</tag>
    <tag>cwe</tag>    
    <internalKey>C4473</internalKey>
    <severity>MAJOR</severity>
    <type>BUG</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4474</key>
    <name>C4474: '&lt;function&gt;' : too many arguments passed for format string</name>
    <description>
    <![CDATA[<p>
Compiling this with default flags wouldn‚Äôt result in any diagnostic messages, giving you a false sense of security, but you can clearly see that there are problems here. Unfortunately, always giving a warning when a format string is not a string literal turned out to generate too many warnings on valid use cases (e.g. localization), so as a compromise we decided to provide this warning as off by default.
</p><h2>MSDN Documentation</h2>
<p><a href="http://blogs.msdn.com/b/vcblog/archive/2015/06/22/format-specifiers-checking.aspx#C4474" target="_blank">http://blogs.msdn.com/b/vcblog/archive/2015/06/22/format-specifiers-checking.aspx#C4474</a></p>
<h2>References</h2>
<p><a href="https://cwe.mitre.org/data/definitions/398.html" target="_blank">CWE-398: Indicator of Poor Code Quality</a></p>
]]>
    </description>
    <tag>bug</tag>
    <tag>cwe</tag>    
    <internalKey>C4474</internalKey>
    <severity>MAJOR</severity>
    <type>BUG</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4475</key>
    <name>C4475: '&lt;function&gt;' : length modifier '&lt;length&gt;' cannot be used with type field character '&lt;conversion-specifier&gt;' in format specifier</name>
    <description>
    <![CDATA[
<h2>MSDN Documentation</h2>
<p><a href="http://blogs.msdn.com/b/vcblog/archive/2015/06/22/format-specifiers-checking.aspx#C4475" target="_blank">http://blogs.msdn.com/b/vcblog/archive/2015/06/22/format-specifiers-checking.aspx#C4475</a></p>
]]>
    </description>
    <internalKey>C4475</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4476</key>
    <name>C4476: '&lt;function&gt;' : unknown type field character '&lt;conversion-specifier&gt;' in format specifier</name>
    <description>
    <![CDATA[
<h2>MSDN Documentation</h2>
<p><a href="http://blogs.msdn.com/b/vcblog/archive/2015/06/22/format-specifiers-checking.aspx#C4476" target="_blank">http://blogs.msdn.com/b/vcblog/archive/2015/06/22/format-specifiers-checking.aspx#C4476</a></p>
]]>
    </description>
    <internalKey>C4476</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4477</key>
    <name>C4477: '&lt;function&gt;' :format string '&lt;format-string&gt;' requires an argument of type '&lt;type&gt;', but variadic argument &lt;position&gt; has type '&lt;type&gt;'</name>
    <description>
    <![CDATA[
<h2>MSDN Documentation</h2>
<p><a href="http://blogs.msdn.com/b/vcblog/archive/2015/06/22/format-specifiers-checking.aspx#C4477" target="_blank">http://blogs.msdn.com/b/vcblog/archive/2015/06/22/format-specifiers-checking.aspx#C4477</a></p>
]]>
    </description>
    <tag>bug</tag>
    <internalKey>C4477</internalKey>
    <severity>MAJOR</severity>
    <type>BUG</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4478</key>
    <name>C4478: '&lt;function&gt;' : positional and non-positional placeholders cannot be mixed in the same format string</name>
    <description>
    <![CDATA[
<h2>MSDN Documentation</h2>
<p><a href="http://blogs.msdn.com/b/vcblog/archive/2015/06/22/format-specifiers-checking.aspx#C4478" target="_blank">http://blogs.msdn.com/b/vcblog/archive/2015/06/22/format-specifiers-checking.aspx#C4478</a></p>
]]>
    </description>
    <tag>bug</tag>
    <internalKey>C4478</internalKey>
    <severity>MAJOR</severity>
    <type>BUG</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4480</key>
    <name>C4480: nonstandard extension used: specifying underlying type for enum 'enum'</name>
    <description><![CDATA[<p>
An extension to the language under /clr was used without /clr. You can disable C4480 with the warning pragma.
For more information, see /clr (Common Language Runtime Compilation), /Za, /Ze (Disable Language Extensions), enum class, and C++ Enumeration Declarations.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/ms173702.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/ms173702.aspx</a></p>
]]>
    </description>
    <internalKey>C4480</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4481</key>
    <name>C4481: nonstandard extension used: override specifier 'keyword'</name>
    <description><![CDATA[<p>
A keyword was used that is not in the C++ standard, for example, one of the override specifiers that also works under /clr. For more information, see,
- /clr (Common Language Runtime Compilation)
- Override Specifiers
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/ms173703.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/ms173703.aspx</a></p>
]]>
    </description>
    <internalKey>C4481</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4482</key>
    <name>C4482: nonstandard extension used: enum 'enum' used in qualified name</name>
    <description><![CDATA[<p>
When you refer to an enum inside a type, you do not need to specify the name of the enum.
For more information on CLR enums, see enum class. For more information about native enums, see C++ Enumeration Declarations.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/ms173704.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/ms173704.aspx</a></p>
]]>
    </description>
    <internalKey>C4482</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4484</key>
    <name>C4484: 'override_function' : matches base ref class method 'base_class_function', but is not marked 'virtual', 'new' or 'override'; 'new' (and not 'virtual') is assumed</name>
    <description><![CDATA[<p>
When compiling with /clr, the compiler will not implicitly override a base class function, which means the function will get a new slot in the vtable. To resolve, explicitly specify whether a function is an override.
For more information, see:
- /clr (Common Language Runtime Compilation)
- override
- new (new slot in vtable)
C4484 is always issued as an error. Use the warning pragma to suppress C4484.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/ms235382.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/ms235382.aspx</a></p>
]]>
    </description>
    <internalKey>C4484</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4485</key>
    <name>C4485: 'override_function' : matches base ref class method 'base_class_function ', but is not marked 'new' or 'override'; 'new' (and 'virtual') is assumed</name>
    <description><![CDATA[<p>
An accessor overrides, with or without the virtual keyword, a base class accessor function, but the override or new specifier was not part of the overriding function signature. Add the new or override specifier to resolve this warning.
See override and new (new slot in vtable) for more information.
C4485 is always issued as an error. Use the warning pragma to suppress C4485.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/ms235548.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/ms235548.aspx</a></p>
]]>
    </description>
    <internalKey>C4485</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4486</key>
    <name>C4486: 'function' : a private virtual method of a ref class or value class should be marked 'sealed'</name>
    <description><![CDATA[<p>
Since a private virtual member function of a managed class or struct cannot be accessed or overridden, it should be marked sealed.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/ms235339.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/ms235339.aspx</a></p>
]]>
    </description>
    <internalKey>C4486</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4487</key>
    <name>C4487: 'derived_class_function' : matches inherited non-virtual method 'base_class_function' but is not explicitly marked 'new'</name>
    <description><![CDATA[<p>
A function in a derived class has the same signature as a non-virtual base class function. C4487 reminds you that the derived class function does not override the base class function. Explicitly mark the derived class function as new to resolve this warning.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/ms235506.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/ms235506.aspx</a></p>
]]>
    </description>
    <internalKey>C4487</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4488</key>
    <name>C4488: 'function' : requires 'keyword' keyword to implement the interface method 'interface_method'</name>
    <description><![CDATA[<p>
A class must implement all members of an interface from which it directly inherits. An implemented member must have public accessibility, and must be marked virtual.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/ms235440.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/ms235440.aspx</a></p>
]]>
    </description>
    <internalKey>C4488</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4489</key>
    <name>C4489: 'specifier' : not allowed on interface method 'method'; override specifiers are only allowed on ref class and value class methods</name>
    <description><![CDATA[<p>
A specifier keyword was incorrectly used on an interface method.
For more information, see Override Specifiers.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/ms235396.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/ms235396.aspx</a></p>
]]>
    </description>
    <internalKey>C4489</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4490</key>
    <name>C4490: 'override' : incorrect use of override specifier; 'function' does not match a base ref class method</name>
    <description><![CDATA[<p>
An override specifier was used incorrectly. For example, you do not override an interface function, you implement it.
For more information, see Override Specifiers.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/ms235600.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/ms235600.aspx</a></p>
]]>
    </description>
    <internalKey>C4490</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4502</key>
    <name>C4502: 'linkage specification' requires use of keyword 'extern' and must precede all other specifiers</name>
    <description><![CDATA[<p>
A linkage was specified without the extern keyword. Linkage is not relevant to non-extern types.
The compiler assumed the extern keyword.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/4e2bzhs2.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/4e2bzhs2.aspx</a></p>
]]>
    </description>
    <internalKey>C4502</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4503</key>
    <name>C4503: 'identifier' : decorated name length exceeded, name was truncated</name>
    <description><![CDATA[<p>
The decorated name was longer than the compiler limit (4096), and was truncated. To avoid this warning and the truncation, reduce the number of arguments or name length of identifiers used.
One situation where this warning will be issued is when your code contains templates specialized on templates repeatedly. For example, a map of maps (from the Standard C++ Library). In this situation, you can make your typedefs a type (struct, for example) that contains the map.
You might, however, decide to not restructure your code. It is possible to ship an application that generates C4503, but if you get link time errors on a truncated symbol, it will be more difficult to determine the type of the symbol in the error. Debugging will also be more difficult; the debugger will also have difficultly mapping symbol name to type name. The correctness of the program, however, is unaffected by the truncated name.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/074af4b6.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/074af4b6.aspx</a></p>
]]>
    </description>
    <internalKey>C4503</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4505</key>
    <name>C4505: 'function' : unreferenced local function has been removed</name>
    <description><![CDATA[<p>
The given function is local and not referenced in the body of the module; therefore, the function is dead code.
The compiler did not generate code for this dead function.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/z85eyax0.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/z85eyax0.aspx</a></p>
]]>
    </description>
    <internalKey>C4505</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4506</key>
    <name>C4506: no definition for inline function 'function'</name>
    <description><![CDATA[<p>
The given function was declared and marked for inlining but was not defined.
The compiler did not inline the function.
Make sure that external functions to be inlined are declared with the extern keyword.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/51784kyx.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/51784kyx.aspx</a></p>
]]>
    </description>
    <internalKey>C4506</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4508</key>
    <name>C4508: 'function' : function should return a value; 'void' return type assumed</name>
    <description><![CDATA[<p>
The function has no return type specified. In this case, C4430 should also fire and the compiler implements the fix reported by C4430 (default value is int).
To resolve this warning, explicitly declare the return type of functions. 
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/sczye45k.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/sczye45k.aspx</a></p>
]]>
    </description>
    <tag>convention</tag>
    <internalKey>C4508</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4509</key>
    <name>C4509: nonstandard extension used: 'function' uses SEH and 'object' has destructor</name>
    <description><![CDATA[<p>
You should not use structured exception handling in functions that use objects with destructors. If an exception occurs, the destructor cannot be called. Use C++ exception handling instead.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/vstudio/syzh26ty.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/vstudio/syzh26ty.aspx</a></p>
]]>
    </description>
    <internalKey>C4509</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4510</key>
    <name>C4510: 'class' : default constructor could not be generated</name>
    <description><![CDATA[<p>
The compiler cannot generate a default constructor for the specified class and no user-defined constructor was created. You will not be able to create objects of this type.
There are several situations that prevent the compiler from generating a default constructor, including:
- A const data member.
- A data member that is a reference.
You need to create a user-defined default constructor for the class that initializes these members.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/2cf74y2b.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/2cf74y2b.aspx</a></p>
]]>
    </description>
    <internalKey>C4510</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4511</key>
    <name>C4511: 'class' : copy constructor could not be generated</name>
    <description><![CDATA[<p>
The compiler could not generate a default copy-constructor for a class; a base class may have a private copy-constructor.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/2f10sfzz.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/2f10sfzz.aspx</a></p>
]]>
    </description>
    <internalKey>C4511</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4512</key>
    <name>C4512: 'class' : assignment operator could not be generated</name>
    <description><![CDATA[<p>
The compiler cannot generate an assignment operator for the given class. No assignment operator was created.
An assignment operator for the base class that is not accessible by the derived class can cause this warning.
To avoid this warning, specify a user-defined assignment operator for the class.
The compiler will also generate an assignment operator function for a class that does not define one. This assignment operator is a memberwise copy of the data members of an object. Because const data items cannot be modified after initialization, if the class contains a const item, the default assignment operator would not work. Another cause of the C4512 warning is a declaration of a nonstatic data member of reference type.
You can resolve the C4512 warning for your code in one of three ways:
- Explicitly define an assignment operator for the class.
- Remove const or the reference operator from the data item in the class.
- Use the #pragma warning statement to suppress the warning.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/hsyx7kbz.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/hsyx7kbz.aspx</a></p>
]]>
    </description>
    <internalKey>C4512</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4513</key>
    <name>C4513: 'class' : destructor could not be generated</name>
    <description><![CDATA[<p>
The compiler cannot generate a default destructor for the given class; no destructor was created. The destructor is in a base class that is not accessible to the derived class. If the base class has a private destructor, make it public or protected.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/b0ew74dc.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/b0ew74dc.aspx</a></p>
]]>
    </description>
    <internalKey>C4513</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4514</key>
    <name>C4514: 'function' : unreferenced inline function has been removedy</name>
    <description><![CDATA[<p>
The optimizer removed an inline function that is not called.
This warning is off by default. See Compiler Warnings That Are Off by Default for more information.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/cw9x3tcf.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/cw9x3tcf.aspx</a></p>
]]>
    </description>
    <internalKey>C4514</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4515</key>
    <name>C4515: 'namespace' : namespace uses itself</name>
    <description><![CDATA[<p>
A namespace is used recursively.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/aah71ce4.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/aah71ce4.aspx</a></p>
]]>
    </description>
    <internalKey>C4515</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4516</key>
    <name>C4516: 'class::symbol' : access-declarations are deprecated; member using-declarations provide a better alternative</name>
    <description><![CDATA[<p>
The ANSI C++ committee has declared access declarations (changing the access of a member in a derived class without the using keyword) to be outdated. Access declarations may not be supported by future versions of C++.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/wtabes1z.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/wtabes1z.aspx</a></p>
]]>
    </description>
    <internalKey>C4516</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4517</key>
    <name>C4517: access-declarations are deprecated; member using-declarations provide a better alternative</name>
    <description><![CDATA[<p>
      The ANSI C++ committee has declared access declarations (changing the access of a member in a derived class without the using keyword) to be outdated. Access declarations may not be supported by future versions of C++.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/dwtyzhyw.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/dwtyzhyw.aspx</a></p>
]]>
    </description>
    <internalKey>C4517</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4518</key>
    <name>C4518: 'specifier' : storage-class or type specifier(s) unexpected here; ignored</name>
    <description><![CDATA[<p>
      'specifier' : storage-class or type specifier(s) unexpected here; ignored
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/bd6st41x.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/bd6st41x.aspx</a></p>
]]>
    </description>
    <internalKey>C4518</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4519</key>
    <name>C4519: default template arguments are only allowed on a class template</name>
    <description><![CDATA[<p>
Default template arguments are allowed only on a class template declaration or definition. Default template arguments may not be used in a function template, or in the definition of a member of a class template.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/190h9wbh.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/190h9wbh.aspx</a></p>
]]>
    </description>
    <internalKey>C4519</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4520</key>
    <name>C4520: 'class' : multiple default constructors specified</name>
    <description><![CDATA[<p>
The class has multiple default constructors. The first constructor is used.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/f7fwa979.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/f7fwa979.aspx</a></p>
]]>
    </description>
    <internalKey>C4520</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4521</key>
    <name>C4521: 'class' : multiple copy constructors specified</name>
    <description><![CDATA[<p>
The class has multiple copy constructors of a single type. This warning is informational; the constructors are callable in your program.
Use the warning pragma to suppress this warning.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/e02fwk4s.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/e02fwk4s.aspx</a></p>
]]>
    </description>
    <internalKey>C4521</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4522</key>
    <name>C4522: 'class' : multiple assignment operators specified</name>
    <description><![CDATA[<p>
The class has multiple assignment operators of a single type. This warning is informational; the constructors are callable in your program.
Use the warning pragma to suppress this warning.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/fd45k287.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/fd45k287.aspx</a></p>
]]>
    </description>
    <internalKey>C4522</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4523</key>
    <name>C4523: 'class' : multiple destructors specified</name>
    <description><![CDATA[<p>
The class has multiple destructors. 
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/86scb1af.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/86scb1af.aspx</a></p>
]]>
    </description>
    <internalKey>C4523</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4526</key>
    <name>C4526: 'function' : static member function cannot override virtual function 'virtual function'override ignored, virtual function will be hidden</name>
    <description><![CDATA[<p>
The static member function meets the criteria to override the virtual function, which makes the member function both virtual and static.
The following are possible fixes:
- If the function was intended to override the base class virtual function, remove the static specifier.
- If the function was intended to be a static member function, rename it so it doesn't conflict with the base class virtual function.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/9t91hh70.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/9t91hh70.aspx</a></p>
]]>
    </description>
    <tag>bug</tag>
    <internalKey>C4526</internalKey>
    <severity>MAJOR</severity>
    <type>BUG</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4530</key>
    <name>C4530: C++ exception handler used, but unwind semantics are not enabled. Specify /EHsc </name>
    <description><![CDATA[<p>
When the /EHsc option has not been enabled, an object with automatic storage in the frame, between the function doing the throw and the function catching the throw, will not be destroyed. However, an object with automatic storage created in a try or catch block will be destroyed.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/2axwkyt4.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/2axwkyt4.aspx</a></p>
]]>
    </description>
    <internalKey>C4530</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4532</key>
    <name>C4532: 'continue' : jump out of __finally/finally block has undefined behavior during termination handling</name>
    <description><![CDATA[<p>
The compiler encountered one of the following keywords:
- continue
- break
- goto
causing a jump out of a __finally or finally block during abnormal termination.
If an exception occurs, and while the stack is being unwound during execution of the termination handlers (the __finally or finally blocks), and your code jumps out of a __finally block before the __finally block ends, the behavior is undefined. Control may not return to the unwinding code, so the exception may not be handled properly.
If you must jump out of a __finally block, check for abnormal termination first.
The following sample generates C4532; simply comment out the jump statements to resolve the warnings.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/h6b9te7b.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/h6b9te7b.aspx</a></p>
]]>
    </description>
    <internalKey>C4532</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4533</key>
    <name>C4533: initialization of 'variable' is skipped by 'instruction'</name>
    <description><![CDATA[<p>
An instruction in your program changed the flow of control, such that, an instruction that initialized a variable was not executed.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/f7687yks.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/f7687yks.aspx</a></p>
]]>
    </description>
    <internalKey>C4533</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4534</key>
    <name>C4534: 'constructor' will not be a default constructor for class 'class' due to the default argument</name>
    <description><![CDATA[<p>
An unmanaged class can have a constructor with parameters that have default values and the compiler will use this as the default constructor. A class marked with the value keyword will not use a constructor with default values for its parameters as a default constructor.
For more information, see Classes and Structs (Platform).
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/e324z09f.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/e324z09f.aspx</a></p>
]]>
    </description>
    <internalKey>C4534</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4535</key>
    <name>C4535: calling _set_se_translator() requires /EHa</name>
    <description><![CDATA[<p>
The use of _set_se_translator requires the /EHa compiler option and not /EHs.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/h7y85sb9.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/h7y85sb9.aspx</a></p>
]]>
    </description>
    <internalKey>C4535</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4536</key>
    <name>C4536: 'type name' : type-name exceeds meta-data limit of 'limit' characters</name>
    <description><![CDATA[<p>
A type name would be truncated in metadata if it was a managed type. See C3180 for more information.
This warning is off by default. See Compiler Warnings That Are Off by Default for more information.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/fczfkttx.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/fczfkttx.aspx</a></p>
]]>
    </description>
    <internalKey>C4536</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4537</key>
    <name>C4537: 'object' : 'operator' applied to non-UDT type</name>
    <description><![CDATA[<p>
A reference was passed where an object (user-defined type) was expected. A reference is not an object, but inline assembler code is not able to make the distinction. The compiler generates code as though object were an instance.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/2wf5d298.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/2wf5d298.aspx</a></p>
]]>
    </description>
    <internalKey>C4537</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4538</key>
    <name>C4538: 'type' : const/volatile qualifiers on this type are not supported</name>
    <description><![CDATA[<p>
A qualifier keyword was applied to an array incorrectly. For more information, see array.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/6hw6x2h2.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/6hw6x2h2.aspx</a></p>
]]>
    </description>
    <internalKey>C4538</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4539</key>
    <name>C4539: 'char': a universal-character-name specifies an invalid character</name>
    <description><![CDATA[<p>
A character was specified out of Unicode range.
The character must be in the Unicode range, or be a valid surropate pair.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/t0a6019f.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/t0a6019f.aspx</a></p>
]]>
    </description>
    <tag>bug</tag>
    <internalKey>C4539</internalKey>
    <severity>MAJOR</severity>
    <type>BUG</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4540</key>
    <name>C4540: dynamic_cast used to convert to inaccessible or ambiguous base; run-time test will fail ('type1' to 'type2')</name>
    <description><![CDATA[<p>
      You used dynamic_cast to convert from one type to another. The compiler determined that the cast would always fail (return NULL) because a base class is inaccessible (private, for instance) or ambiguous (appears more than once in the class hierarchy, for instance).
      The following shows an example of this warning. Class B is derived from class A. The program uses dynamic_cast to cast from class B (the derived class) to class A, which will always fail because class B is private and thus inaccessible. Changing the access of A to public will resolve the warning.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/t0a6019f.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/t0a6019f.aspx</a></p>
]]>
    </description>
    <internalKey>C4540</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4541</key>
    <name>C4541: 'identifier' used on polymorphic type 'type' with /GR-; unpredictable behavior may result</name>
    <description><![CDATA[<p>
You tried to use a feature that requires run-time type information without enabling run-time type information. Recompile with /GR.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/8kyye6db.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/8kyye6db.aspx</a></p>
]]>
    </description>
    <tag>bug</tag>
    <internalKey>C4541</internalKey>
    <severity>MAJOR</severity>
    <type>BUG</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4543</key>
    <name>C4543: Injected text suppressed by attribute 'no_injected_text'</name>
    <description><![CDATA[<p>
The no_injected_text attribute appeared in source code, which means the compiler will prevent attributes from injecting code.
This warning is to remind you that attributes will not be able to inject code.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/d5721fah.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/d5721fah.aspx</a></p>
]]>
    </description>
    <internalKey>C4543</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4544</key>
    <name>C4544: Default arguments on template declaration ignored</name>
    <description><![CDATA[<p>
A default template argument was specified in an incorrect location and was ignored. A default template argument for a class template can only be specified in the declaration or definition of the class template and not on a member of the class template.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/9c744dsz.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/9c744dsz.aspx</a></p>
]]>
    </description>
    <internalKey>C4544</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4545</key>
    <name>C4545: expression before comma evaluates to a function which is missing an argument list</name>
    <description><![CDATA[<p>
The compiler detected an ill-formed comma expression.
This warning is off by default. For more information, see Compiler Warnings That Are Off by Default.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/s2xatszb.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/s2xatszb.aspx</a></p>
]]>
    </description>
    <internalKey>C4545</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4546</key>
    <name>C4546: function call before comma missing argument list</name>
    <description><![CDATA[<p>
The compiler detected an ill-formed comma expression.
This warning is off by default. For more information, see Compiler Warnings That Are Off by Default.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/7be2hd1z.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/7be2hd1z.aspx</a></p>
]]>
    </description>
    <internalKey>C4546</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4547</key>
    <name>C4547: 'operator' : operator before comma has no effect; expected operator with side-effect</name>
    <description><![CDATA[<p>
The compiler detected an ill-formed comma expression.
This warning is off by default. For more information, see Compiler Warnings That Are Off by Default.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/y1724hsf.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/y1724hsf.aspx</a></p>
]]>
    </description>
    <internalKey>C4547</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4548</key>
    <name>C4548: expression before comma has no effect; expected expression with side-effect</name>
    <description><![CDATA[<p>
The compiler detected an ill-formed comma expression.
This warning is off by default. For more information, see Compiler Warnings That Are Off by Default.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/yxyxx8fx.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/yxyxx8fx.aspx</a></p>
]]>
    </description>
    <internalKey>C4548</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4549</key>
    <name>C4549: 'operator' : operator before comma has no effect; did you intend 'operator'?</name>
    <description><![CDATA[<p>
The compiler detected an ill-formed comma expression.
This warning is off by default. For more information, see Compiler Warnings That Are Off by Default.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/60yhzzeh.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/60yhzzeh.aspx</a></p>
]]>
    </description>
    <internalKey>C4549</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4550</key>
    <name>C4550: expression evaluates to a function which is missing an argument list</name>
    <description><![CDATA[<p>
A dereferenced pointer to a function is missing an argument list.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/cfdy6kcc.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/cfdy6kcc.aspx</a></p>
]]>
    </description>
    <internalKey>C4550</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4551</key>
    <name>C4551: function call missing argument list</name>
    <description><![CDATA[<p>
A function call must include the open and close parentheses after the function name even if the function takes no parameters.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/ksxhyt4e.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/ksxhyt4e.aspx</a></p>
]]>
    </description>
    <internalKey>C4551</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4552</key>
    <name>C4552: 'operator' : operator has no effect; expected operator with side-effect</name>
    <description><![CDATA[<p>
If an expression statement has an operator with no side effect as the top of the expression, it's probably a mistake.
To override this warning, put the expression in parentheses.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/577cze47.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/577cze47.aspx</a></p>
]]>
    </description>
    <internalKey>C4552</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4553</key>
    <name>C4553: 'operator' : operator has no effect; did you intend 'operator'?</name>
    <description><![CDATA[<p>
If an expression statement has an operator with no side effect as the top of the expression, it's probably a mistake.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/e11e1wz2.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/e11e1wz2.aspx</a></p>
]]>
    </description>
    <internalKey>C4553</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4554</key>
    <name>C4554: 'operator' : check operator precedence for possible error; use parentheses to clarify precedence</name>
    <description><![CDATA[<p>
'operator' : check operator precedence for possible error; use parentheses to clarify precedence
 </p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/5d2e57c5.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/5d2e57c5.aspx</a></p>
]]>
    </description>
    <internalKey>C4554</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4555</key>
    <name>C4555: expression has no effect; expected expression with side-effect</name>
    <description><![CDATA[<p>
This warning informs you when an expression has no effect.
This warning is off by default. See Compiler Warnings That Are Off by Default for more information.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/k64a6he5.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/k64a6he5.aspx</a></p>
]]>
    </description>
    <internalKey>C4555</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4556</key>
    <name>C4556: value of intrinsic immediate argument 'value' is out of range 'lowerbound - upperbound'</name>
    <description><![CDATA[<p>
An intrinsic matches a hardware instruction. The hardware instruction has a fixed number of bits to encode the constant. If value is out of range, it will not encode properly. The compiler truncates the extra bits.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/z1sax8t1.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/z1sax8t1.aspx</a></p>
]]>
    </description>
    <internalKey>C4556</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4557</key>
    <name>C4557: '__assume' contains effect 'effect'</name>
    <description><![CDATA[<p>
The value passed to an __assume statement2 was modified.
This warning is off by default. See Compiler Warnings That Are Off by Default for more information.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/6ka2yake.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/6ka2yake.aspx</a></p>
]]>
    </description>
    <internalKey>C4557</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4558</key>
    <name>C4558: value of operand 'value' is out of range 'lowerbound - upperbound'</name>
    <description><![CDATA[<p>
The value passed to an assembly language instruction is out of the range specified for the parameter. The value will be truncated.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/9s1494e1.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/9s1494e1.aspx</a></p>
]]>
    </description>
    <internalKey>C4558</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4559</key>
    <name>C4559: 'function' : redefinition; the function gains __declspec(modifier)</name>
    <description><![CDATA[<p>
A function was redefined or redeclared and the second definition or declaration added a __declspec modifier (modifier). This warning is informational. To fix this warning, delete one of the definitions.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/4kb580h0.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/4kb580h0.aspx</a></p>
]]>
    </description>
    <internalKey>C4559</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4561</key>
    <name>C4561: '__fastcall' incompatible with the '/clr' option: converting to '__stdcall'</name>
    <description><![CDATA[<p>
      The __fastcall function-calling convention cannot be used with the /clr compiler option. The compiler ignores the calls to __fastcall. To fix this warning, either remove the calls to __fastcall or compile without /clr. 
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/fb18b15e.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/fb18b15e.aspx</a></p>
]]>
    </description>
    <internalKey>C4561</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4564</key>
    <name>C4564: method 'method' of class 'class' defines unsupported default parameter 'parameter'</name>
    <description><![CDATA[<p>
The compiler detected a method with one or more parameters with default values. The default value(s) for the parameters will be ignored when the method is invoked; explicitly specify values for those parameters. If you do not explicitly specify values for those parameters, the C++ compiler will generate an error.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/8ehbb95s.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/8ehbb95s.aspx</a></p>
]]>
    </description>
    <internalKey>C4564</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4565</key>
    <name>C4565: 'function' : redefinition; the symbol was previously declared with __declspec(modifier)</name>
    <description><![CDATA[<p>
A symbol was redefined or redeclared and the second definition or declaration, unlike the first definition or declaration, did not have a __declspec modifier (modifier). This warning is informational. To fix this warning, delete one of the definitions.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/8ehbb95s.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/8ehbb95s.aspx</a></p>
]]>
    </description>
    <internalKey>C4565</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4566</key>
    <name>C4566: character represented by universal-character-name 'char' cannot be represented in the current code page (page)</name>
    <description><![CDATA[<p>
Not every Unicode character can be represented in your current ANSI code page.
Narrow strings (one-byte characters) are converted to multi-byte characters whereas wide strings (two-byte characters) are not.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/5zkb5h07.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/5zkb5h07.aspx</a></p>
]]>
    </description>
    <internalKey>C4566</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4570</key>
    <name>C4570: 'type' : is not explicitly declared as abstract but has abstract functions</name>
    <description><![CDATA[<p>
A type that contains abstract (Visual C++) functions should itself be marked as abstract.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/ms173705.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/ms173705.aspx</a></p>
]]>
    </description>
    <internalKey>C4570</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4571</key>
    <name>C4571: Informational: catch(...) semantics changed since Visual C++ 7.1; structured exceptions (SEH) are no longer caught</name>
    <description><![CDATA[<p>
When compiling with /EHs, a catch(...) block will not catch a structured exception (divide by zero, null pointer, for example); a catch(...) block will only catch explicitly-thrown, C++ exceptions. For more information, see Exception Handling in Visual C++.
This warning is off by default. Turn this warning on to ensure that when you compile with /EHs your catch (...) blocks do not intend to catch structured exceptions. See Compiler Warnings That Are Off by Default for more information.
You can resolve C4571 in one of the following ways,
- Compile with /EHa if you still want your catch(...) blocks to catch structured exceptions.
- Do not enable C4571 if you do not want your catch(...) blocks to catch structured exceptions, but you still want to use catch(...) blocks. You can still catch structured exceptions using the structured exception handling keywords (__try, __except, and __finally). But remember, when compiled /EHs destructors will only be called when a C++ exception is thrown, not when an SEH exception occurs.
- Replace catch(...) block with catch blocks for specific C++ exceptions, and optionally, add structured exception handling around the C++ exception handling (__try, __except, and __finally). See Structured Exception Handling (C++) for more information.
See /EH (Exception Handling Model) for more information.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/55s8esw4.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/55s8esw4.aspx</a></p>
]]>
    </description>
    <internalKey>C4571</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4572</key>
    <name>C4572: [ParamArray] attribute is deprecated under /clr, use '...' instead</name>
    <description><![CDATA[<p>
An obsolete style for specifying a variable argument list was used. When compiling for the CLR, use ellipsis syntax instead of ParamArrayAttribute. For more information, see Variable Argument Lists (...).
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/ms173706.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/ms173706.aspx</a></p>
]]> 
    </description>
    <internalKey>C4572</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4580</key>
    <name>C4580: [attribute] is deprecated; instead specify System::Attribute as a base class</name>
    <description><![CDATA[<p>
attribute is no longer the preferred syntax for creating user-defined attributes. For more information, see User-Defined Attributes.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/ms173707.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/ms173707.aspx</a></p>
]]>
    </description>
    <internalKey>C4580</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4581</key>
    <name>C4581: deprecated behavior: '"string1"' replaced with 'string2' to process attribute</name>
    <description><![CDATA[<p>
This error can be generated as a result of compiler conformance work that was done for Visual C++ 2005: parameter checking for Visual C++ attributes.
In previous versions, attribute values were accepted whether or not they were enclosed in quotation marks. If the value is an enumeration, it must not be enclosed in quotation marks.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/ms173708.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/ms173708.aspx</a></p>
]]>
    </description>
    <internalKey>C4581</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4584</key>
    <name>C4584: 'class1' : base-class 'class2' is already a base-class of 'class3'</name>
    <description><![CDATA[<p>
The class you defined inherits from two classes, one of which inherits from the other.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/69wx1dz9.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/69wx1dz9.aspx</a></p>
]]>
    </description>
    <internalKey>C4584</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4600</key>
    <name>C4600: #pragma 'macro name' : expected a valid non-empty string</name>
    <description><![CDATA[<p>
You cannot specify an empty string when you push or pop a macro name with either the pop_macro or push_macro.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/xy0xf298.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/xy0xf298.aspx</a></p>
]]>
    </description>
    <internalKey>C4600</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4606</key>
    <name>C4606: #pragma warning : 'warning_number' ignored; Code Analysis warnings are not associated with warning levels</name>
    <description><![CDATA[<p>
For Code Analysis warnings, only error, once, and default are supported with the warning pragma.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/ms173710.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/ms173710.aspx</a></p>
]]>
    </description>
    <internalKey>C4606</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4608</key>
    <name>C4608: 'union_member' has already been initialized by another union member in the initializer list, 'union_member'</name>
    <description><![CDATA[<p>
Two members of the same union were initialized in an initialization list. You can only access one member of the union.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/w2a7k47y.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/w2a7k47y.aspx</a></p>
]]>
    </description>
    <internalKey>C4608</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4610</key>
    <name>C4610: object 'class' can never be instantiated - user-defined constructor required</name>
    <description><![CDATA[<p>
The class has no user-defined or default constructors. No instantiation is performed
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/92d6x4xw.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/92d6x4xw.aspx</a></p>
]]>
    </description>
    <internalKey>C4610</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4611</key>
    <name>C4611: interaction between 'function' and C++ object destruction is non-portable</name>
    <description><![CDATA[<p>
On some platforms, functions that include catch may not support C++ object semantics of destruction when out of scope.
To avoid unexpected behavior, avoid using catch in functions that have constructors and destructors.
This warning is only issued once; see pragma warning.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/fsahb11c.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/fsahb11c.aspx</a></p>
]]>
    </description>
    <internalKey>C4611</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4615</key>
    <name>C4615: #pragma warning : unknown user warning type</name>
    <description><![CDATA[<p>
      An invalid warning specifier was used with pragma warning. To resolve the error, use a valid warning specifier. 
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/tb20bh01.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/tb20bh01.aspx</a></p>
]]>
    </description>
    <internalKey>C4615</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4616</key>
    <name>C4616: #pragma warning : warning number 'number' not a valid compiler warning</name>
    <description><![CDATA[<p>
The warning number specified in the warning pragma cannot be reassigned. The pragma was ignored.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/t7ab6xtd.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/t7ab6xtd.aspx</a></p>
]]>
    </description>
    <internalKey>C4616</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4618</key>
    <name>C4618: pragma parameters included an empty string; pragma ignored</name>
    <description><![CDATA[<p>
A null string was given as an argument to a #pragma.
The pragma was processed without the argument.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/1ytk25c8.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/1ytk25c8.aspx</a></p>
]]>
    </description>
    <internalKey>C4618</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4619</key>
    <name>C4619: #pragma warning : there is no warning number 'number'</name>
    <description><![CDATA[<p>
An attempt was made to disable a warning that does not exist.
This warning is off by default. See Compiler Warnings That Are Off by Default for more information.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/tacee08d.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/tacee08d.aspx</a></p>
]]>
    </description>
    <internalKey>C4619</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4621</key>
    <name>C4621: no postfix form of 'operator -' found for type 'type', using prefix form</name>
    <description><![CDATA[<p>
There was no postfix decrement operator defined for the given type. The compiler used the overloaded prefix operator.
This Can be avoided by defining a postfix - operator.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/bkt91exs.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/bkt91exs.aspx</a></p>
]]>
    </description>
    <internalKey>C4621</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4623</key>
    <name>C4623: 'derived class' : default constructor could not be generated because a base class default constructor is inaccessible</name>
    <description><![CDATA[<p>
A constructor was not accessible in a base class and was therefore not generated for a derived class. Any attempt to create an object of this type on the stack will cause a compiler error.
This warning is off by default. See Compiler Warnings That Are Off by Default for more information.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/8dk81ahy.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/8dk81ahy.aspx</a></p>
]]>
    </description>
    <internalKey>C4623</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4624</key>
    <name>C4624: 'derived class' : destructor could not be generated because a base class destructor is inaccessible</name>
    <description><![CDATA[<p>
A destructor was not accessible in a base class and was therefore not generated for a derived class. Any attempt to create an object of this type on the stack will cause a compiler error.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/fthdf523.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/fthdf523.aspx</a></p>
]]>
    </description>
    <internalKey>C4624</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4625</key>
    <name>C4625: 'derived class' : copy constructor could not be generated because a base class copy constructor is inaccessible</name>
    <description><![CDATA[<p>
A copy constructor was not accessible in a base class and was therefore not generated for a derived class. Any attempt to copy an object of this type will cause a compiler error.
This warning is off by default. See Compiler Warnings That Are Off by Default for more information.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/306zwa5e.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/306zwa5e.aspx</a></p>
]]>
    </description>
    <internalKey>C4625</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4626</key>
    <name>C4626: 'derived class' : assignment operator could not be generated because a base class assignment operator is inaccessible</name>
    <description><![CDATA[<p>
An assignment operator was not accessible in a base class and was therefore not generated for a derived class. Any attempt to assign objects of this type will cause a compiler error.
This warning is off by default. See Compiler Warnings That Are Off by Default for more information.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/6ay4xcyd.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/6ay4xcyd.aspx</a></p>
]]>
    </description>
    <internalKey>C4626</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4627</key>
    <name>C4627: '&lt;identifier&gt;': skipped when looking for precompiled header use</name>
    <description><![CDATA[<p>
      While searching for the location where a precompiled header is used, the compiler encountered an #include directive for the &lt;identifier&gt; include file. The compiler ignores the #include directive, but issues C4627 if the precompiled header does not already contain the &lt;identifier&gt; include file.
]]>
    </description>
    <internalKey>C4627</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4628</key>
    <name>C4628: digraphs not supported with -Ze. Character sequence 'digraph' not interpreted as alternate token for 'char'</name>
    <description><![CDATA[<p>
Digraphs are not supported under /Ze. This warning will be followed by an error.
This warning is off by default. See Compiler Warnings That Are Off by Default for more information.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/5xk7ehw0.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/5xk7ehw0.aspx</a></p>
]]>
    </description>
    <internalKey>C4628</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4630</key>
    <name>C4630: 'symbol' : 'extern' storage class specifier illegal on member definition</name>
    <description><![CDATA[<p>
A data member or member function is defined as extern. Members cannot be external, although entire objects can. The compiler ignores the extern keyword.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/adab0zdz.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/adab0zdz.aspx</a></p>
]]>
    </description>
    <internalKey>C4630</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4632</key>
    <name>C4632: XML document comment: file - access denied: reason</name>
    <description><![CDATA[<p>
The path to .xdc file (file) was not valid, and no .xdc file created.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/c4wbbfs7.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/c4wbbfs7.aspx</a></p>
]]>
    </description>
    <internalKey>C4632</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4633</key>
    <name>C4633: XML document comment target - error</name>
    <description><![CDATA[<p>
A name passed to the &lt;param&gt; tag was not found by the compiler.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/hyyc2td4.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/hyyc2td4.aspx</a></p>
]]>
    </description>
    <internalKey>C4633</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4639</key>
    <name>C4639: MSXML error, XML document comments will not be processed</name>
    <description><![CDATA[<p>
This Can occur for any number of reasons.
To resolve this warning:
- Recompile.
- Reinstall MSXML by reinstalling the common language runtime.
- Edit or remove the documentation comment that is causing the warning and recompile.
When C4639 is issued, all further XML comment processing is disabled, and the .xdc file is not generated.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/4et5f1bf.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/4et5f1bf.aspx</a></p>
]]>
    </description>
    <internalKey>C4639</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4640</key>
    <name>C4640: 'instance' : construction of local static object is not thread-safe</name>
    <description><![CDATA[<p>
A static instance of an object is not thread safe.
This warning is off by default. See Compiler Warnings That Are Off by Default for more information.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/4f5c8560.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/4f5c8560.aspx</a></p>
]]>
    </description>
    <internalKey>C4640</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4641</key>
    <name>C4641: XML document comment has an ambiguous cross reference</name>
    <description><![CDATA[<p>
The compiler was unable to unambiguously resolve a reference. To resolve this warning, specify the parameter information necessary to make the reference unambiguous.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/ms173711.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/ms173711.aspx</a></p>
]]>
    </description>
    <internalKey>C4641</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4650</key>
    <name>C4650: debugging information not in precompiled header; only global symbols from the header will be available</name>
    <description><![CDATA[<p>
The precompiled header file was not compiled with Microsoft symbolic debugging information.
When linked, the resulting executable or dynamic-link library file will not include debugging information for local symbols contained in the precompiled header.
This Can be avoided by recompiling the precompiled header file with the /Zi command-line option.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/8308e7ff.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/8308e7ff.aspx</a></p>
]]>
    </description>
    <internalKey>C4650</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4651</key>
    <name>C4651: 'definition' specified for precompiled header but not for current compile</name>
    <description><![CDATA[<p>
The definition was specified when the precompiled header was generated, but not in this compilation.
The definition will be in effect inside the precompiled header, but not in the rest of the code.
If a precompiled header was built with /DSYMBOL, the compiler will generate this warning if the /Yu compile doesn't have /DSYMBOL. Adding /DSYMBOL to the /Yu command line resolves this warning.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/h6dykdte.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/h6dykdte.aspx</a></p>
]]>
    </description>
    <internalKey>C4651</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4652</key>
    <name>C4652: compiler option 'option' inconsistent with precompiled header; current command-line option will override that defined in the precompiled header</name>
    <description><![CDATA[<p>
The given command-line option differed from that given when the precompiled header (.pch) was created. The option specified in the current command line was used.
This Can be avoided by regenerating the precompiled header with the given command-line option.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/taefctwx.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/taefctwx.aspx</a></p>
]]>
    </description>
    <internalKey>C4652</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4653</key>
    <name>C4653: compiler option 'option' inconsistent with precompiled header; current command-line option ignored</name>
    <description><![CDATA[<p>
An option specified with the Use Precompiled Headers (/Yu) option was inconsistent with the options specified when the precompiled header was created. This compilation used the option specified when the precompiled header was created.
This Can occur when a different value for the Pack Structures option (/Zp) was specified during compilation of the precompiled header.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/532th12d.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/532th12d.aspx</a></p>
]]>
    </description>
    <internalKey>C4653</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4656</key>
    <name>C4656: 'symbol' : data type is new or has changed since the last build, or is defined differently elsewhere</name>
    <description><![CDATA[<p>
You added or changed a data type, making it new to your source code since the last successful build. Edit and Continue does not support changes to existing data types.
This warning will always be followed by Fatal Error C1092. For further information, see the Supported Code Changes.

To remove this warning without ending the current debug session
- Change the data type back to its state prior to the error.
- From the Debug menu, choose Apply Code Changes.

To remove this error without changing your source code
- From the Debug menu, choose Stop Debugging.
- From the Build menu, choose Build.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/00kb6506.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/00kb6506.aspx</a></p>
]]>
    </description>
    <internalKey>C4656</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4659</key>
    <name>C4659: #pragma 'pragma' : use of reserved segment 'segment' has undefined behavior, use #pragma comment(linker, ...)</name>
    <description><![CDATA[<p>
The .drectve option was used to pass an option to the linker. Instead use pragma comment for passing a linker option.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/e1b42xs2.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/e1b42xs2.aspx</a></p>
]]>
    </description>
    <internalKey>C4659</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4661</key>
    <name>C4661: 'identifier' : no suitable definition provided for explicit template instantiation request</name>
    <description><![CDATA[<p>
A member of the template class is not defined.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/1k7k17za.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/1k7k17za.aspx</a></p>
]]>
    </description>
    <internalKey>C4661</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4667</key>
    <name>C4667: 'function' : no function template defined that matches forced instantiation</name>
    <description><![CDATA[<p>
You cannot instantiate a function template that has not been declared. 
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/71ex5kff.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/71ex5kff.aspx</a></p>
]]>
    </description>
    <internalKey>C4667</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4668</key>
    <name>C4668: 'symbol' is not defined as a preprocessor macro, replacing with '0' for 'directives'</name>
    <description><![CDATA[<p>
A symbol that was not defined was used with a preprocessor directive. The symbol will evaluate to false. To define a symbol, you can use either the #define directive or /D compiler option.
This warning is off by default. See Compiler Warnings That Are Off by Default for more information.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/4dt9kyhy.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/4dt9kyhy.aspx</a></p>
]]>
    </description>
    <internalKey>C4668</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4669</key>
    <name>C4669: 'cast' : unsafe conversion: 'class' is a managed or WinRT type object</name>
    <description><![CDATA[<p>
A cast contains a Windows Runtime or managed type. The compiler completes the cast by performing a bit-wise copy of one pointer to the other, but provides no other checking. To resolve this warning, do not cast classes containing managed members or Windows Runtime types.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/9cyw0ekd.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/9cyw0ekd.aspx</a></p>
]]>
    </description>
    <internalKey>C4669</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4673</key>
    <name>C4673: throwing 'identifier' the following types will not be considered at the catch site</name>
    <description><![CDATA[<p>
A throw object cannot be handled in the catch block. Each type that cannot be handled is listed in the error output immediately following the line containing this warning. Each unhandled type has its own warning. Read the warning for each specific type for more information.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/32y577d8.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/32y577d8.aspx</a></p>
]]>
    </description>
    <internalKey>C4673</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4677</key>
    <name>C4677: 'function': signature of non-private member contains assembly private type 'private_type'</name>
    <description><![CDATA[<p>
A type that has public accessibility outside the assembly uses a type that has private access outside the assembly. A component that references the public assembly type will not be able to use the type member or members that reference the assembly private type.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/0wb44ssy.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/0wb44ssy.aspx</a></p>
]]>
    </description>
    <internalKey>C4677</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4679</key>
    <name>C4679: The compiler encountered a construct that it cannot support, that cannot be imported from metadata</name>
    <description><![CDATA[<p>
'member': could not import member
Do not try to use the construct.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/d04dw01b.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/d04dw01b.aspx</a></p>
]]>
    </description>
    <internalKey>C4679</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4680</key>
    <name>C4680: 'class': coclass does not specify a default interface</name>
    <description><![CDATA[<p>
A default interface was not specified for a class that was marked with the coclass attribute. In order for an object to be useful, it must implement an interface.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/7aat5ezb.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/7aat5ezb.aspx</a></p>
]]>
    </description>
    <internalKey>C4680</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4683</key>
    <name>C4683: 'function': event source has an 'out'-parameter; exercise caution when hooking multiple event handlers</name>
    <description><![CDATA[<p>
If more than one event sink is listening to a COM event source, the value of an out parameter may be ignored.
Be aware that a memory leak will occur in the following situation:
- If a method has an out parameter that is internally allocated, for example a BSTR *.
- If the event has more than one handler (is a multicast event)
The reason for the leak is that the out parameter will be set by more than one handler, but returned to the call site only by the last handler.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/6skza916.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/6skza916.aspx</a></p>
]]>
    </description>
    <tag>brain-overload</tag>
    <internalKey>C4683</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4684</key>
    <name>C4684: 'attribute' : WARNING!! attribute may cause invalid code generation: use with caution</name>
    <description><![CDATA[<p>
You used an attribute that should not commonly be used.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/9zt1wb29.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/9zt1wb29.aspx</a></p>
]]>
    </description>
    <internalKey>C4684</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4686</key>
    <name>C4686: 'user-defined type' : possible change in behavior, change in UDT return calling convention</name>
    <description><![CDATA[<p>
A class template specialization was not is defined before it was used in a return type. Anything that instantiates the class will resolve C4686; declaring an instance or accessing a member (C&lt;int&gt;::anything) are also options.
This warning is the result of work to make the Visual C++ .NET 2003 compiler conform to the ISO C++ standard.
This warning is off by default. See Compiler Warnings That Are Off by Default for more information.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/ae77984s.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/ae77984s.aspx</a></p>
]]>
    </description>
    <internalKey>C4686</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4687</key>
    <name>C4687: 'class': a sealed abstract class cannot implement an interface 'interface'</name>
    <description><![CDATA[<p>
A sealed, abstract type is typically only useful to hold static member functions.
For more information, see abstract (Visual C++)and sealed.
C4687 is issued as an error by default. You can suppress C4687 with the warning pragma. If you are certain that you want to implement an interface in a sealed, abstract type, you can suppress C4687.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/ms235337.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/ms235337.aspx</a></p>
]]>
    </description>
    <internalKey>C4687</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4691</key>
    <name>C4691: 'type' : type referenced was expected in unreferenced assembly 'file', type defined in current translation unit used instead</name>
    <description><![CDATA[<p>
The metadata file containing the original type definition is not referenced, and the compiler is using a local type definition.
In the case where you are rebuilding file, C4691 can be ignored or turned off with pragma warning. That is, if the file you are building is the same as the file where the compiler expects to find the type definition, you can ignore C4691.
However, unexpected behavior can occur if the compiler uses a definition that is not from the same assembly that is referenced in metadata; CLR types are typed not only by the name of the type, but also by the assembly. That is, a type Z from assembly z.dll is different from a type Z from assembly y.dll
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/dy1c794f.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/dy1c794f.aspx</a></p>
]]>
    </description>
    <internalKey>C4691</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4692</key>
    <name>C4692: 'function': signature of non-private member contains assembly private native type 'native_type'</name>
    <description><![CDATA[<p>
A type that is visible outside the assembly contains a member function whose signature contains a native type that is not visible outside the assembly. Therefore, the member function should not be called if its containing type is instantiated outside the assembly.
For more information, see Type Visibility.
This warning is off by default. For more information, see Compiler Warnings That Are Off by Default.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/ms173713.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/ms173713.aspx</a></p>
]]>
    </description>
    <internalKey>C4692</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4700</key>
    <name>C4700: uninitialized local variable 'name' used</name>
    <description><![CDATA[<p>
You used the local variable name without first assigning it a value, which could lead to unpredictable results.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/axhfhh6x.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/axhfhh6x.aspx</a></p>
]]>
    </description>
    <internalKey>C4700</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4701</key>
    <name>C4701: Potentially uninitialized local variable 'name' used</name>
    <description><![CDATA[<p>
The local variable name might have been used without being assigned a value. This could lead to unpredictable results.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/1wea5zwe.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/1wea5zwe.aspx</a></p>
]]>
    </description>
    <internalKey>C4701</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4702</key>
    <name>C4702: unreachable code</name>
    <description><![CDATA[<p>
      This warning is the result of compiler conformance work that was done for Visual Studio .NET 2003: unreachable code. When the compiler (back end) detects unreachable code, it will generate C4702, a level 4 warning.
      For code that is valid in both the Visual Studio .NET 2003 and Visual Studio .NET versions of Visual C++, remove the unreachable code or assure that all source code is reachable by some flow of execution.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/c26da40e.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/c26da40e.aspx</a></p>
]]>
    </description>
    <internalKey>C4702</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4703</key>
    <name>C4703: Potentially uninitialized local pointer variable 'name' used</name>
    <description><![CDATA[<p>
      The local pointer variable name might have been used without being assigned a value. This could lead to unpredictable results.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/jj851030.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/jj851030.aspx</a></p>
]]>
    </description>
    <internalKey>C4703</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4706</key>
    <name>C4706: assignment within conditional expression</name>
    <description><![CDATA[<p>
The test value in a conditional expression was the result of an assignment.
An assignment has a value (the value on the left side of the assignment) that can be used legally in another expression, including a test expression.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/jj851030.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/jj851030.aspx</a></p>
]]>
    </description>
    <internalKey>C4706</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4709</key>
    <name>C4709: comma operator within array index expression</name>
    <description><![CDATA[<p>
When a comma occurs in an array index expression, the compiler uses the value after the last comma.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/hf1ywzyy.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/hf1ywzyy.aspx</a></p>
]]>
    </description>
    <internalKey>C4709</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4710</key>
    <name>C4710: 'function' : function not inlined</name>
    <description><![CDATA[<p>
The given function was selected for inline expansion, but the compiler did not perform the inlining.
Inlining is performed at the compiler's discretion. The inline keyword, like the register keyword, is used as a hint for the compiler. The compiler uses heuristics to determine if it should inline a particular function to speed up the code when compiling for speed, or if it should inline a particular function to make the code smaller when compiling for space. The compiler will only inline very small functions when compiling for space.
In some cases, the compiler will not inline a particular function for mechanical reasons. See C4714 for a list of reasons the compiler may not inline a function.
This warning is off by default. See Compiler Warnings That Are Off by Default for more information.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/yd3056cz.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/yd3056cz.aspx</a></p>
]]>
    </description>
    <internalKey>C4710</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4711</key>
    <name>C4711: function 'function' selected for inline expansion</name>
    <description><![CDATA[<p>
The compiler performed inlining on the given function, although it was not marked for inlining.
C4711 is enabled if /Ob2 is specified.
Inlining is performed at the compiler's discretion. This warning is informational.
This warning is off by default. To enable a warning, use #pragma warning. See Compiler Warnings That Are Off by Default for more information.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/k402bt7y.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/k402bt7y.aspx</a></p>
]]>
    </description>
    <internalKey>C4711</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4714</key>
    <name>C4714: function 'function' marked as __forceinline not inlined</name>
    <description><![CDATA[<p>
The given function was selected for inline expansion, but the compiler did not perform the inlining.
Although __forceinline is a stronger indication to the compiler than __inline, inlining is still performed at the compiler's discretion, but no heuristics are used to determine the benefits from inlining this function.
In some cases, the compiler will not inline a particular function for mechanical reasons. For example, the compiler will not inline:
- A function if it would result in mixing both SEH and C++ EH.
- Some functions with copy constructed objects passed by value when -GX/EHs/EHa is on.
- Functions returning an unwindable object by value when -GX/EHs/EHa is on.
- Functions with inline assembly when compiling without -Og/Ox/O1/O2.
- Functions with a variable argument list.
- A function with a try (C++ exception handling) statement.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/a98sb923.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/a98sb923.aspx</a></p>
]]>
    </description>
    <internalKey>C4714</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4715</key>
    <name>C4715: 'function' : not all control paths return a value</name>
    <description><![CDATA[<p>
      The specified function can potentially not return a value.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/6deaf4k9.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/6deaf4k9.aspx</a></p>
]]>
    </description>
    <tag>bug</tag>
    <internalKey>C4715</internalKey>
    <severity>MAJOR</severity>
    <type>BUG</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4716</key>
    <name>C4716: 'function' must return a value</name>
    <description><![CDATA[<p>
      The given function did not return a value.
      Only functions with a return type of void can use the return command without an accompanying return value.
      An undefined value will be returned when this function is called.
      This warning is automatically promoted to an error. If you wish to modify this behavior, use #pragma warning.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/ft5xye74.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/ft5xye74.aspx</a></p>
]]>
    </description>
    <tag>bug</tag>
    <internalKey>C4716</internalKey>
    <severity>MAJOR</severity>
    <type>BUG</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4717</key>
    <name>C4717: 'function' : recursive on all control paths, function will cause runtime stack overflow</name>
    <description><![CDATA[<p>
Every path through a function contains a call to the function. Since there is no way to exit the function without first calling itself recursively, the function will never exit.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/97c54274.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/97c54274.aspx</a></p>
]]>
    </description>
    <tag>bug</tag>
    <internalKey>C4717</internalKey>
    <severity>MAJOR</severity>
    <type>BUG</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4723</key>
    <name>C4723: potential divide by 0</name>
    <description><![CDATA[<p>
The second operand in a divide operation evaluated to zero at compile time, giving undefined results.
This warning is issued only when using /Og or an optimization option that implies /Og.
The compiler may have generated the zero operand.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/8kd039eh.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/8kd039eh.aspx</a></p>
]]>
    </description>
    <internalKey>C4723</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4727</key>
    <name>C4727: "PCH named pch_file with same timestamp found in obj_file_1 and obj_file_2. Using first PCH</name>
    <description><![CDATA[<p>
C4727 occurs when compiling multiple compilands with /Yc, and where the compiler was able to mark all .obj files with the same .pch timestamp.
To resolve, compile one source file with /Yc /c (creates pch), and the others compile separately with /Yu /c (uses pch), then link them together.
So, if you did the following and generates C4727:
- cl /clr /GL a.cpp b.cpp c.cpp /Ycstdafx.h
You would do the following instead:
- cl /clr /GL a.cpp /Ycstdafx.h /c
- cl /clr /GL b.cpp c.cpp /Yustdafx.h /link a.obj
For more information, see
- /Yc (Create Precompiled Header File)
- /Yu (Use Precompiled Header File)
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/ms235540.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/ms235540.aspx</a></p>
]]>
    </description>
    <internalKey>C4727</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4730</key>
    <name>C4730: 'main' : mixing _m64 and floating point expressions may result in incorrect code</name>
    <description><![CDATA[<p>
A function uses __m64 and float/double types. Because the MMX and floating-point registers share the same physical register space (cannot be used simultaneously), using __m64 and float/double types in the same function can result in data corruption, possibly causing an exception.
To safely use __m64 types and floating-point types in the same function, each instruction that uses one of the types should be separated by the _m_empty() (for MMX) or _m_femms() (for 3DNow!) intrinsic.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/3z3ww2w3.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/3z3ww2w3.aspx</a></p>
]]>
    </description>
    <internalKey>C4730</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4731</key>
    <name>C4731: 'pointer' : frame pointer register 'register' modified by inline assembly code</name>
    <description><![CDATA[<p>
A frame pointer register was modified. You must save and restore the register in your inline assembly block or frame variable (local or parameter, depending on the register modified), or your code may not work properly.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/ywz8xf2a.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/ywz8xf2a.aspx</a></p>
]]>
    </description>
    <internalKey>C4731</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4733</key>
    <name>C4733: Inline asm assigning to 'FS:0' : handler not registered as safe handler</name>
    <description><![CDATA[<p>
A function modifying the value at FS:0 to add a new exception handler may not work with Safe Exceptions, because the handler may not be registered as a valid exception handler (see /SAFESEH).
To resolve this warning, either remove the FS:0 definition or turn off this warning and use .SAFESEH to specify the safe exception handlers.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/ha52ak6a.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/ha52ak6a.aspx</a></p>
]]>
    </description>
    <internalKey>C4733</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4738</key>
    <name>C4738: storing 32-bit float result in memory, possible loss of performance</name>
    <description><![CDATA[<p>
C4738 warns that the result of an assignment, cast, passed argument, or other operation may need to be rounded or that the operation ran out of registers and needed to use memory (spilling). This can result in performance loss.
To resolve this warning and avoid rounding, compile with /fp:fast or use doubles instead of floats.
To resolve this warning and avoid running out of registers, change the order of computation and modify your use of inlining
This warning is off by default. For more information, see Compiler Warnings That Are Off by Default.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/c24hdbz6.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/c24hdbz6.aspx</a></p>
]]>
    </description>
    <internalKey>C4738</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4740</key>
    <name>C4740: flow in or out of inline asm code suppresses global optimization</name>
    <description><![CDATA[<p>
When there is a jump in to or out of an asm block, global optimizations are disabled for that function.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/s93ckwz6.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/s93ckwz6.aspx</a></p>
]]>
    </description>
    <internalKey>C4740</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4742</key>
    <name>C4742: 'var' has different alignment in 'file1' and 'file2': number and number</name>
    <description><![CDATA[<p>
An external variable that was referenced or defined in two files has different alignment in those files. This warning is emitted when compiler finds that __alignof for the variable in file1 differs from __alignof for the variable in file2. This can be caused by using incompatible types when declaring variable in different files, or by using non-matching #pragma pack in different files.
To resolve this warning, either use the same type definition or use different names for the variables.
For more information, see pack and __alignof Operator.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/k334t9xx.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/k334t9xx.aspx</a></p>
]]>
    </description>
    <internalKey>C4742</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4743</key>
    <name>C4743: 'type' has different size in 'file1' and 'file2': number and number bytes</name>
    <description><![CDATA[<p>
An external variable referenced or defined in two files has different types in those files, and the compiler determined that the size of the variable in file1 differs from the size of the variable in file2.
There is important case when this Can be emitted for C++. If you declare the same types with the same name in two different files, if those declarations contain virtual functions, and if the declarations are not the same, then the compiler can emit C4744 for the virtual function tables. The warning occurs because there are two different sized virtual function tables for the same type, and linker must choose one of them to incorporate into the executable. It is possible that this can result in your program calling the wrong virtual function.
To resolve this warning, either use the same type definition or use different names for the types or variables.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/584w8b4b.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/584w8b4b.aspx</a></p>
]]>
    </description>
    <internalKey>C4743</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4744</key>
    <name>C4744: 'var' has different type in 'file1' and 'file2': 'type1' and 'type2'</name>
    <description><![CDATA[<p>
An external variable referenced or defined in two files has different types in those files. To resolve, either make the type definitions the same, or change variable name in one of the files.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/a7za416f.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/a7za416f.aspx</a></p>
]]>
    </description>
    <internalKey>C4744</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4746</key>
    <name>C4746: volatile access of '&lt;expression&gt;' is subject to /volatile:[iso|ms] setting; consider using __iso_volatile_load/store intrinsic functions</name>
    <description><![CDATA[<p>
C4746 is emitted whenever a volatile variable is accessed directly. It is intended to help developers identify code locations that are affected by the specific volatile model currently specified (which can be controlled with the /volatile compiler option). In particular, it can be useful in locating compiler-generated hardware memory barriers when /volatile:ms is used.
The __iso_volatile_load/store intrinsics can be used to explicitly access volatile memory without being affected by the volatile model. Using these intrinsics will not trigger C4746.
This warning is off by default. See Compiler Warnings That Are Off by Default for more information.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/jj620897.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/jj620897.aspx</a></p>
]]>
    </description>
    <internalKey>C4746</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4747</key>
    <name>C4747: Calling managed 'entrypoint': Managed code may not be run under loader lock, including the DLL entrypoint and calls reached from the DLL entrypoint</name>
    <description><![CDATA[<p>
The compiler found a (probable) DLL entry point compiled to MSIL. Because of potential problems with loading a DLL whose entry point has been compiled to MSIL, you are strongly discouraged from compiling a DLL entry point function to MSIL.
For more information, see Initialization of Mixed Assemblies and Linker Tools Error LNK1306.
To correct this error
- Do not compile the module with /clr.
- Mark the entry point function with #pragma unmanaged.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/ccthbfk8.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/ccthbfk8.aspx</a></p>
]]>
    </description>
    <internalKey>C4747</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4748</key>
    <name>C4748: /GS can not protect parameters and local variables from local buffer overrun because optimizations are disabled in function</name>
    <description><![CDATA[<p>
/GS (Buffer Security Check) , which is enabled by default, cannot protect parameters and local variables from local buffer overrun in a function unless the function has optimizations enabled.
The compiler will disable optimizations if a function has inline assembly code containing flow of control (jmp or jcc, for example) statements.
Enable optimizations to resolve this warning, and to allow /GS to protect parameters and local variables from local buffer overrun
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/ms235398.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/ms235398.aspx</a></p>
]]>
    </description>
    <internalKey>C4748</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4754</key>
    <name>C4754: Conversion rules for arithmetic operations in a comparison mean that one branch cannot be executed</name>
    <description><![CDATA[<p>
The C4754 warning is issued because the result of the comparison is always the same. This indicates that one of the branches of the condition is never executed, most likely because the associated integer expression is incorrect. This code defect often occurs in incorrect integer overflow checks on 64-bit architectures.
Integer conversion rules are complex and there are many subtle pitfalls. As an alternative to fixing each C4754 warning, you can update the code to use the SafeInt Library.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/dn528967.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/dn528967.aspx</a></p>
]]>
    </description>
    <internalKey>C4754</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4756</key>
    <name>C4756: overflow in constant arithmetic</name>
    <description><![CDATA[<p>
The compiler generated an exception while doing constant arithmetic during compilation.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/f4s2sw05.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/f4s2sw05.aspx</a></p>
]]>
    </description>
    <tag>bug</tag>
    <internalKey>C4756</internalKey>
    <severity>MAJOR</severity>
    <type>BUG</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4772</key>
    <name>C4772: #import referenced a type from a missing type library; 'missing_type' used as a placeholder</name>
    <description><![CDATA[<p>
A type library was referenced with the #import directive. However, the type library contained a reference to another type library that was not referenced with #import. This other .tlb file was not found by the compiler.
Note that the compiler will not find type libraries in different directories if you use the /I (Additional Include Directories) compiler option to specify those directories. If you want the compiler to find type libraries in different directories, add those directories to the PATH environment variable.
This warning is, by default, issued as an error. C4772 can not be suppressed with /W0.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/sce74ah7.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/sce74ah7.aspx</a></p>
]]>
    </description>
    <internalKey>C4772</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4774</key>
    <name>C4774: '&lt;function&gt;' : format string expected in argument &lt;position&gt; is not a string literal</name>
    <description><![CDATA[<h2>MSDN Documentation</h2>
<p><a href="http://blogs.msdn.com/b/vcblog/archive/2015/06/22/format-specifiers-checking.aspx#C4774" target="_blank">http://blogs.msdn.com/b/vcblog/archive/2015/06/22/format-specifiers-checking.aspx#C4774</a></p>
]]>
    </description>
    <internalKey>C4774</internalKey>
    <severity>MINOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4775</key>
    <name>C4775: nonstandard extension used in format string '&lt;format-string&gt;' of function '&lt;function&gt;'</name>
    <description><![CDATA[<h2>MSDN Documentation</h2>
<p><a href="http://blogs.msdn.com/b/vcblog/archive/2015/06/22/format-specifiers-checking.aspx#C4775" target="_blank">http://blogs.msdn.com/b/vcblog/archive/2015/06/22/format-specifiers-checking.aspx#C4775</a></p>
]]>
    </description>
    <internalKey>C4775</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4776</key>
    <name>C4776: ‚Äò%&lt;conversion-specifier&gt;' is not allowed in the format string of function '&lt;function&gt;'</name>
    <description><![CDATA[<h2>MSDN Documentation</h2>
<p><a href="http://blogs.msdn.com/b/vcblog/archive/2015/06/22/format-specifiers-checking.aspx#C4776" target="_blank">http://blogs.msdn.com/b/vcblog/archive/2015/06/22/format-specifiers-checking.aspx#C4776</a></p>
]]>
    </description>
    <internalKey>C4776</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4777</key>
    <name>C4777: '&lt;function&gt;' : format string '&lt;format-string&gt;' requires an argument of type '&lt;type&gt;', but variadic argument &lt;position&gt; has type '&lt;type&gt;'</name>
    <description><![CDATA[<h2>MSDN Documentation</h2>
<p><a href="http://blogs.msdn.com/b/vcblog/archive/2015/06/22/format-specifiers-checking.aspx#C4777" target="_blank">http://blogs.msdn.com/b/vcblog/archive/2015/06/22/format-specifiers-checking.aspx#C4777</a></p>
]]>
    </description>
    <internalKey>C4777</internalKey>
    <severity>MINOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4778</key>
    <name>C4778: '&lt;function&gt;' : unterminated format string '&lt;format-string&gt;'</name>
    <description><![CDATA[<h2>MSDN Documentation</h2>
<p><a href="http://blogs.msdn.com/b/vcblog/archive/2015/06/22/format-specifiers-checking.aspx#C4778" target="_blank">http://blogs.msdn.com/b/vcblog/archive/2015/06/22/format-specifiers-checking.aspx#C4778</a></p>
]]>
    </description>
    <internalKey>C4778</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4788</key>
    <name>C4788: 'identifier' : identifier was truncated to 'number' characters</name>
    <description><![CDATA[<p>
The compiler limits the maximum length allowed for a function name. When the compiler generates funclets for EH/SEH code, it forms the funclet name by prepending the function name with some text, for example "__catch", "__unwind", or another string.
The resulting funclet name can be too long, and the compiler will truncate it and generate C4788.
To resolve this warning, shorten the original function name. If the function is a C++ template function or method, use a typedef for part of the name
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/024y6a2s.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/024y6a2s.aspx</a></p>
]]>
    </description>
    <internalKey>C4788</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4789</key>
    <name>C4789: destination of memory copy is too small</name>
    <description><![CDATA[<p>
Warns about buffer overrun when specific C run-time (CRT) functions are used, parameters are passed, and assignments are performed, such that the data sizes are known at compile time. This warning is for situations that might elude typical data-size mismatch detection.
The warning appears when data, whose length is known at compile time, is copied and put into a data block whose size is known at compile time to be too small for the data. The copy must be done by using the intrinsic form of one of the following CRT functions:
- strcpy
- memset
- memcpy, wmemcpy
The warning also appears when a parameter datatype is mismatched by using a cast, and then a copy assignment from an lvalue reference is attempted.
Visual C++ might generate this warning for a code path that does not ever execute. You can temporarily disable the warning by using #pragma, as shown in this example:
#pragma(push)
#pragma warning ( disable : 4789 )
// unused code that generates compiler C4789
#pragma(pop)
This keeps Visual C++ from generating the warning for that specific block of code. The #pragma(push) preserves the existing state before #pragma warning(disable: 4789) changes it. The #pragma(pop) restores the pushed state, and removes the effects of the #pragma warning(disable:4789). For more information about the C++ preprocessor directive #pragma, see warning and Pragma Directives and the __Pragma Keyword.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/w0c0bww3.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/w0c0bww3.aspx</a></p>
]]>
    </description>
    <internalKey>C4789</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4793</key>
    <name>C4793: 'function' : function is compiled as native code: 'reason'</name>
    <description><![CDATA[<p>
The compiler cannot compile function into managed code, even though the /clr compiler option is specified. Instead, the compiler emits C4793 and an explanatory continuation message, and then compiles function into native code. The continuation message contains the reason text that explains why function cannot be compiled to MSIL.
This is a level 1 warning when you specify the /clr:pure compiler option.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/dby9t00y.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/dby9t00y.aspx</a></p>
]]>
    </description>
    <internalKey>C4793</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4799</key>
    <name>C4799: No EMMS at end of function 'function'</name>
    <description><![CDATA[<p>
The function has at least one MMX instruction, but does not have an EMMS instruction. When a multimedia instruction is used, an EMMS instruction should also be used to clear the multimedia tag word at the end of the MMX code. For more information on EMMS instructions, see Guidelines for When to Use EMMS.
You may get C4799 when using ivec.h, indicating that the code does not use properly execute the EMMS instruction before returning. This is a false warning for these headers. You may turn these off by defining _SILENCE_IVEC_C4799 in ivec.h. However, be aware that this will also keep the compiler from giving correct warnings of this type.
For related information, see the Intel's MMX Instruction Set.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/kkta9y4h.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/kkta9y4h.aspx</a></p>
]]>
    </description>
    <internalKey>C4799</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4800</key>
    <name>C4800: 'type' : forcing value to bool 'true' or 'false' (performance warning)</name>
    <description><![CDATA[<p>
This warning is generated when a value that is not bool is assigned or coerced into type bool. Typically, this message is caused by assigning int variables to bool variables where the int variable contains only values true and false, and could be redeclared as type bool. If you cannot rewrite the expression to use type bool, then you can add "!=0" to the expression, which gives the expression type bool. Casting the expression to type bool will not disable the warning, which is by design.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/b6801kcy.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/b6801kcy.aspx</a></p>
]]>
    </description>
    <internalKey>C4800</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4801</key>
    <name>C4801: Return by reference is not verifiable: reason</name>
    <description><![CDATA[<p>
You cannot store a tracking reference into a local variable and then return it verifiably.
A reference can only be verifiably returned when it can be tracked by the verifier from creation to return point and when it is a reference to an element of an array, or a member of a class.
For more information, see Peverify.exe (PEVerify Tool).
A reference must remain on the stack from creation to return in order to be verifiable.
C4801 is always issued as an error. You can turn off this warning with the #pragma warning or /wd; see warning or /w, /Wn, /WX, /Wall, /wln, /wdn, /wen, /won (Warning Level) for more information.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/4fw72b2z.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/4fw72b2z.aspx</a></p>
]]>
    </description>
    <internalKey>C4801</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4803</key>
    <name>C4803: 'method' : the raise method has a different storage class from that of the event, 'event'</name>
    <description><![CDATA[<p>
Event methods must have the same storage class as the event declaration. The compiler adjusts the event's methods so that the storage classes are the same.
This Can occur if you have a class that implements an event from an interface. The compiler does not implicitly generate a raise method for an event in an interface. When you implement that interface in a class, the compiler does implicitly generate a raise method and that method will not be virtual, hence the warning.
See warning pragma for information on how to turn a warning off.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/11kyt90y.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/11kyt90y.aspx</a></p>
]]>
    </description>
    <internalKey>C4803</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4804</key>
    <name>C4804: 'operation' : unsafe use of type 'bool' in operation</name>
    <description><![CDATA[<p>
This warning is generated for comparison operations between bool and int. 
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/b6x9ad5e.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/b6x9ad5e.aspx</a></p>
]]>
    </description>
    <internalKey>C4804</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4805</key>
    <name>C4805: 'operation' : unsafe mix of type 'type' and type 'type' in operation</name>
    <description><![CDATA[<p>
This warning is for when you used a bool variable or value in an unexpected way. For example, C4804 is generated if you use operators such as the negative unary operator (-) or the complement operator (~). The compiler evaluates the expression.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/1hy2y0bk.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/1hy2y0bk.aspx</a></p>
]]>
    </description>
    <internalKey>C4805</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4806</key>
    <name>C4806: 'operation' : unsafe operation: no value of type 'type' promoted to type 'type' can equal the given constant</name>
    <description><![CDATA[<p>
This message warns against code such as b == 3, where b has type bool. The promotion rules cause bool to be promoted to int. This is legal, but it can never be true. The following sample generates C4806.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/fx3e68bw.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/fx3e68bw.aspx</a></p>
]]>
    </description>
    <internalKey>C4806</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4815</key>
    <name>C4815: 'var' : zero-sized array in stack object will have no elements (unless the object is an aggregate that has been aggregate initialized)</name>
    <description><![CDATA[<p>
An array with an undefined number of elements (zero-sized array) is the last member of a type and an object of the type was created on the stack. No memory will be allocated for the array. If you need a useful constructor, you can allocate memory for the struct on the heap.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/7z5xcw8w.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/7z5xcw8w.aspx</a></p>
]]>
    </description>
    <internalKey>C4815</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4819</key>
    <name>C4819: The file contains a character that cannot be represented in the current code page (number). Save the file in Unicode format to prevent data loss</name>
    <description><![CDATA[<p>
C4819 occurs when an ANSI source file is compiled on a system with a codepage that cannot represent all characters in the file.
To resolve C4819, save the file in Unicode format.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/ms173715.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/ms173715.aspx</a></p>
]]>
    </description>
    <internalKey>C4819</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4820</key>
    <name>C4820: 'bytes' bytes padding added after construct 'member_name'</name>
    <description><![CDATA[<p>
The type and order of elements caused the compiler to add padding to the end of a struct. See align for more information on padding in a struct.
This warning is off by default. See Compiler Warnings That Are Off by Default for more information.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/t7khkyth.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/t7khkyth.aspx</a></p>
]]>
    </description>
    <internalKey>C4820</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4821</key>
    <name>C4821: Unable to determine Unicode encoding type, please save the file with signature (BOM)</name>
    <description><![CDATA[<p>
The compiler could not determine the encoding type for a file. To resolve this warning, save the file with a byte order marker. See Managing Files with Encoding for more information.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/hd4ywf8d.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/hd4ywf8d.aspx</a></p>
]]>
    </description>
    <internalKey>C4821</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4823</key>
    <name>C4823: 'function' : uses pinning pointers but unwind semantics are not enabled. Consider using /EHa</name>
    <description><![CDATA[<p>
To unpin an object on the managed heap pointed to by a pinning pointer declared in a block scope, the compiler simulates the behavior of destructors of local classes, "pretending" the pinning pointer has a destructor that nullifies the pointer. To enable a call to a destructor after throwing an exception, you must enable object unwinding, which you can do by using /EHsc.
You can also manually unpin the object and ignore the warning.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/2xyey94d.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/2xyey94d.aspx</a></p>
]]>
    </description>
    <internalKey>C4823</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4826</key>
    <name>C4826: Conversion from 'type1 ' to 'type_2' is sign-extended. This may cause unexpected runtime behavior</name>
    <description><![CDATA[<p>
This warning indicates that the compiler performed sign extension when a 32-bit pointer was cast to a 64-bit variable.
If the extension was performed on a windows HANDLE type, it is safe to ignore this warning. If the extension was performed on a pointer type, you should modify the cast to prevent the sign extension (see example below).
C4826 is off by default. See Compiler Warnings That Are Off by Default for more information.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/ms235307.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/ms235307.aspx</a></p>
]]>
    </description>
    <internalKey>C4826</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4829</key>
    <name>C4829: Possibly incorrect parameters to function main. Consider 'int main(array&lt;System::String^&gt;^ argv)'</name>
    <description><![CDATA[<p>
 Certain functions, such as main, cannot take reference type parameters. While compilation will succeed, the resulting image will probably not run
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/f1f75h1c.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/f1f75h1c.aspx</a></p>
]]>
    </description>
    <internalKey>C4829</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4832</key>
    <name>C4832: token 'token' is illegal after UDT 'type name'</name>
    <description><![CDATA[<p>
A member of a UDT (user-defined type, such a class or struct) was qualified incorrectly. The compiler issues this warning and proceeds as if the qualification was specified correctly.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/7f07b7ww.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/7f07b7ww.aspx</a></p>
]]>
    </description>
    <internalKey>C4832</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4835</key>
    <name>C4835: 'variable' : the initializer for exported data will not be run until managed code is first executed in the host assembly</name>
    <description><![CDATA[<p>
When accessing data between managed components, it is recommended that you not use native C++ import and export mechanisms. Instead, declare your data members inside a managed type and reference the metadata with #using in the client. For more information, see #using Directive (C++).
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/ms173716.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/ms173716.aspx</a></p>
]]>
    </description>
    <internalKey>C4835</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4836</key>
    <name>C4836: nonstandard extension used : 'type' : local types or unnamed types cannot be used as template arguments</name>
    <description><![CDATA[<p>
The C++ standard does not allow the use of local types as template arguments, but the Visual C++ compiler does allow this under /Ze. C4836 is an informational warning, to let you know that you are writing non-conformant code. For more information, see /Za, /Ze (Disable Language Extensions).
C4836 is off by default. See Compiler Warnings That Are Off by Default for more information.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/ms173717.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/ms173717.aspx</a></p>
]]>
    </description>
    <internalKey>C4836</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4837</key>
    <name>C4837: trigraph detected: '??%c' replaced by '%c'</name>
    <description><![CDATA[<p>
The detected trigraph is replaced by the indicated character.
The compiler translates trigraphs before any other processing is completed. Use the character escape sequence, \?, to prevent the misinterpretation of a character sequence that resembles a trigraph. For more information about trigraphs, see Trigraphs. For more information about escape sequences, see Escape Sequences.
C4837 is off by default. See Compiler Warnings That Are Off by Default for more information.
To correct this error
- use the character escape sequence, \?, instead of one of the '?' characters in the source code.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/cc664919.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/cc664919.aspx</a></p>
]]>
    </description>
    <internalKey>C4837</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4838</key>
    <name>C4838: conversion from 'type1' to 'type2' requires a narrowing conversion</name>
    <description><![CDATA[<p>
Implicit conversion might not be sufficient and the precision might be different e.g. double to float. Use explicit type cast if this is intended. 
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/mt763968.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/mt763968.aspx</a></p>
]]>
    </description>
    <internalKey>C4838</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4867</key>
    <name>C4867: 'function': function call missing argument list; use 'call' to create a pointer to member</name>
    <description><![CDATA[<p>
A pointer to member function was initialized incorrectly.
This Can be generated as a result of compiler conformance work that was done for Visual C++ 2005: enhanced pointer-to-member conformance. Code that compiled prior to Visual C++ 2005 will now generate C4867.
This warning is always issued as an error. Use the warning pragma to disable this warning. For more information about C4867 and MFC/ATL, see _ATL_ENABLE_PTM_WARNING.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/dczztdfe.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/dczztdfe.aspx</a></p>
]]>
    </description>
    <internalKey>C4867</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4905</key>
    <name>C4905: wide string literal cast to 'LPSTR'</name>
    <description><![CDATA[<p>
The compiler detected an unsafe cast. The cast did succeed, but you should use a conversion routine.
This warning is off by default. See Compiler Warnings That Are Off by Default for more information.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/zayh85yw.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/zayh85yw.aspx</a></p>
]]>
    </description>
    <internalKey>C4905</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4906</key>
    <name>C4906: string literal cast to 'LPWSTR'</name>
    <description><![CDATA[<p>
The compiler detected an unsafe cast. The cast did succeed, but you should use a conversion routine.
This warning is off by default. See Compiler Warnings That Are Off by Default for more information.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/ae10z5cb.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/ae10z5cb.aspx</a></p>
]]>
    </description>
    <internalKey>C4906</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4917</key>
    <name>C4917: 'declarator' : a GUID can only be associated with a class, interface or namespace</name>
    <description><![CDATA[<p>
A user-defined structure other than class, interface, or namespace cannot have a GUID.
This warning is off by default. See Compiler Warnings That Are Off by Default for more information.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/3w98z1xh.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/3w98z1xh.aspx</a></p>
]]>
    </description>
    <internalKey>C4917</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4927</key>
    <name>C4927: illegal conversion; more than one user-defined conversion has been implicitly applied</name>
    <description><![CDATA[<p>
More than one user-defined conversion is implicitly applied to a single value - the compiler did not find an explicit conversion but did find a conversion, which it used.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/727wstex.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/727wstex.aspx</a></p>
]]>
    </description>
    <internalKey>C4927</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4928</key>
    <name>C4928: illegal copy-initialization; more than one user-defined conversion has been implicitly applied</name>
    <description><![CDATA[<p>
More than one user-defined conversion routine was found. The compiler executed the code in all such routines.
This warning is off by default. See Compiler Warnings That Are Off by Default for more information.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/cwck4ta9.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/cwck4ta9.aspx</a></p>
]]>
    </description>
    <internalKey>C4928</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4929</key>
    <name>C4929: 'file': typelibrary contains a union; ignoring the 'embedded_idl' qualifier</name>
    <description><![CDATA[<p>
The embedded_idl attribute of #import could not be applied to the type library because a union is present in the type library. To resolve this warning, don't use embedded_idl.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/ddwfbf98.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/ddwfbf98.aspx</a></p>
]]>
    </description>
    <internalKey>C4929</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4930</key>
    <name>C4930: 'prototype': prototyped function not called (was a variable definition intended?)</name>
    <description><![CDATA[<p>
The compiler detected an unused function prototype. If the prototype was intended as a variable declaration, remove the open/close parentheses.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/4ddd21xh.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/4ddd21xh.aspx</a></p>
]]>
    </description>
    <internalKey>C4930</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4931</key>
    <name>C4931: we are assuming the type library was built for number-bit pointers</name>
    <description><![CDATA[<p>
Explicit information was not supplied with the ptrsize attribute of the #import directive; the compiler concluded that pointer size of the type library is number.
This warning is off by default. See Compiler Warnings That Are Off by Default for more information.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/hfh6eh78.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/hfh6eh78.aspx</a></p>
]]>
    </description>
    <internalKey>C4931</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4945</key>
    <name>C4945: 'symbol' : cannot import symbol from 'assembly2': as 'symbol' has already been imported from another assembly 'assembly1'</name>
    <description><![CDATA[<p>
A symbol was imported from a referenced assembly but that symbol was already imported from another referenced assembly. Either do not reference one of the assemblies or get the symbol name changed in one of the assemblies.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/za5hhxx1.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/za5hhxx1.aspx</a></p>
]]>
    </description>
    <internalKey>C4945</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4946</key>
    <name>C4946: reinterpret_cast used between related classes: 'class1' and 'class2'</name>
    <description><![CDATA[<p>
Do not use reinterpret_cast to cast between related types. Use static_cast instead, or for polymorphic types, use dynamic_cast.
By default, this warning is off. For more information, see Compiler Warnings That Are Off by Default.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/y775w13y.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/y775w13y.aspx</a></p>
]]>
    </description>
    <internalKey>C4946</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4948</key>
    <name>C4948: return type of 'accessor' does not match the last parameter type of the corresponding setter</name>
    <description><![CDATA[<p>
The compiler found a mismatch between what data type is being get and set for an indexed property.
C4948 is only reachable using /clr:oldSyntax.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/92w8b08s.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/92w8b08s.aspx</a></p>
]]>
    </description>
    <internalKey>C4948</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4949</key>
    <name>C4949: pragmas 'managed' and 'unmanaged' are meaningful only when compiled with '/clr[:option]'</name>
    <description><![CDATA[<p>
The compiler ignores the managed and unmanaged pragmas if the source code is not compiled with /clr. This warning is informational.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/d4553e9a.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/d4553e9a.aspx</a></p>
]]> 
    </description>
    <internalKey>C4949</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4964</key>
    <name>C4964: No optimization options were specified; profile info will not be collected</name>
    <description><![CDATA[<p>
/GL and /LTCG were specified, but no optimizations were requested, so no .pgc files will be generated and, therefore, no profile-guided optimizations will be possible.
If you want .pgc files to be generated when you run your application, specify one of the /O compiler options.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/zbs9k007.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/zbs9k007.aspx</a></p>
]]>
    </description>
    <internalKey>C4964</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4965</key>
    <name>C4965: implicit box of integer 0; use nullptr or explicit cast</name>
    <description><![CDATA[<p>
Visual C++ features implicit boxing of value types. An instruction that resulted in a null assignment using Managed Extensions for C++ now becomes an assignment to a boxed int.
For more information, see Boxing (Visual C++).
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/0zw0ccb8.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/0zw0ccb8.aspx</a></p>
]]>
    </description>
    <internalKey>C4965</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4980</key>
    <name>C4980: 'keyword' : use of this keyword requires /clr:oldSyntax command line option</name>
    <description><![CDATA[<p>
A keyword from a previous version was used. Update your code to use newer syntax, or use /clr:oldSyntax. For more information about the newer syntax, see Component Extensions for Runtime Platforms.
C4980 is a warning that is always issued as an error. Use /wd to turn the warning off. See /w, /Wn, /WX, /Wall, /wln, /wdn, /wen, /won (Warning Level) for more information.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/h39zd998.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/h39zd998.aspx</a></p>
]]>
    </description>
    <internalKey>C4980</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4986</key>
    <name>C4986: 'function': exception specification does not match previous declaration</name>
    <description><![CDATA[<p>
This Can be generated when there is an exception specification in one declaration and not the other.
By default, C4986 is off. For more information, see Compiler Warnings That Are Off by Default.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/jj620898.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/jj620898.aspx</a></p>
]]>
    </description>
    <internalKey>C4986</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4995</key>
    <name>C4995: 'function': name was marked as #pragma deprecated</name>
    <description><![CDATA[<p>
The compiler encountered a function that was marked with pragma deprecated. The function may no longer be supported in a future release. You can turn this warning off with the warning pragma (example below).
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/8wsycdzs.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/8wsycdzs.aspx</a></p>
]]>
    </description>
    <internalKey>C4995</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C4996</key>
    <name>C4996: 'function': was declared deprecated</name>
    <description><![CDATA[<p>
The compiler encountered a function that was marked with deprecated. The function may no longer be supported in a future release. You can turn this warning off with the warning pragma (example below).
C4996 is generated for the line on which the function is declared and for the line on which the function is used.
You will see C4996 if you are using members of the &lt;hash_map&gt;; and &lt;hash_set&gt;; header files in the std namespace. See The stdext Namespace for more information.
Some CRT and Standard C++ Library functions have been deprecated in favor of new, more secure functions. For more information about deprecated functions, see Security Features in the CRT and Safe Libraries: Standard C++ Library.
C4996 can also occur if you use MFC or ATL functions that were deprecated for security reasons. To suppress these warnings, see _AFX_SECURE_NO_WARNINGS and _ATL_SECURE_NO_WARNINGS.
C4996 can also occur when you use the marshaling library. In this case C4996 is an error, not a warning. This error will occur when you use marshal_as to convert between two data types that require a marshal_context Class. You will also receive this error when the marshaling library does not support a conversion. For more information about the marshaling library, see Overview of Marshaling in C++.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/ttcz0bys.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/ttcz0bys.aspx</a></p>
<h2>References</h2>
<p><a href="https://cwe.mitre.org/data/definitions/398.html" target="_blank">CWE-398: Indicator of Poor Code Quality</a></p>
]]>
    </description>
    <tag>cwe</tag>
    <internalKey>C4996</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <!-- code analysis -->
  <rule>
    <key>C6001</key>
    <name>C6001: using uninitialized memory &lt;variable&gt;</name>
    <description><![CDATA[<p>
This warning is reported when an uninitialized local variable is used before it is assigned a value. This could lead to unpredictable results. You should always initialize variables before use.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/3fb5eatz.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/3fb5eatz.aspx</a></p>
]]>
   </description>
    <tag>bug</tag>
    <internalKey>C6001</internalKey>
    <severity>CRITICAL</severity>
    <type>BUG</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C6011</key>
    <name>C6011: dereferencing NULL pointer &lt;name&gt;</name>
    <description><![CDATA[<p>
This warning indicates that a null pointer is being dereferenced. If the pointer value is invalid, the result is undefined.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/2ayc37ac.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/2ayc37ac.aspx</a></p>
<h2>References</h2>
<p><a href="https://www.securecoding.cert.org/confluence/display/c/EXP34-C.+Do+not+dereference+null+pointers" target="_blank">EXP34-C. Do not dereference null pointers</a></p>
<p><a href="https://cwe.mitre.org/data/definitions/476.html" target="_blank">CWE-476: NULL Pointer Dereference</a></p>
]]>
    </description>
    <tag>bug</tag>
    <tag>cwe</tag>
    <internalKey>C6011</internalKey>
    <severity>CRITICAL</severity>
    <type>BUG</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C6014</key>
    <name>C6014: Leaking memory</name>
    <description><![CDATA[<p>
This warning indicates that the specified pointer points to allocated memory or some other allocated resource that has not been freed. The analyzer checks for this condition only when the _Analysis_mode_(_Analysis_local_leak_checks_) SAL annotation is specified. By default, this annotation is specified for Windows kernel mode (driver) code. For more information about SAL annotations, see Using SAL Annotations to Reduce C/C++ Code Defects.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/hh598959.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/hh598959.aspx</a></p>
]]>
    </description>
    <tag>bug</tag>
    <internalKey>C6014</internalKey>
    <severity>BLOCKER</severity>
    <type>BUG</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C6029</key>
    <name>C6029: possible buffer overrun in call to &lt;function&gt;: use of unchecked value</name>
    <description><![CDATA[<p>
This warning indicates that a function that takes a buffer and a size is being passed a unchecked size. The data read-in from some external source has not been verified to see whether it is smaller than the buffer size. An attacker might intentionally specify a much larger than expected value for the size, which will lead to a buffer overrun.
Generally, whenever you read data from an untrusted external source, make sure to verify it for validity. It is usually appropriate to verify the size to make sure it is in the expected range.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/0x76cd0s.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/0x76cd0s.aspx</a></p>
]]>
    </description>
    <internalKey>C6029</internalKey>
    <severity>CRITICAL</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C6031</key>
    <name>C6031: return value ignored: &lt;function&gt; could return unexpected value</name>
    <description><![CDATA[<p>
This warning indicates that the calling function is not checking the return value of a function call that signals failure via its return value. Depending on which function is being called, this defect can lead to seemingly random program misbehavior, including crashes and data corruptions in error conditions or low-resource situations.
In general, it is not safe to assume that a call to function requiring disk, network, memory, or other resources will always succeed. The caller should always check the return value and handle error cases appropriately. Also consider using the _Must_inspect_result_ annotation, which checks that the value is examined in a useful way.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/81s4zzd4.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/81s4zzd4.aspx</a></p>
]]>
    </description>
    <internalKey>C6031</internalKey>
    <severity>CRITICAL</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C6053</key>
    <name>C6053: call to &lt;function&gt; may not zero-terminate string &lt;variable&gt;</name>
    <description><![CDATA[<p>
This warning indicates that the specified function has been called in such a way that the resulting string might not be zero-terminated. This defect might cause an exploitable buffer overrun or crash. This warning is also generated if an annotated function expects a null terminated string is passed a string that is not null terminated.
Most C standard library and Win32 string handling functions require and produce zero-terminated strings. A few 'counted string' functions (including strncpy, wcsncpy, _mbsncpy, _snprintf, and snwprintf) do not produce zero-terminated strings if they exactly fill their buffer. In this case, a subsequent call to a string function that expects a zero-terminated string will go beyond the end of the buffer looking for the zero. The program should make sure that the string ends with a zero. In general, you should pass a length to the 'counted string' function one smaller than the size of the buffer and then explicitly assign zero to the last character in the buffer.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/5dx7ef8x.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/5dx7ef8x.aspx</a></p>
<h2>References</h2>
<p><a href="https://cwe.mitre.org/data/definitions/170.html" target="_blank">CWE-170: Improper Null Termination</a></p>
]]>
    </description>
    <tag>cwe</tag>    
    <internalKey>C6053</internalKey>
    <severity>CRITICAL</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C6054</key>
    <name>C6054: string &lt;variable&gt; may not be zero-terminated</name>
    <description><![CDATA[<p>
This warning indicates that a function that requires zero-terminated string was passed a non-zero terminated string. A function that expects a zero-terminated string will go beyond the end of the buffer to look for the zero. This defect might cause an exploitable buffer overrun error or crash. The program should make sure that the string ends with a zero.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/ms182080.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/ms182080.aspx</a></p>
]]>
    </description>
    <internalKey>C6054</internalKey>
    <severity>CRITICAL</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C6057</key>
    <name>C6057: buffer overrun due to number of characters/number of bytes mismatch in call to &lt;function&gt;</name>
    <description><![CDATA[<p>
This warning indicates that a function that expects the number of characters is being passed the number of bytes instead. With wide (Unicode) characters, the values are different. This defect might cause an exploitable buffer overrun or crash.
A common cause of this defect is using sizeof on a character array. The sizeof operator always computes the number of bytes; for ANSI characters this is the same as the number of characters, but for Unicode characters it is twice the number of characters.
It is usually safe to compute the number of elements in an array by dividing the size of the array by the size of each element.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/subscriptions/administration/t9a67d2b(v=vs.80).aspx" target="_blank">https://msdn.microsoft.com/en-us/subscriptions/administration/t9a67d2b(v=vs.80).aspx</a></p>
]]>
    </description>
    <tag>bug</tag>
    <internalKey>C6057</internalKey>
    <severity>CRITICAL</severity>
    <type>BUG</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C6059</key>
    <name>C6059: Incorrect length parameter in call to &lt;function&gt;. Pass the number of remaining characters, not the buffer size of &lt;variable&gt;</name>
    <description><![CDATA[<p>
This warning indicates that a call to a string concatenation function is probably passing an incorrect value for the number of characters to concatenate. This defect might cause an exploitable buffer overrun or crash. A common cause of this defect is passing the buffer size, instead of the remaining number of characters in the buffer, to the string manipulation function.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/2b5wde95.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/2b5wde95.aspx</a></p>
]]>
    </description>
    <internalKey>C6059</internalKey>
    <severity>CRITICAL</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C6063</key>
    <name>C6063: missing string argument to &lt;function&gt; corresponding to conversion specifier &lt;number&gt;</name>
    <description><![CDATA[<p>
This warning indicates that not enough arguments are being provided to match a format string; at least one of the missing arguments is a string. This defect can cause crashes and buffer overflows (if the called function is of the sprintf family), as well as potentially incorrect output.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/wkw5tfd8.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/wkw5tfd8.aspx</a></p>
]]>
    </description>
    <tag>bug</tag>
    <internalKey>C6063</internalKey>
    <severity>CRITICAL</severity>
    <type>BUG</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C6064</key>
    <name>C6064: missing integer argument to &lt;function&gt; corresponding to conversion specifier &lt;number&gt;</name>
    <description><![CDATA[<p>
This warning indicates that not enough arguments are being provided to match a format string and one of the missing arguments is an integer. This defect can cause incorrect output.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/26546f65.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/26546f65.aspx</a></p>
]]>
    </description>
    <tag>bug</tag>
    <internalKey>C6064</internalKey>
    <severity>CRITICAL</severity>
    <type>BUG</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C6066</key>
    <name>C6066: non-pointer passed as parameter &lt;number&gt; when pointer is required in call to &lt;function&gt;</name>
    <description><![CDATA[<p>
This warning indicates that the format string specifies that a pointer is required, for example, a %n or %p specification for printf or a %d for scanf, but a non-pointer is being passed. This defect is likely to cause a crash or corruption of some form.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/9t8t51k6.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/9t8t51k6.aspx</a></p>
]]>
    </description>
    <tag>bug</tag>
    <internalKey>C6066</internalKey>
    <severity>CRITICAL</severity>
    <type>BUG</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C6067</key>
    <name>C6067: parameter &lt;number&gt; in call to &lt;function&gt; must be the address of the string</name>
    <description><![CDATA[<p>
This warning indicates a mismatch between the format specifier and the function parameter. Even though the warning suggests using the address of the string, you must check the type of parameter a function expects before correcting the problem. For example, a %s specification for printf requires a string argument, but a %s specification in scanf requires an address of the string.
This defect is likely to cause a crash or corruption of some form
 </p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/b760t248.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/b760t248.aspx</a></p>
]]>
    </description>
    <internalKey>C6067</internalKey>
    <severity>CRITICAL</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C6101</key>
    <name>C6101: Returning uninitialized memory</name>
    <description><![CDATA[<p>
A successful path through the function does not set the named _Out_ parameter. This message is generated based on SAL annotations that indicate that the function in question always succeeds. A function that doesn't return a success/failure indication should set all of its _Out_ parameters because the analyzer assumes that the _Out_ parameter is uninitialized data before the function is called, and that the function will set the parameter so that it's no longer uninitialized. If the function does indicate success/failure, then the _Out_ parameter doesn't have to be set in the case of failure, and you can detect and avoid the uninitialized location. In either case, the objective is to avoid the reading of an uninitialized location. If the function sometimes doesn't touch an _Out_ parameter that's subsequently used, then the parameter should be initialized before the function call and be marked with the _Inout_ annotation, or the more explicit _Pre_null_ or _Pre_satisfies_() when appropriate. "Partial success" can be handled with the _When_ annotation. For more information, see Using SAL Annotations to Reduce C/C++ Code Defects.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/hh568719.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/hh568719.aspx</a></p>
]]>
    <tag>bug</tag>
    </description>
    <internalKey>C6101</internalKey>
    <severity>CRITICAL</severity>
    <type>BUG</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C6102</key>
    <name>C6102: Using result from failed function call</name>
    <description><![CDATA[<p>
This warning is reported instead of C6001 when a variable is not set because it was marked as an _Out_ parameter on a prior function call that failed.
The problem might be that the prior called function is not completely annotated. It may require _Always_, _Outptr_result_nullonfailure_ (_COM_Outptr_ for COM code), or a related annotation.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/dn584400.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/dn584400.aspx</a></p>
]]>
    </description>
    <tag>bug</tag>
    <internalKey>C6102</internalKey>
    <severity>CRITICAL</severity>
    <type>BUG</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C6103</key>
    <name>C6103: Returning &lt;variable&gt; from failed function call at line &lt;location&gt;</name>
    <description><![CDATA[<p>
A successful path through the function is returning a variable that was used as an _Out_ parameter to an internal function call that failed.
The problem might be that the called function and the calling function are not completely annotated. The called function may require _Always_, _Outptr_result_nullonfailure_ (_COM_Outptr_ for COM code), or a related annotation, and the calling function may require a _Success_ annotation. Another possible cause for this warning is that the _Success_ annotation on the called function is incorrect.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/dn584399.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/dn584399.aspx</a></p>
]]>
    </description>
    <tag>bug</tag>
    <internalKey>C6103</internalKey>
    <severity>CRITICAL</severity>
    <type>BUG</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule> 
  <rule>
    <key>C6200</key>
    <name>C6200: index &lt;name&gt; is out of valid index range &lt;min&gt; to &lt;max&gt; for non-stack buffer &lt;variable&gt; </name>
    <description><![CDATA[<p>
This warning indicates that an integer offset into the specified array exceeds the maximum bounds of that array. This defect might cause random behavior or crashes.
One common cause of this defect is using the size of an array as an index into the array. Because C/C++ array indexing is zero-based, the maximum legal index into an array is one less than the number of array elements.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/ms182081.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/ms182081.aspx</a></p>
]]>
    </description>
    <tag>bug</tag>
    <internalKey>C6200</internalKey>
    <severity>CRITICAL</severity>
    <type>BUG</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C6201</key>
    <name>C6201: buffer overrun for &lt;variable&gt;, which is possibly stack allocated: index &lt;name&gt; is out of valid index range &lt;min&gt; to &lt;max&gt;</name>
    <description><![CDATA[<p>
This warning indicates that an integer offset into the specified stack array exceeds the maximum bounds of that array. This defect might cause random behavior or crashes.
One common cause of this defect is using an array's size as an index into the array. Because C/C++ array indexing is zero-based, the maximum legal index into an array is one less than the number of array elements.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/11ckc29k.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/11ckc29k.aspx</a></p>
]]>
    </description>
    <tag>bug</tag>
    <internalKey>C6201</internalKey>
    <severity>CRITICAL</severity>
    <type>BUG</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C6202</key>
    <name>C6202: buffer overrun for &lt;variable&gt;, which is possibly stack allocated, in call to &lt;function&gt;: length &lt;size&gt; exceeds buffer size &lt;max&gt;</name>
    <description><![CDATA[<p>
This warning indicates that a parameter pointing to a stack buffer of known size is being passed into a function that copies more bytes into it than that size. This situation will cause a buffer overrun. This defect is likely to cause an exploitable security hole or a program crash.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/subscriptions/administration/6cb2bae4(v=vs.90)" target="_blank">https://msdn.microsoft.com/en-us/subscriptions/administration/6cb2bae4(v=vs.90)</a></p>
<h2>References</h2>
<p><a href="https://cwe.mitre.org/data/definitions/788.html" target="_blank">CWE-788: Access of Memory Location After End of Buffer</a></p>
]]>
    </description>
    <tag>bug</tag>
    <tag>cwe</tag>
    <internalKey>C6202</internalKey>
    <severity>CRITICAL</severity>
    <type>BUG</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C6203</key>
    <name>C6203: buffer overrun for buffer &lt;variable&gt; in call to &lt;function&gt;: length &lt;size&gt; exceeds buffer size </name>
    <description><![CDATA[<p>
This warning indicates that a parameter that points to a non-stack buffer of known size is being passed into a function that copies more bytes into it than that size. This situation will cause a buffer overrun.
This defect might cause an exploitable security hole or a program crash.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/subscriptions/administration/77w7wbyc(v=vs.90)" target="_blank">https://msdn.microsoft.com/en-us/subscriptions/administration/77w7wbyc(v=vs.90)</a></p>
<h2>References</h2>
<p><a href="https://cwe.mitre.org/data/definitions/788.html" target="_blank">CWE-788: Access of Memory Location After End of Buffer</a></p>
]]>
    </description>
    <tag>cwe</tag>
    <tag>bug</tag>
    <internalKey>C6203</internalKey>
    <severity>CRITICAL</severity>
    <type>BUG</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C6204</key>
    <name>C6204: possible buffer overrun in call to &lt;function&gt;: use of unchecked parameter &lt;variable&gt;</name>
    <description><![CDATA[<p>
This warning indicates that a function call is being made that could potentially lead to an overrun of a stack buffer, depending on the possible values of parameters to the function being analyzed. This defect might cause an exploitable buffer overrun or crash.
It is a good idea to review the code, as well as the callers to this function, to see whether the function can ever be called with unexpected data. If it is not clear that all calls are safe, it might be appropriate to validate the input to the function by checking the length of any input strings or by annotating the function parameter using appropriate properties.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/subscriptions/downloads/7exfe3st(v=vs.80).aspx" target="_blank">https://msdn.microsoft.com/en-us/subscriptions/downloads/7exfe3st(v=vs.80).aspx</a></p>
]]>
    </description>
    <internalKey>C6204</internalKey>
    <severity>CRITICAL</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C6209</key>
    <name>C6209: using 'sizeof&lt;variable1&gt;' as parameter &lt;number&gt; in call to &lt;function&gt; where &lt;variable2&gt; may be an array of wide characters</name>
    <description><![CDATA[<p>
C6209: using 'sizeof&lt;variable1&gt;' as parameter &lt;number&gt; in call to &lt;function&gt; where &lt;variable2&gt; may be an array of wide characters, did you intend to use character count rather than byte count?
This warning indicates that a parameter to a function call might incorrectly be a byte count instead of a character count. If this is the case, this defect is likely to cause a memory corruption or program crash, although some cases might cause an exploitable security hole.
A common cause of this defect is using sizeof on a character array. The sizeof operator always computes the number of bytes. For ANSI characters this is the same as the number of characters; however, for Unicode characters it is twice the number of characters.
It is usually safe to compute the number of elements in an array by dividing the size of the array by the size of each element.
This warning is generated when:
- A variable is passed as one parameter and sizeof that variable is passed as another parameter.
- Both the variable type and the formal parameter type are some variety of pointer-to-wide char.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/subscriptions/downloads/e7ca7stt(v=vs.90).aspx" target="_blank">https://msdn.microsoft.com/en-us/subscriptions/downloads/e7ca7stt(v=vs.90).aspx</a></p>
<h2>References</h2>
<p><a href="https://cwe.mitre.org/data/definitions/788.html" target="_blank">CWE-788: Access of Memory Location After End of Buffer</a></p>
]]>
    </description>
    <tag>cwe</tag>
    <internalKey>C6209</internalKey>
    <severity>CRITICAL</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C6211</key>
    <name>C6211: Leaking memory &lt;pointer&gt; due to an exception. Consider using a local catch block to clean up memory</name>
    <description><![CDATA[<p>
This warning indicates that allocated memory is not being freed when an exception is thrown. The statement at the end of the path could throw an exception. The analyzer checks for this condition only when the _Analysis_mode_(_Analysis_local_leak_checks_) SAL annotation is specified. By default, this annotation is specified for Windows kernel mode (driver) code. For more information about SAL annotations, see Using SAL Annotations to Reduce C/C++ Code Defects.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/f1ac315x.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/f1ac315x.aspx</a></p>
]]>
    </description>
    <internalKey>C6211</internalKey>
    <severity>CRITICAL</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C6214</key>
    <name>C6214: cast between semantically different integer types: HRESULT to a Boolean type</name>
    <description><![CDATA[<p>
This warning indicates that an HRESULT is being cast to a Boolean type. The success value (S_OK) of an HRESULT equals 0. However, 0 indicates failure for a Boolean type. Casting an HRESULT to a Boolean type and then using it in a test expression will yield an incorrect result. Sometimes, this warning occurs if an HRESULT is being stored in a Boolean variable. Any comparison that uses the Boolean variable to test for HRESULT success or failure could lead to incorrect results.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/yy6dx731.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/yy6dx731.aspx</a></p>
]]>
    </description>
    <internalKey>C6214</internalKey>
    <severity>CRITICAL</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C6215</key>
    <name>C6215: cast between semantically different integer types: a Boolean type to HRESULT </name>
    <description><![CDATA[<p>
This warning indicates that a Boolean is being cast to an HRESULT. Boolean types indicate success by a non-zero value, whereas success (S_OK) in HRESULT is indicated by a value of 0. Casting a Boolean type to an HRESULT and then using it in a test expression will yield an incorrect result.
This warning frequently occurs when a Boolean is used as an argument to SUCCEEDED or FAILED macro, which explicitly casts their arguments to an HRESULT.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/ws523se7.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/ws523se7.aspx</a></p>
]]>
    </description>
    <internalKey>C6215</internalKey>
    <severity>CRITICAL</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C6216</key>
    <name>C6216: compiler-inserted cast between semantically different integral types: a Boolean type to HRESULT</name>
    <description><![CDATA[<p>
This warning indicates that a Boolean is being used as an HRESULT without being explicitly cast. Boolean types indicate success by a non-zero value; success (S_OK) in HRESULT is indicated by a value of 0. The typical failure value for functions that return a Boolean false is a success status when it is tested as an HRESULT. This is likely to lead to incorrect results.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/5w433f79.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/5w433f79.aspx</a></p>
]]>
    </description>
    <internalKey>C6216</internalKey>
    <severity>CRITICAL</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C6217</key>
    <name>C6217: Implicit cast between semantically different integer types: testing HRESULT with 'not'. Consider using SUCCEEDED or FAILED macro instead</name>
    <description><![CDATA[<p>
This warning indicates that an HRESULT is being tested with the not (!) operator. A success (S_OK) in HRESULT is indicated by a value of 0. However, 0 indicates failure for a Boolean type. Testing HRESULT with the not operator (!) to determine which code block to run can cause following the wrong code path. This will lead to unwanted results.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/z5aa1ca1.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/z5aa1ca1.aspx</a></p>
]]>
    </description>
    <internalKey>C6217</internalKey>
    <severity>CRITICAL</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C6219</key>
    <name>C6219: Implicit cast between semantically different integer types: comparing HRESULT to 1 or TRUE. Consider using SUCCEEDED or FAILED macro instead</name>
    <description><![CDATA[<p>
This warning indicates that an HRESULT is being compared with an explicit, non-HRESULT value of one (1). This is likely to lead to incorrect results because the typical success value of HRESULT (S_OK) is 0; comparing it to a Boolean type will implicitly convert it to false.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/f8xkayyz.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/f8xkayyz.aspx</a></p>
]]>
    </description>
    <internalKey>C6219</internalKey>
    <severity>CRITICAL</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C6220</key>
    <name>C6220 - Implicit cast between semantically different integer types: comparing HRESULT to -1. Consider using SUCCEEDED or FAILED macro instead</name>
    <description><![CDATA[<p>
This warning indicates that an HRESULT is being compared with an explicit, non-HRESULT value of -1, which is not a well-formed HRESULT. A failure in HRESULT (E_FAIL) is not represented by a -1. Therefore, an implicit cast of an HRESULT to an integer will generate an incorrect value and is likely to lead to the wrong result.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/8fd23y4h.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/8fd23y4h.aspx</a></p>
]]>
    </description>
    <internalKey>C6220</internalKey>
    <severity>CRITICAL</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C6221</key>
    <name>C6221: Implicit cast between semantically different integer types: comparing HRESULT to an integer. Consider using SUCCEEDED or FAILED macros instead</name>
    <description><![CDATA[<p>
This warning indicates that an HRESULT is being compared to an integer other than zero. A success in HRESULT (S_OK) is represented by a 0. Therefore, an implicit cast of an HRESULT to an integer will generate an incorrect value and is likely to lead to the wrong result. It is often caused by mistakenly expecting a function to return an integer when it actually returns an HRESULT.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/s23ytbcb.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/s23ytbcb.aspx</a></p>
]]>
    </description>
    <internalKey>C6221</internalKey>
    <severity>CRITICAL</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C6225</key>
    <name>C6225: Implicit cast between semantically different integer types: assigning 1 or TRUE to HRESULT. Consider using S_FALSE instead</name>
    <description><![CDATA[<p>
This warning indicates that an HRESULT is being assigned or initialized with a value of an explicit 1. Boolean types indicate success by a non-zero value; success (S_OK) in HRESULT is indicated by a value of 0. This warning is frequently caused by accidental confusion of Boolean and HRESULT types. To indicate success, the symbolic constant S_OK should be used.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/sf8wacwc.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/sf8wacwc.aspx</a></p>
]]>
    </description>
    <internalKey>C6225</internalKey>
    <severity>CRITICAL</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C6226</key>
    <name>C6226: Implicit cast between semantically different integer types: assigning -1 to HRESULT. Consider using E_FAIL instead</name>
    <description><![CDATA[<p>
This warning indicates that an HRESULT is being assigned or initialized with a value of an explicit -1. This warning is frequently caused by accidental confusion of integer and HRESULT types. To indicate success, the symbolic constant S_OK should be used. To indicate failure, the symbolic constants starting with E_constant should be used.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/02a42stb.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/02a42stb.aspx</a></p>
]]>
    </description>
    <internalKey>C6226</internalKey>
    <severity>CRITICAL</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C6230</key>
    <name>C6230: implicit cast between semantically different integer types: using HRESULT in a Boolean context </name>
    <description><![CDATA[<p>
This warning indicates that a bare HRESULT is being used in a context, such as if statement, where a Boolean result is expected. This is likely to yield incorrect results. For example, the typical success value for HRESULT (S_OK) is false when it is tested as a Boolean.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/fa7f2a8w.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/fa7f2a8w.aspx</a></p>
]]>
    </description>
    <internalKey>C6230</internalKey>
    <severity>CRITICAL</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C6235</key>
    <name>C6235: (&lt;non-zero constant&gt; || &lt;expression&gt;) is always a non-zero constant</name>
    <description><![CDATA[<p>
This warning indicates that a non-zero constant value, other than one, was detected on the left side of a logical-or operation that occurs in a test context. The right side of the logical-or operation is not evaluated because the resulting expression always evaluates to true. This is referred to as &quot;short-circuit evaluation.&quot;
A non-zero constant value, other than one, suggests that the bitwise-AND operator (&amp;) may have been intended. This warning is not generated for the common idiom when the non-zero constant is 1, because of its use for selectively enabling code paths, but it is generated if the non-zero constant evaluates to 1, for example 1+0.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/hth877wa.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/hth877wa.aspx</a></p>
]]>
    </description>
    <tag>bug</tag>
    <internalKey>C6235</internalKey>
    <severity>CRITICAL</severity>
    <type>BUG</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C6236</key>
    <name>C6236: (&lt;expression&gt; || &lt;non-zero constant&gt;) is always a non-zero constant</name>
    <description><![CDATA[<p>
This warning indicates that a non-zero constant value, other than one, was detected on the right side of a logical-or operation that occurs in a test context. The left side of the logical-or operation is not evaluated because the resulting expression always evaluates to true. This is referred to as &quot;short-circuit evaluation.&quot;
A constant value other than one suggests that the bitwise-AND operator (&amp;) may have been intended. This warning is not generated for the common idiom when the non-zero constant is 1, because of its use for selectively enabling code paths, but it is generated if the non-zero constant evaluates to 1, for example 1+0.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/s47sh3zd.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/s47sh3zd.aspx</a></p>
]]>
    </description>
    <tag>bug</tag>
    <internalKey>C6236</internalKey>
    <severity>CRITICAL</severity>
    <type>BUG</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C6237</key>
    <name>C6237: (&lt;zero&gt; &amp;&amp; &lt;expression&gt;) is always zero. &lt;expression&gt; is never evaluated and may have side effects</name>
    <description><![CDATA[<p>
This warning indicates that a constant value of zero was detected on the left side of a logical-and operation that occurs in a test context. The resulting expression always evaluates to false. Therefore, the right side of the logical-AND operation is not evaluated. This is referred to as &quot;short-circuit evaluation.&quot;
You should examine the right side of the expression carefully to ensure that any side effects such as assignment, function call, increment, and decrement operations needed for proper functionality are not affected by the short-circuit evaluation.
The expression (0 &amp;&amp; n) produces no side effects and is commonly used to selectively choose code paths.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/tc0hhb88.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/tc0hhb88.aspx</a></p>
]]>
    </description>
    <tag>bug</tag>
    <internalKey>C6237</internalKey>
    <severity>CRITICAL</severity>
    <type>BUG</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C6239</key>
    <name>C6239: (&lt;non-zero constant&gt; &amp;&amp; &lt;expression&gt;) always evaluates to the result of &lt;expression&gt;. Did you intend to use the bitwise-and operator?</name>
    <description><![CDATA[<p>
This warning indicates that a non-zero constant value, other than one, was detected on the left side of a logical-AND operation that occurs in a test context. For example, the expression ( 2 &amp;&amp; n ) is reduced to (!!n), which is the Boolean value of n.
This warning typically indicates an attempt to check a bit mask in which the bitwise-AND (&amp;) operator should be used, and is not generated if the non-zero constant evaluates to 1 because of its use for selectively choosing code paths.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/4tf88f7e.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/4tf88f7e.aspx</a></p>
]]>
    </description>
    <tag>bug</tag>
    <internalKey>C6239</internalKey>
    <severity>CRITICAL</severity>
    <type>BUG</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C6240</key>
    <name>C6240: (&lt;expression&gt; &amp;&amp; &lt;non-zero constant&gt;) always evaluates to the result of &lt;expression&gt;. Did you intend to use the bitwise-and operator?</name>
    <description><![CDATA[<p>
This warning indicates that a non-zero constant value, other than one, was detected on the right side of a logical-and operation that occurs in a test context. For example, the expression (n &amp;&amp; 3) reduces to (!!n), which is the Boolean value of n.
This warning typically indicates an attempt to check a bit mask in which the bitwise-AND (&amp;) operator should be used. It is not generated if the non-zero constant evaluates to 1 because of its use for selectively choosing code paths.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/yf3fex1f.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/yf3fex1f.aspx</a></p>
]]>
    </description>
    <tag>bug</tag>
    <internalKey>C6240</internalKey>
    <severity>CRITICAL</severity>
    <type>BUG</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C6242</key>
    <name>C6242: A jump out of this try-block forces local unwind. Incurs severe performance penalty</name>
    <description><![CDATA[<p>
This warning indicates that a jump statement causes control-flow to leave the protected block of a try-finally other than by fall-through.
Leaving the protected block of a try-finally other than by falling through from the last statement requires local unwind to occur. Local unwind typically requires approximately 1000 machine instructions; therefore, it is detrimental to performance.
Use _leave to exit the protected block of a try-finally
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/h91126xk.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/h91126xk.aspx</a></p>
]]>
    </description>
    <internalKey>C6242</internalKey>
    <severity>CRITICAL</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C6244</key>
    <name>C6244: local declaration of &lt;variable&gt; hides previous declaration at &lt;line&gt; of &lt;file&gt;</name>
    <description><![CDATA[<p>
This warning indicates that a declaration has the same name as a declaration at an outer scope and hides the previous declaration. You will not be able to refer to the previous declaration from inside the local scope. Any intended use of the previous declaration will end up using the local declaration This warning only identifies a scope overlap and not lifetime overlap.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/35whedce.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/35whedce.aspx</a></p>
]]>
    </description>
    <internalKey>C6244</internalKey>
    <severity>CRITICAL</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C6246</key>
    <name>C6246: Local declaration of &lt;variable&gt; hides declaration of same name in outer scope. Additional Information: See previous declaration at &lt;location&gt;</name>
    <description><![CDATA[<p>
This warning indicates that two declarations have the same name at local scope. The name at outer scope is hidden by the declaration at the inner scope. Any intended use of the outer scope declaration will result in the use of local declaration.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/eeb7y4c0.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/eeb7y4c0.aspx</a></p>
]]>
    </description>
    <internalKey>C6246</internalKey>
    <severity>CRITICAL</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C6248</key>
    <name>C6248: setting a SECURITY_DESCRIPTOR's DACL to NULL will result in an unprotected object</name>
    <description><![CDATA[<p>
This warning identifies a call that sets a SECURITY_DESCRIPTOR's DACL field to null. If the DACL that belongs to the security descriptor of an object is set to NULL, a null DACL is created. A null DACL grants full access to any user who requests it; normal security checking is not performed with respect to the object. A null DACL should not be confused with an empty DACL. An empty DACL is a properly allocated and initialized DACL that contains no ACEs. An empty DACL grants no access to the object it is assigned to.
Objects that have null DACLs can have their security descriptors altered by malicious users so that no one has access to the object.
Even if everyone needs access to an object, the object should be secured so that only administrators can alter its security. If only the creator needs access to an object, a DACL should not be set on the object; the system will choose an appropriate default.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/c5se1z6d.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/c5se1z6d.aspx</a></p>
<h2>References</h2>
<p><a href="https://cwe.mitre.org/data/definitions/475.html" target="_blank">CWE-475: Undefined Behavior for Input to API</a></p>
]]>
    </description>
    <tag>cwe</tag>    
    <internalKey>C6248</internalKey>
    <severity>CRITICAL</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C6250</key>
    <name>C6250: Calling &lt;function&gt; VirtualFree without the MEM_RELEASE flag may free memory but not address descriptors (VADs); results in address space leaks</name>
    <description><![CDATA[<p>
This warning indicates that a call to VirtualFree without the MEM_RELEASE flag only decommits the pages, and does not release them. To decommit and release pages, use MEM_RELEASE flag in call to VirtualFree. If any pages in the region are committed, the function first decommits and then releases them. After this operation, the pages are in the free state. If you specify this flag, dwSize must be zero, and lpAddress must point to the base address returned by the VirtualAlloc function when the region was reserved. The function fails if either of these conditions is not met.
You can ignore this warning if your code later frees the address space by calling VirtualFree with the MEM_RELEASE flag.
For more information see VirtualAlloc and VirtualFree.
The use of VirtualAlloc and VirtualFree have many pitfalls in terms of memory leaks and exceptions. To avoid these kinds of leaks and exception problems altogether, use the mechanisms that are provided by the C++ Standard Template Library (STL). These include shared_ptr, unique_ptr, and vector. For more information, see Smart Pointers (Modern C++) and Standard C++ Library Reference.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/b7h5eeyy.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/b7h5eeyy.aspx</a></p>
]]>
    </description>
    <internalKey>C6250</internalKey>
    <severity>CRITICAL</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C6255</key>
    <name>C6255: _alloca indicates failure by raising a stack overflow exception. Consider using _malloca instead</name>
    <description><![CDATA[<p>
This warning indicates that a call to _alloca has been detected outside of local exception handling. _alloca should always be called from within the protected range of an exception handler because it can raise a stack overflow exception on failure. If possible, instead of using _alloca, consider using _malloca which is a more secure version of _alloca.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/41bk07s7.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/41bk07s7.aspx</a></p>
]]>
    </description>
    <internalKey>C6255</internalKey>
    <severity>CRITICAL</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C6258</key>
    <name>C6258: using TerminateThread does not allow proper thread clean up</name>
    <description><![CDATA[<p>
This warning indicates that a call to TerminateThread has been detected.
TerminateThread is a dangerous function that should only be used in the most extreme cases. For more information about problems associated with TerminateThread call, see this topic in the MSDN Library: TerminateThread.
To properly terminate threads
- Create an event object using the CreateEvent function.
- Create the threads.
- Each thread monitors the event state by calling the WaitForSingleObject function.
- Each thread ends its own execution when the event is set to the signaled state (WaitForSingleObject returns WAIT_OBJECT_0).
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/xk46a7z3.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/xk46a7z3.aspx</a></p>
]]>
    </description>
    <internalKey>C6258</internalKey>
    <severity>CRITICAL</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C6259</key>
    <name>C6259: labeled code is unreachable: (&lt;expression&gt; &amp; &lt;constant&gt;) in switch-expr cannot evaluate to &lt;case-label&gt;</name>
    <description><![CDATA[<p>
This warning indicates unreachable code caused by the result of a bitwise-AND (&amp;) comparison in a switch expression. The case statement that matches the constant in the switch expression is only reachable; all other case statements are not reachable.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/ww5y5h00.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/ww5y5h00.aspx</a></p>
]]>
    </description>
    <internalKey>C6259</internalKey>
    <severity>CRITICAL</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C6260</key>
    <name>C6260: sizeof * sizeof is almost always wrong, did you intend to use a character count or a byte count?</name>
    <description><![CDATA[<p>
This warning indicates that the results of two sizeof operations have been multiplied together. The C/C++ sizeof operator returns the number of bytes of storage an object uses. It is typically incorrect to multiply it by another sizeof operation; usually one is interested in the number of bytes in an object or the number of elements in an array (for example the number of wide-characters in an array).
There is some unintuitive behavior associated with sizeof operator. For example, in C, the sizeof ('\0') == 4, because a character is of an integral type. In C++, the type of a character literal is char, so sizeof ('\0') == 1. 
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/3fbbcz2a.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/3fbbcz2a.aspx</a></p>
]]>
    </description>
    <tag>bug</tag>
    <internalKey>C6260</internalKey>
    <severity>CRITICAL</severity>
    <type>BUG</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C6262</key>
    <name>C6262: Function uses &lt;constant&gt; bytes of stack: exceeds /analyze:stacksize&lt;constant 2&gt;. Consider moving some data to heap</name>
    <description><![CDATA[<p>
This warning indicates that stack usage that exceeds a preset threshold (constant 2) has been detected in a function. The default stack frame size for this warning is 16 KB for user mode, 1 KB for kernel mode. Stack - even in user mode - is limited, and failure to commit a page of stack causes a stack overflow exception. Kernel mode has a 12 KB stack size limit, which cannot be increased; therefore, kernel-mode code should aggressively limit stack use.
To correct the problem behind this warning, you can either move some data to the heap or to other dynamic memory. In user mode, one large stack frame may not be a problem - and this warning may be suppressed - but a large stack frame increases the risk of a stack overflow. (A large stack frame might occur if the function uses the stack heavily or is recursive.) The total stack size in user mode can be increased if stack overflow actually occurs, but only up to the system limit. You can use the /analyze command-line option to change the value for &lt;constant 2&gt;, but increasing it introduces a risk that an error will not be reported.
For kernel -mode code- for example, in driver projects-the value of &lt;constant 2&gt; is set to 1 KB. Well-written drivers should have very few functions that approach this value, and changing the limit downward may be desirable. The same general techniques that are used for user-mode code to reduce the stack size can be adapted to kernel-mode code.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/7yhee2f0.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/7yhee2f0.aspx</a></p>
]]>
    </description>
    <internalKey>C6262</internalKey>
    <severity>CRITICAL</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C6263</key>
    <name>C6263: using _alloca in a loop; this can quickly overflow stack</name>
    <description><![CDATA[<p>
This warning indicates that calling _alloca inside a loop to allocate memory can cause stack overflow. _alloca allocates memory from the stack, but that memory is only freed when the calling function exits. Stack, even in user-mode, is limited, and failure to commit a page of stack causes a stack overflow exception. The _resetstkoflw function recovers from a stack overflow condition, allowing a program to continue instead of failing with a fatal exception error. If the _resetstkoflw function is not called, there is no guard page after the previous exception. The next time that there is a stack overflow, there are no exceptions at all and the process terminates without warning.
You should avoid calling _alloca inside a loop if either the allocation size or the iteration count is unknown because it might cause stack overflow. In these cases, consider other options such as, heap memory, or Standard C++ Library Reference classes.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/94446w6y.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/94446w6y.aspx</a></p>
]]>
    </description>
    <internalKey>C6263</internalKey>
    <severity>CRITICAL</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C6268</key>
    <name>C6268: Incorrect order of operations: (&lt;TYPE1&gt;)(&lt;TYPE2&gt;)x + y. Possible missing parentheses in (&lt;TYPE1&gt;)((&lt;TYPE2&gt;)x + y)</name>
    <description><![CDATA[<p>
This warning indicates that a complex cast expression might involve a precedence problem when performing pointer arithmetic. Because casts group more closely than binary operators, the result might not be what the programmer intended. In some cases, this defect causes incorrect behavior or a program crash.
In an expression such as:
(char *)p + offset
the offset is interpreted as an offset in characters; however, an expression such as:
(int *)(char *)p + offset
is equivalent to:
((int *)(char *)p) + offset
and so the offset is interpreted as an offset in integers. In other words, it is equivalent to:
(int *)((char *)p + (offset * sizeof(int)))
which is not likely to be what the programmer intended.
Depending on the relative sizes of the two types, this can lead to a buffer overrun.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/wa4y3ac1.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/wa4y3ac1.aspx</a></p>
]]>
    </description>
    <internalKey>C6268</internalKey>
    <severity>CRITICAL</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C6269</key>
    <name>C6269: possible incorrect order of operations: dereference ignored</name>
    <description><![CDATA[<p>
This warning indicates that the result of a pointer dereference is being ignored, which raises the question of why the pointer is being dereferenced in the first place.
The compiler will correctly optimize away the gratuitous dereference. In some cases, however, this defect may reflect a precedence or logic error.
One common cause for this defect is an expression statement of the form: *p++;
If the intent of this statement is simply to increment the pointer p, then dereference is unnecessary; however, if the intent is to increment the location that p is pointing to, then the program will not behave as intended because *p++ construct is interpreted as * (p++). instead of (*p)++.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/shas26ya.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/shas26ya.aspx</a></p>
]]>
    </description>
    <internalKey>C6269</internalKey>
    <severity>CRITICAL</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C6270</key>
    <name>C6270: missing float argument to &lt;function&gt;: add a float argument corresponding to conversion specifier &lt;number&gt;</name>
    <description><![CDATA[<p>
This warning indicates that not enough arguments are being provided to match a format string; at least one of the missing arguments is a floating-point number. This defect can lead to crashes, in addition to potentially incorrect output
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/ka12w29t.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/ka12w29t.aspx</a></p>
]]>
    </description>
    <internalKey>C6270</internalKey>
    <severity>CRITICAL</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C6271</key>
    <name>C6271: extra argument passed to &lt;function&gt;: parameter &lt;number&gt; is not used by the format string</name>
    <description><![CDATA[<p>
This warning indicates that additional arguments are being provided beyond those specified by the format string. By itself, this defect will not have any visible effect although it indicates that the programmer's intent is not reflected in the code.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/at2yzcx3.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/at2yzcx3.aspx</a></p>
]]>
    </description>
    <internalKey>C6271</internalKey>
    <severity>CRITICAL</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C6272</key>
    <name>C6272: non-float passed as argument &lt;number&gt; when float is required in call to &lt;function&gt;</name>
    <description><![CDATA[<p>
This warning indicates that the format string specifies that a float is required, for example, a %f or %g specification for printf, but a non-float such as an integer or string is being passed. This defect is likely to result in incorrect output; however, in certain circumstances it could result in a crash.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/whd3hkw6.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/whd3hkw6.aspx</a></p>
]]>
    </description>
    <tag>bug</tag>
    <internalKey>C6272</internalKey>
    <severity>CRITICAL</severity>
    <type>BUG</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C6273</key>
    <name>C6273 - non-integer passed as parameter &lt;number&gt; when integer is required in call to &lt;function&gt;: if a pointer value is being passed, %p should be used</name>
    <description><![CDATA[<p>
This warning indicates that the format string specifies an integer, for example, a %d, length or precedence specification for printf but a non-integer such as a float, string, or struct is being passed as a parameter. This defect is likely to result in incorrect output.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/43dd9ae2.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/43dd9ae2.aspx</a></p>
]]>
    </description>
    <internalKey>C6273</internalKey>
    <severity>CRITICAL</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C6274</key>
    <name>C6274: non-character passed as parameter &lt;number&gt; when character is required in call to &lt;function&gt;</name>
    <description><![CDATA[<p>
This warning indicates that the format string specifies that a character is required (for example, a %c or %C specification) but a non-integer such as a float, string, or struct is being passed. This defect is likely to cause incorrect output.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/5fc59f7w.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/5fc59f7w.aspx</a></p>
]]>
    </description>
    <internalKey>C6274</internalKey>
    <severity>CRITICAL</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C6276</key>
    <name>C6276: Cast between semantically different string types: char* to wchar_t*. Use of invalid string can lead to undefined behavior</name>
    <description><![CDATA[<p>
This warning indicates a potentially incorrect cast from an ANSI string (char_t*) to a UNICODE string (wchar_t *). Because UNICODE strings have a character size of 2 bytes, this cast might yield strings that are not correctly terminated. Using such strings with the wcs* library of functions could cause buffer overruns and access violations
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/9xkz60db.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/9xkz60db.aspx</a></p>
]]>
    </description>
    <internalKey>C6276</internalKey>
    <severity>CRITICAL</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C6277</key>
    <name>C6277: NULL application name with an unquoted path in call to &lt;function&gt;: results in a security vulnerability if the path contains spaces</name>
    <description><![CDATA[<p>
This warning indicates that the application name parameter is null and there might be spaces in the executable path name. In this case, unless the executable name is "fully qualified," there is likely to be a security problem. A malicious user might insert a rogue executable with the same name earlier in the path. To correct this warning, you can specify the application name instead of passing null or if you do pass null for the application name, use quotation marks around the executable path.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/4b4tecce.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/4b4tecce.aspx</a></p>
<h2>References</h2>
<p><a href="https://cwe.mitre.org/data/definitions/475.html" target="_blank">CWE-475: Undefined Behavior for Input to API</a></p>
]]>
    </description>
    <tag>cert</tag>
    <tag>cwe</tag>    
    <internalKey>C6277</internalKey>
    <severity>CRITICAL</severity>
    <type>VULNERABILITY</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C6278</key>
    <name>C6278: &lt;variable&gt; is allocated with array new [], but deleted with scalar delete. Destructors will not be called</name>
    <description><![CDATA[<p>
This warning appears only in C++ code and indicates that the calling function has inconsistently allocated memory with the array new [] operator, but freed it with the scalar delete operator. This is undefined behavior according to the C++ standard and the Microsoft Visual C++ implementation. There are at least three reasons that this is likely to cause problems:
- The constructors for the individual objects in the array are invoked, but the destructors are not invoked.
- If global, or class-specific, operator new and operator delete are not compatible with operator new[] and operator delete[], unexpected results are likely to occur.
- It is always very risky to rely on undefined behavior.
The exact ramifications of this defect are difficult to predict. It might result in leaks for classes with destructors that perform memory de-allocation; inconsistent behavior for classes with destructors that perform some semantically significant operation; or memory corruptions and crashes when operators have been overridden. In other cases the mismatch might be unimportant, depending on the implementation of the compiler and its libraries. Analysis tool cannot always distinguish between these situations.
If memory is allocated with array new [], it should be typically be freed with array delete[].
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/191z9hcz.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/191z9hcz.aspx</a></p>
]]>
    </description>
    <tag>bug</tag>
    <internalKey>C6278</internalKey>
    <severity>CRITICAL</severity>
    <type>BUG</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>

  <rule>
    <key>C6279</key>
    <name>C6279: &lt;variable&gt; is allocated with scalar new, deleted with array delete [] </name>
    <description><![CDATA[<p>
This warning appears only in C++ code and indicates that the calling function has inconsistently allocated memory with the scalar new operator, but freed it with the array delete [] operator. If memory is allocated with scalar new, it should typically be freed with scalar delete.
There are at least three reasons that this is likely to cause problems:
- The constructors for the individual objects in the array are not invoked, although the destructors are.
- If global (or class-specific) operator new and operator delete are not compatible with operator new[] and operator delete[], unexpected results are likely to occur.
The exact ramifications of this defect are difficult to predict. It might cause random behavior or crashes due to usage of uninitialized memory because constructors are not invoked. Or, it might cause memory allocations and crashes in situations where operators have been overridden. In rare cases, the mismatch might be unimportant. Analysis tool does not currently distinguish between these situations.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/wzasf4t2.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/wzasf4t2.aspx</a></p>
]]>
    </description>
    <tag>bug</tag>
    <internalKey>C6279</internalKey>
    <severity>CRITICAL</severity>
    <type>BUG</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>

  <rule>
    <key>C6280</key>
    <name>C6280: &lt;variable&gt; is allocated with &lt;function&gt;, but deleted with &lt;function&gt;</name>
    <description><![CDATA[<p>
This warning indicates that the calling function has inconsistently allocated memory by using a function from one memory allocation family and freed it by using a function from another memory allocation family. The analyzer checks for this condition only when the _Analysis_mode_(_Analysis_local_leak_checks_) SAL annotation is specified. By default, this annotation is specified for Windows kernel mode (driver) code. For more information about SAL annotations, see Using SAL Annotations to Reduce C/C++ Code Defects.
For example, this warning would be produced if memory is allocated by using malloc but freed by using GlobalFree or delete. In the specific cases of mismatches between array new[] and scalar delete, more precise warnings are reported instead of this one.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/hdkf1w6d.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/hdkf1w6d.aspx</a></p>
]]>
    </description>
    <tag>brain-overload</tag>
    <internalKey>C6280</internalKey>
    <severity>CRITICAL</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>

  <rule>
    <key>C6281</key>
    <name>C6281 - incorrect order of operations: relational operators have higher precedence than bitwise operators</name>
    <description><![CDATA[<p>
This warning indicates a possible error in the operator precedence. This might produce incorrect results. You should check the precedence and use parentheses to clarify the intent. Relational operators (&lt;, &gt;, &lt;=, &gt;=, ==, != ) have higher precedence than bitwise operators (&amp; | ^). 
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/f0f02da9.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/f0f02da9.aspx</a></p>
]]>
    </description>
    <internalKey>C6281</internalKey>
    <severity>CRITICAL</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>

  <rule>
    <key>C6282</key>
    <name>C6282: Incorrect operator: assignment of constant in Boolean context. Consider using '==' instead</name>
    <description><![CDATA[<p>
This warning indicates that an assignment of a constant to a variable was detected in a test context. Assignment of a constant to a variable in a test context is almost always incorrect. Replace the = with ==, or remove the assignment from the test context to resolve this warning. 
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/esa6csd7.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/esa6csd7.aspx</a></p>
]]>
    </description>
    <internalKey>C6282</internalKey>
    <severity>CRITICAL</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>

  <rule>
    <key>C6283</key>
    <name>C6283: &lt;variable&gt; is allocated with array new [], but deleted with scalar delete</name>
    <description><![CDATA[<p>
This warning appears only in C++ code and indicates that the calling function has inconsistently allocated memory with the array new [] operator, but freed it with the scalar delete operator. This defect might cause leaks, memory corruptions, and, in situations where operators have been overridden, crashes. If memory is allocated with array new [], it should typically be freed with array delete[].
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/kkyz199f.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/kkyz199f.aspx</a></p>
]]>
    </description>
    <tag>bug</tag>
    <internalKey>C6283</internalKey>
    <severity>CRITICAL</severity>
    <type>BUG</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>

  <rule>
    <key>C6284</key>
    <name>C6284: object passed as parameter '%d' when string is required in call to &lt;function&gt;</name>
    <description><![CDATA[<p>
This warning indicates that the format string specifies a string, for example, a %s specification for printf or scanf, but a C++ object has been passed instead.
This defect might produce incorrect output or crashes.
This message is often reported due to passing a C++ object implementing some string type, for example, std::string, CComBSTR or bstr_t, into a C printf-style call. Depending on the implementation of the C++ class, that is, if the proper cast operators are defined, C++ string objects can often be used transparently whenever C strings are required; however, because parameters to printf-style functions are essentially untyped, no conversion to a string occurs.
Depending on the object, it might be appropriate to insert a static_cast operator to the appropriate string type, for example, char * or TCHAR *, or to call a member function which returns a string, for example, c_str(), on instances of std::string.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/ta308ywy.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/ta308ywy.aspx</a></p>
]]>
    </description>
    <internalKey>C6284</internalKey>
    <severity>CRITICAL</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>

  <rule>
    <key>C6285</key>
    <name>C6285: (&lt;non-zero constant&gt; || &lt;non-zero constant&gt;) is always a non-zero constant. Did you intend to use the bitwise-and operator?</name>
    <description><![CDATA[<p>
This warning indicates that two constant values, both greater than one, were detected as arguments to a logical-or operation that occurs in a test context. This expression is always TRUE.
Constant values greater than one suggest that the arguments to logical-or could be bit fields. Consider whether a bitwise operator might be a more appropriate operator in this case.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/6k3z9ets.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/6k3z9ets.aspx</a></p>
]]>
    </description>
    <internalKey>C6285</internalKey>
    <severity>CRITICAL</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>

  <rule>
    <key>C6286</key>
    <name>C6286: (&lt;non-zero constant&gt; || &lt;expression&gt;) is always a non-zero constant. &lt;expression&gt; is never evaluated and may have side effects</name>
    <description><![CDATA[<p>
This warning indicates that a non-zero constant was detected on the left side of a logical-or operation that occurs in a test context. The resulting expression always evaluates to TRUE. In addition, the right side of the expression appears to have side effects, and they will be lost.
This warning indicates that you may want to examine the right side of the expression carefully to ensure that any side effects needed for proper functionality are not lost.
The (!0 || &lt;expression&gt;) construction is commonly used to force execution of a controlled block.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/x032x8x9.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/x032x8x9.aspx</a></p>
]]>
    </description>
    <internalKey>C6286</internalKey>
    <severity>CRITICAL</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>

  <rule>
    <key>C6287</key>
    <name>C6287: redundant code: the left and right sub-expressions are identical</name>
    <description><![CDATA[<p>
This warning indicates that a redundant element was detected in an expression.
It is difficult to judge the severity of this problem without examining the code. A duplicate test on its own is harmless, but the consequences of deleting the second test can be severe. The code should be inspected to ensure that a test was not omitted.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/6dhhd6k6.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/6dhhd6k6.aspx</a></p>
]]>
    </description>
    <tag>bug</tag>
    <internalKey>C6287</internalKey>
    <severity>CRITICAL</severity>
    <type>BUG</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>

  <rule>
    <key>C6288</key>
    <name>C6288: Incorrect operator: mutual inclusion over &amp;&amp; is always zero. Did you intent to use || instead?</name>
    <description><![CDATA[<p>
This warning indicates that in a test expression, a variable is being tested against two different constants and the result depends on both conditions being true. The code in these cases indicates that the programmer's intent is not captured correctly. It is important to examine the code and correct the problem; otherwise your code will not behave the way you expected it to.
This problem is generally caused by using &amp;&amp;; in place of ||, but can also be caused by using == where != was intended.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/8dat2ecs.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/8dat2ecs.aspx</a></p>
]]>
    </description>
    <internalKey>C6288</internalKey>
    <severity>CRITICAL</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>

  <rule>
    <key>C6289</key>
    <name>C6289: Incorrect operator: mutual exclusion over || is always a non-zero constant. Did you intend to use &amp;&amp; instead?</name>
    <description><![CDATA[<p>
This warning indicates that in a test expression a variable is being tested against two different constants and the result depends on either condition being true. This always evaluates to true.
This problem is generally caused by using || in place of &amp;&amp;, but can also be caused by using != where == was intended. 
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/70wx36ch.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/70wx36ch.aspx</a></p>
]]>
    </description>
    <internalKey>C6289</internalKey>
    <severity>CRITICAL</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>

  <rule>
    <key>C6290</key>
    <name>C6290: Bitwise operation on logical result: ! has higher precedence than &amp;. Use &amp;&amp; or (!(x &amp; y)) instead</name>
    <description><![CDATA[<p>
This warning indicates possible confusion in the use of an operator or an operator precedence.
The ! operator yields a Boolean result, and it has higher precedence than the &amp;.The bitwise-and (&amp;) operator takes two arithmetic arguments. Therefore, one of the following errors has been detected:
- The expression is mis-parenthesised:
Because the result of ! is Boolean (zero or one), an attempt to test that two variables have bits in common will only end up testing that the lowest bit is present in the right side: ((!8) &amp; 1) == 0.
- The ! operator is incorrect, and should be a ~ instead:
The ! operator has a Boolean result, while the ~ operator has an arithmetic result. These operators are never interchangeable, even when operating on a Boolean value (zero or one): ((!0x01) &amp; 0x10) == 0x0, while ((~0x01) &amp; 0x10) == 0x10.
- The binary operator &amp; is incorrect, and should instead be &amp;&amp;:
While &amp; can sometimes be interchanged with &amp;&amp;, it is not equivalent because it forces evaluation of the right side of the expression. Certain side effects in this type of expression can be terminal.
It is difficult to judge the severity of this problem without examining the code. The code should be inspected to ensure that the intended test is occurring.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/z01etkwy.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/z01etkwy.aspx</a></p>
]]>
    </description>
    <internalKey>C6290</internalKey>
    <severity>CRITICAL</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>

  <rule>
    <key>C6291</key>
    <name>C6291: Bitwise operation on logical result: ! has higher precedence than |. Use || or (!(x | y)) instead</name>
    <description><![CDATA[<p>
The ! operator yields a Boolean result, and the | (bitwise-or) operator takes two arithmetic arguments. The ! operator also has higher precedence than |.
Therefore, one of the following errors has been detected:
- The expression is mis-parenthesised:
Because the result of ! is Boolean (zero or one), an attempt to test that two variables have bits set will only end up testing that the lowest bit is present in the right side: ((!x) | y) != (!(x | y)) when x == 0 and y == 1.
- The ! operator is incorrect, and should be a ~ instead:
The ! operator has a Boolean result, but the ~ operator has an arithmetic result. These operators are never interchangeable, even when operating on a Boolean value (zero or one): ((!x) | y) != ((~x) | y) when x == 1 and y == 0.
- The binary operator | is incorrect, and should instead be ||:
Even though | can sometimes be interchanged with ||, it is not equivalent because it forces evaluation of the right side of the expression. Certain side-effects in this type of expression can be terminal: (!p | (*p == '\0')), when p == NULL, we must dereference it to evaluate the other half of the expression.
This warning is not reported if the ! operator is on the right side of the | operator because this case is typically just the relatively harmless case of an incorrect operator.
It is difficult to judge the severity of this problem without examining the code. The code should be inspected to ensure that the intended test is occurring.
This warning always indicates possible confusion in the use of an operator or operator precedence.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/de0054fd.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/de0054fd.aspx</a></p>
]]>
    </description>
    <internalKey>C6291</internalKey>
    <severity>CRITICAL</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>

  <rule>
    <key>C6292</key>
    <name>C6292: ill-defined for-loop: counts up from maximum</name>
    <description><![CDATA[<p>
This warning indicates that a for-loop might not function as intended.
It occurs when a loop counts up from a maximum, but has a lower termination condition. This loop will terminate only after integer overflow occurs.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/65wb8c6e.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/65wb8c6e.aspx</a></p>
]]>
    </description>
    <internalKey>C6292</internalKey>
    <severity>CRITICAL</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>

  <rule>
    <key>C6293</key>
    <name>C6293: Ill-defined for-loop: counts down from minimum</name>
    <description><![CDATA[<p>
This warning indicates that a for-loop might not function as intended. It occurs when a loop counts down from a minimum, but has a higher termination condition.
A signed ‚Äîor unsigned‚Äî index variable together with a negative increment will cause the loop to count negative until an overflow occurs. This will terminate the loop.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/58teb7hd.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/58teb7hd.aspx</a></p>
]]>
    </description>
    <internalKey>C6293</internalKey>
    <severity>CRITICAL</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>

  <rule>
    <key>C6294</key>
    <name>C6294: Ill-defined for-loop: initial condition does not satisfy test. Loop body not executed</name>
    <description><![CDATA[<p>
This warning indicates that a for-loop cannot be executed because the terminating condition is true. This warning suggests that the programmer's intent is not correctly captured.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/107swz3y.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/107swz3y.aspx</a></p>
]]>
    </description>
    <tag>bug</tag>
    <internalKey>C6294</internalKey>
    <severity>CRITICAL</severity>
    <type>BUG</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>

  <rule>
    <key>C6295</key>
    <name>C6295: Ill-defined for-loop: &lt;variable&gt; values are of the range &quot;min&quot; to &quot;max&quot;. Loop executed indefinitely</name>
    <description><![CDATA[<p>
This warning indicates that a for-loop might not function as intended. The for-loop tests an unsigned value against zero (0) with >=. The result is always true, therefore the loop is infinite. 
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/as9w81w9.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/as9w81w9.aspx</a></p>
]]>
    </description>
    <tag>bug</tag>
    <internalKey>C6295</internalKey>
    <severity>CRITICAL</severity>
    <type>BUG</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>

  <rule>
    <key>C6296</key>
    <name>C6296: Ill-defined for-loop: Loop body only executed once</name>
    <description><![CDATA[<p>
This warning indicates that a for-loop might not function as intended. When the index is unsigned and a loop counts down from zero, its body is run only once. 
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/fxt5ta87.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/fxt5ta87.aspx</a></p>
]]>
    </description>
    <tag>bug</tag>
    <internalKey>C6296</internalKey>
    <severity>CRITICAL</severity>
    <type>BUG</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>

  <rule>
    <key>C6297</key>
    <name>C6297: Arithmetic overflow: 32-bit value is shifted, then cast to 64-bit value. Result may not be an expected value</name>
    <description><![CDATA[<p>
This warning indicates incorrect behavior that results from integral promotion rules and types larger than those in which arithmetic is typically performed.
In this case, a 32-bit value was shifted left, and the result of that shift was cast to a 64-bit value. If the shift overflowed the 32-bit value, bits are lost.
If you do not want to lose bits, cast the value to be shifted to a 64-bit quantity before it is shifted. If you want to lose bits, performing the appropriate cast to unsigned long or a short type, or masking the result of the shift will eliminate this warning and make the intent of the code more clear.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/9t02bbsx.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/9t02bbsx.aspx</a></p>
]]>
    </description>
    <internalKey>C6297</internalKey>
    <severity>CRITICAL</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>

  <rule>
    <key>C6298</key>
    <name>C6298: using a read-only string &lt;pointer&gt; as a writable string argument: this will attempt to write into static read-only memory and cause random crashes</name>
    <description><![CDATA[<p>
This warning indicates the use of a constant string as an argument to a function that might modify the contents of that string. Because the compiler allocates constant strings in a static read-only memory, any attempts to modify it cause access violations and random crashes.
This can be avoided by storing the constant string into a local array and then using the array as the argument to the function.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/x8726e9z.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/x8726e9z.aspx</a></p>
]]>
    </description>
    <internalKey>C6298</internalKey>
    <severity>CRITICAL</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C6299</key>
    <name>C6299: explicitly comparing a bit field to a Boolean type will yield unexpected results</name>
    <description><![CDATA[<p>
This warning indicates an incorrect assumption that Booleans and bit fields are equivalent. Assigning 1 to bit fields will place 1 in its single bit; however, any comparison of this bit field to 1 includes an implicit cast of the bit field to a signed int. This cast will convert the stored 1 to a -1 and the comparison can yield unexpected results.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/wk9dtc16.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/wk9dtc16.aspx</a></p>
]]>
    </description>
    <tag>bug</tag>
    <internalKey>C6299</internalKey>
    <severity>CRITICAL</severity>
    <type>BUG</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C6302</key>
    <name>C6302: format string mismatch: character string passed as parameter &lt;number&gt; when wide character string is required in call to &lt;function&gt;</name>
    <description><![CDATA[<p>
This warning indicates that the format string specifies that a wide character string is required. However, a character string is being passed. This defect is likely to cause a crash or a corruption of some form.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/y8s6swys.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/y8s6swys.aspx</a></p>
]]>
    </description>
    <internalKey>C6302</internalKey>
    <severity>CRITICAL</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C6303</key>
    <name>C6303: format string mismatch: wide character string passed as parameter &lt;number&gt; when character string is required in call to &lt;function&gt;</name>
    <description><![CDATA[<p>
This warning indicates that the format string specifies that a character string is required. However, a wide character string is being passed. This defect is likely to cause a crash or corruption of some form.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/dw8fd2kt.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/dw8fd2kt.aspx</a></p>
]]>
    </description>
    <internalKey>C6303</internalKey>
    <severity>CRITICAL</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C6305</key>
    <name>C6305: potential mismatch between sizeof and countof quantities</name>
    <description><![CDATA[<p>
This warning indicates that a variable holding a sizeof result is being added to or subtracted from a pointer or countof expression. This will cause unexpected scaling in pointer arithmetic.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/aeh4k13s.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/aeh4k13s.aspx</a></p>
]]>
    </description>
    <internalKey>C6305</internalKey>
    <severity>CRITICAL</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C6306</key>
    <name>C6306: incorrect call to &lt;function&gt;: consider using &lt;function&gt; which accepts a va_list as an argument</name>
    <description><![CDATA[<p>
This warning indicates an incorrect function call. The printf family includes several functions that take a variable list of arguments; however, these functions cannot be called with a va_list argument. There is a corresponding vprintf family of functions that can be used for such calls. Calling the wrong print function will cause incorrect output.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/w34x51xt.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/w34x51xt.aspx</a></p>
]]>
    </description>
    <internalKey>C6306</internalKey>
    <severity>CRITICAL</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C6308</key>
    <name>C6308: 'realloc' may return null pointer: assigning a null pointer to &lt;variable&gt;, which is passed as an argument to 'realloc', will cause the original memory block to be leaked</name>
    <description><![CDATA[<p>
This warning indicates a memory leak that is the result of the incorrect use of a reallocation function. Heap reallocation functions do not free the passed buffer if reallocation is unsuccessful. To correct the defect, assign the result of the reallocation function to a temporary, and then replace the original pointer after successful reallocation.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/kkedhy7c.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/kkedhy7c.aspx</a></p>
]]>
    </description>
    <tag>bug</tag>
    <internalKey>C6308</internalKey>
    <severity>CRITICAL</severity>
    <type>BUG</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C6309</key>
    <name>C6309: argument &lt;number&gt; is null: it does not adhere to function specification of &lt;function&gt;</name>
    <description><![CDATA[<p>
This message indicates that the code is passing an unexpected NULL parameter as an argument to the specified API. Passing a null parameter to a function that expects a non-null parameter can cause unhandled exception.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/subscriptions/index/ea48xd9a(v=vs.80).aspx" target="_blank">https://msdn.microsoft.com/en-us/subscriptions/index/ea48xd9a(v=vs.80).aspx</a></p>
]]>
    </description>
    <internalKey>C6309</internalKey>
    <severity>CRITICAL</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C6310</key>
   <name>C6310: illegal constant in exception filter can cause unexpected behavior</name>
    <description><![CDATA[<p>
This message indicates that an illegal constant was detected in the filter expression of a structured exception handler. The constants defined for use in the filter expression of a structured exception handler are:
- EXCEPTION_CONTINUE_EXECUTION
- EXCEPTION_CONTINUE_SEARCH
- EXCEPTION_EXECUTE_HANDLER
These values are defined in the runtime header file excpt.h.
Using a constant that is not in the preceding list can cause unexpected behavior.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/4c4z33b8.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/4c4z33b8.aspx</a></p>
]]>
    </description>
    <internalKey>C6310</internalKey>
    <severity>CRITICAL</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C6312</key>
    <name>C6312: Possible infinite loop: use of the constant EXCEPTION_CONTINUE_EXECUTION in the exception-filter expression of a try-except</name>
    <description><![CDATA[<p>
This warning indicates the use of the constant EXCEPTION_CONTINUE_EXECUTION (or another constant that evaluates to -1) in the filter expression of a structured exception handler. Use of the constant value EXCEPTION_CONTINUE_EXECUTION could lead to an infinite loop. For example, if an exception was raised by hardware, the instruction that caused the exception will be restarted. If the address that caused the exception is still bad, another exception will occur and be handled in the same way. This causes an infinite loop.
An explicit call to RaiseException will not directly cause an infinite loop, but it will continue execution of the code in the protected block. This can be unexpected, and could lead to an infinite loop if RaiseException was used to avoid dereferencing an invalid pointer.
Typically, EXCEPTION_CONTINUE_EXECUTION should be returned only by a function called in the filter expression, which has a chance to fix either the pointer that caused the exception or the underlying memory.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/c34eyfac.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/c34eyfac.aspx</a></p>
]]>
    </description>
    <internalKey>C6312</internalKey>
    <severity>CRITICAL</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C6313</key>
    <name>C6313: Incorrect operator: Zero-valued flag cannot be tested with bitwise-and. Use an equality test to check for zero-valued flags</name>
    <description><![CDATA[<p>
This warning indicates that a constant value of zero was provided as an argument to the bitwise-and (&amp;) operator in a test context. The resulting expression is constant and evaluates to false; the result is different than intended.
This is typically caused by using bitwise-and to test for a flag that has the value zero. To test zero-valued flags, a test for equality must be performed, for example, using == or !=.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/ek7ksb7c.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/ek7ksb7c.aspx</a></p>
]]>
    </description>
    <internalKey>C6313</internalKey>
    <severity>CRITICAL</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C6314</key>
    <name>C6314: Incorrect order of operations: bitwise-or has higher precedence than the conditional-expression operator. Add parentheses to clarify intent</name>
    <description><![CDATA[<p>
This message indicates that an expression that contains a bitwise-or operator (|) was detected in the tested expression of a conditional operation (?:).
The conditional operator has lower precedence than bitwise operators. If the tested expression should contain the bitwise-or operator, then parentheses should be added around the conditional-expression.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/83x2a3tw.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/83x2a3tw.aspx</a></p>
]]>
    </description>
    <internalKey>C6314</internalKey>
    <severity>CRITICAL</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C6315</key>
    <name>C6315: Incorrect order of operations: bitwise-and has higher precedence than bitwise-or. Add parentheses to clarify intent</name>
    <description><![CDATA[<p>
This warning indicates that an expression in a test context contains both bitwise-and (&amp;) and bitwise-or (|) operations, but causes a constant because the bitwise-or operation happens last. Parentheses should be added to clarify intent.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/z9hde9ka.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/z9hde9ka.aspx</a></p>
]]>
    </description>
    <internalKey>C6315</internalKey>
    <severity>CRITICAL</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C6316</key>
    <name>C6316: Incorrect operator: tested expression is constant and non-zero. Use bitwise-and to determine whether bits are set</name>
    <description><![CDATA[<p>
This warning indicates the use of bitwise-or (|) when bitwise-and (&amp;) should have been used. Bitwise-or adds bits to the resulting expression, whereas bitwise-and selects only those bits in common between its two operators. Tests for flags must be performed with bitwise-and or a test of equality.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/f921xb29.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/f921xb29.aspx</a></p>
]]>
    </description>
    <internalKey>C6316</internalKey>
    <severity>CRITICAL</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C6317</key>
    <name>C6317: incorrect operator: logical-not (!) is not interchangeable with ones-complement (~)</name>
    <description><![CDATA[<p>
This warning indicates that a logical-not (!) is being applied to a constant that is likely to be a bit-flag. The result of logical-not is Boolean; it is incorrect to apply the bitwise-and (&amp;) operator to a Boolean value. Use the ones-complement (~) operator to flip flags.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/9k0s4y0w.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/9k0s4y0w.aspx</a></p>
]]>
    </description>
    <internalKey>C6317</internalKey>
    <severity>CRITICAL</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C6318</key>
    <name>C6318: Ill-defined __try/__except: use of the constant EXCEPTION_CONTINUE_SEARCH. The code in the exception handler block is not executed</name>
    <description><![CDATA[<p>
C6318: Ill-defined __try/__except: use of the constant EXCEPTION_CONTINUE_SEARCH or another constant that evaluates to zero in the exception-filter expression. The code in the exception handler block is not executed
This warning indicates that if an exception occurs in the protected block of this structured exception handler, the exception will not be handled because the constant EXCECPTION_CONTINUE_SEARCH is used in the exception filter expression.
This code is equivalent to the protected block without the exception handler block because the handler block is not executed.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/a57k07ae.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/a57k07ae.aspx</a></p>
]]>
    </description>
    <tag>bug</tag>
    <internalKey>C6318</internalKey>
    <severity>CRITICAL</severity>
    <type>BUG</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C6319</key>
    <name>C6319: use of the comma-operator in a tested expression causes the left argument to be ignored when it has no side-effects</name>
    <description><![CDATA[<p>
This warning indicates an ignored sub-expression in test context because of the comma-operator (,). The comma operator has left-to-right associativity. The result of the comma-operator is the last expression evaluated. If the left expression to comma-operator has no side effects, the compiler might omit code generation for the expression.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/sy2k2e59.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/sy2k2e59.aspx</a></p>
]]>
    </description>
    <internalKey>C6319</internalKey>
    <severity>CRITICAL</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C6320</key>
    <name>C6320: exception-filter expression is the constant EXCEPTION_EXECUTE_HANDLER. This may mask exceptions that were not intended to be handled</name>
    <description><![CDATA[<p>
This warning indicates the side effect of using EXCEPTION_EXECUTE_HANDLER constant in __except block. In this case, the statement in the __except block will always execute to handle the exception, including exceptions you did not want to handle in a particular function. It is recommended that you check the exception before handling it.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/ms182083.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/ms182083.aspx</a></p>
]]>
    </description>
    <internalKey>C6320</internalKey>
    <severity>CRITICAL</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C6322</key>
    <name>C6322: empty _except block</name>
    <description><![CDATA[<p>
This message indicates that there is no code in the _except block. As a result, exceptions might go unhandled.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/4w5x2fht.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/4w5x2fht.aspx</a></p>
]]>
    </description>
    <tag>bug</tag>
    <internalKey>C6322</internalKey>
    <severity>CRITICAL</severity>
    <type>BUG</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C6323</key>
    <name>C6323 - use of arithmetic operator on Boolean type(s)</name>
    <description><![CDATA[<p>
This warning occurs if arithmetic operators are used on Boolean data types. Use of incorrect operator might yield incorrect results. It also indicates that the programmer's intent is not reflected in the code.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/d13kts90.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/d13kts90.aspx</a></p>
]]>
    </description>
    <internalKey>C6323</internalKey>
    <severity>CRITICAL</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C6324</key>
    <name>C6324: potential incorrect use of &lt;function1&gt;: Did you intend to use &lt;function2&gt;?</name>
    <description><![CDATA[<p>
This warning indicates that a string copy function was used where a string comparison function should have been used. Incorrect use of function can cause an unexpected logic error.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/ccf4h9w8.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/ccf4h9w8.aspx</a></p>
]]>
    </description>
    <internalKey>C6324</internalKey>
    <severity>CRITICAL</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C6326</key>
    <name>C6326: potential comparison of a constant with another constant</name>
    <description><![CDATA[<p>
This warning indicates a potential comparison of a constant with another constant, which is redundant code. You must check to make sure that your intent is properly captured in the code. In some cases, you can simplify the test condition to achieve the same result.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/tz3zbzw6.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/tz3zbzw6.aspx</a></p>
]]>
    </description>
    <internalKey>C6326</internalKey>
    <severity>CRITICAL</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C6327</key>
    <name>C6327: Potential buffer overrun: SysAllocStringLen copies &lt;number&gt; characters from the string &lt;variable&gt; without validating the number of characters to copy. The code may crash</name>
    <description><![CDATA[<p>
This warning indicates a potential buffer overrun. SysAllocStringLen allocates a string and then copies the specified number of characters from the specified string. Because SysAllocStringLen does not validate the number of characters to copy, if the number of characters specified is larger than the number of characters in the string, the code might crash. You must pass correct number of characters to the SysAllocString function to avoid buffer overrun.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/subscriptions/administration/5c28xhds(v=vs.90)" target="_blank">https://msdn.microsoft.com/en-us/subscriptions/administration/5c28xhds(v=vs.90)</a></p>
]]>
    </description>
    <internalKey>C6327</internalKey>
    <severity>CRITICAL</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C6328</key>
    <name>C6328: Size mismatch: &lt;type&gt; passed as parameter &lt;number&gt; when &lt;type&gt; is required in call to &lt;function&gt;</name>
    <description><![CDATA[<p>
For C runtime character-based routines in the family name isxxx(), passing an argument of type char can have unpredictable results. For example, an SBCS or MBCS single-byte character of type char with a value greater than 0x7F is a negative value. If a char is passed, the compiler might convert the value to a signed int or a signed long. This value could be sign-extended by the compiler, with unexpected results. For example, isspace accepts an argument of type int; however, the valid range of values for its input argument is:
0 &lt;= c &lt;= 255, plus the special value EOF.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/ms245348.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/ms245348.aspx</a></p>
]]>
    </description>
    <internalKey>C6328</internalKey>
    <severity>CRITICAL</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>

  <rule>
    <key>C6329</key>
    <name>C6329: Return value for a call to &lt;function&gt; should not be checked against &lt;number&gt;</name>
    <description><![CDATA[<p>
The program is comparing a number against the return value from a call to CreateFile. If CreateFile succeeds, it returns an open handle to the object. If it fails, it returns INVALID_HANDLE_VALUE.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/hh598954.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/hh598954.aspx</a></p>
]]>
    </description>
    <internalKey>C6329</internalKey>
    <severity>CRITICAL</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>

  <rule>
    <key>C6330</key>
    <name>C6330: Incorrect type passed as parameter in call to function</name>
    <description><![CDATA[<p>
C6330: Incorrect type passed as parameter in call to function
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/hh568714.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/hh568714.aspx</a></p>
]]>
    </description>
    <internalKey>C6330</internalKey>
    <severity>CRITICAL</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>

  <rule>
    <key>C6331</key>
    <name>C6331: Invalid parameter: passing MEM_RELEASE and MEM_DECOMMIT in conjunction to &lt;function&gt; is not allowed. This results in the failure of this call</name>
    <description><![CDATA[<p>
This message indicates that an invalid parameter being passed to VirtualFree or VirtualFreeEx. VirtualFree and VirtualFreeEx both reject the flags (MEM_RELEASE | MEM_DECOMMIT) in combination. Therefore, the values MEM_DECOMMIT and MEM_RELEASE may not be used together in the same call.
It is not required for decommit and release to occur as independent steps. Releasing committed memory will decommit the pages as well. Also, ensure the return value of this function is not ignored.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/1cstf8ce.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/1cstf8ce.aspx</a></p>
]]>
    </description>
    <internalKey>C6331</internalKey>
    <severity>CRITICAL</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>

  <rule>
    <key>C6332</key>
    <name>C6332: Invalid parameter: passing zero as the dwFreeType parameter to &lt;function&gt; is not allowed. This results in the failure of this call</name>
    <description><![CDATA[<p>
This warning indicates that an invalid parameter is being passed to VirtualFree or VirtualFreeEx. VirtualFree and VirtualFreeEx both reject a dwFreeType parameter of zero. The dwFreeType parameter can be either MEM_DECOMMIT or MEM_RELEASE. However, the values MEM_DECOMMIT and MEM_RELEASE may not be used together in the same call. Also, make sure that the return value of the VirtualFree function is not ignored.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/byy91w4s.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/byy91w4s.aspx</a></p>
]]>
    </description>
    <internalKey>C6332</internalKey>
    <severity>CRITICAL</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>

  <rule>
    <key>C6333</key>
    <name>C6333: Invalid parameter: passing MEM_RELEASE and a non-zero dwSize parameter to &lt;function&gt; is not allowed. This results in the failure of this call</name>
    <description><![CDATA[<p>
This warning indicates an invalid parameter is being passed to VirtualFree or VirtualFreeEx. Both of these functions reject a dwFreeType of MEM_RELEASE with a non-zero value of dwSize. When passing MEM_RELEASE, the dwSize parameter must be zero. Also, make sure that the return value of this function is not ignored.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/et432wt2.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/et432wt2.aspx</a></p>
]]>
    </description>
    <internalKey>C6333</internalKey>
    <severity>CRITICAL</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>

  <rule>
    <key>C6334</key>
    <name>C6334: sizeof operator applied to an expression with an operator may yield unexpected results</name>
    <description><![CDATA[<p>
This warning indicates a misuse of the sizeof operator. The sizeof operator, when applied to an expression, yields the size of the type of the resulting expression.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/debka1c0.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/debka1c0.aspx</a></p>
]]>
     </description>
    <tag>bug</tag>
    <internalKey>C6334</internalKey>
    <severity>CRITICAL</severity>
    <type>BUG</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>

  <rule>
    <key>C6335</key>
    <name>C6335: leaking process information handle &lt;handlename&gt;</name>
    <description><![CDATA[<p>
This warning indicates that the process information handles returned by the CreateProcess family of functions need to be closed using CloseHandle. Failure to do so will cause handle leaks.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/ms182084.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/ms182084.aspx</a></p>
]]>
    </description>
    <tag>bug</tag>
    <internalKey>C6335</internalKey>
    <severity>CRITICAL</severity>
    <type>BUG</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C6336</key>
    <name>C6336: arithmetic operator has precedence over question operator, use parentheses to clarify intent</name>
    <description><![CDATA[<p>
This warning indicates a possible operator precedence problem. The '+','-','*' and '/' operators have precedence over the '?' operator. If the precedence in the expression is not correct, use parentheses to change the operator precedence.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/ms182085.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/ms182085.aspx</a></p>
]]>
    </description>
    <internalKey>C6336</internalKey>
    <severity>CRITICAL</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C6340</key>
    <name>C6340: Mismatch on sign: Incorrect type passed as parameter in call to function</name>
    <description><![CDATA[<p>
C6340: Mismatch on sign: Incorrect type passed as parameter in call to function
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/hh568721.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/hh568721.aspx</a></p>
]]>
    </description>
    <internalKey>C6340</internalKey>
    <severity>CRITICAL</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C6381</key>
    <name>C6381: Shutdown API &lt;function&gt; requires a valid dwReason or lpMessage</name>
    <description><![CDATA[<p>
This warning is issued if InitiateSystemShutdownEx is called:
- Without passing a valid shutdown reason (dwReason). If dwReason parameter is zero, the default is an undefined shutdown. By default, it is also an unplanned shutdown. You should use one of the System Shutdown Reason Codes for this parameter.
- Without passing a shutdown message (lpMessage).
We recommend that you use appropriate parameters when calling this API to help system administrators determine the cause of the shutdown.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/y79a189e.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/y79a189e.aspx</a></p>
]]>
    </description>
    <internalKey>C6381</internalKey>
    <severity>CRITICAL</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C6383</key>
    <name>C6383: buffer overrun due to conversion of an element count into a byte count: an element count is expected for parameter &lt;number&gt; in call to &lt;function&gt;</name>
    <description><![CDATA[<p>
This warning indicates that a non-constant byte count is being passed when an element count is required. Typically, this occurs when a variable is multiplied by the sizeof a type, but code analysis suggests that an element count is required.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/ms182086.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/ms182086.aspx</a></p>
]]>
    </description>
    <tag>bug</tag>
    <internalKey>C6383</internalKey>
    <severity>CRITICAL</severity>
    <type>BUG</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C6384</key>
    <name>C6384: dividing sizeof a pointer by another value</name>
    <description><![CDATA[<p>
This warning indicates that a size calculation might be incorrect. To calculate the number of elements in an array, one sometimes divides the size of the array by the size of the first element; however, when the array is actually a pointer, the result is typically different than intended.
If the pointer is a function parameter and the size of the buffer was not passed, it is not possible to calculate the maximum buffer available. When the pointer is allocated locally, the size used in the allocation should be used.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/ms182087.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/ms182087.aspx</a></p>
]]>
    </description>
    <internalKey>C6384</internalKey>
    <severity>CRITICAL</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C6385</key>
    <name>C6385: invalid data: accessing &lt;buffer name&gt;, the readable size is &lt;size1&gt; bytes, but &lt;size2&gt; bytes may be read: Lines: x, y</name>
    <description><![CDATA[<p>
This warning indicates that the readable extent of the specified buffer might be smaller than the index used to read from it. Attempts to read data outside the valid range leads to buffer overrun.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/ms182088.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/ms182088.aspx</a></p>
]]>
    </description>
    <internalKey>C6385</internalKey>
    <severity>CRITICAL</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>

  <rule>
    <key>C6386</key>
    <name>C6386: buffer overrun: accessing &lt;buffer name&gt;, the writable size is &lt;size1&gt; bytes, but &lt;size2&gt; bytes may be written: Lines: x, y</name>
    <description><![CDATA[<p>
This warning indicates that the writable extent of the specified buffer might be smaller than the index used to write to it. This can cause buffer overrun.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/ms182089.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/ms182089.aspx</a></p>
]]>
    </description>
    <internalKey>C6386</internalKey>
    <severity>CRITICAL</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C6387</key>
    <name>C6387: &lt;argument&gt; may be &lt;value&gt;: this does not adhere to the specification for the function &lt;function name&gt;: Lines: x, y</name>
    <description><![CDATA[<p>
This warning is raised if an annotated function parameter is being passed an unexpected value. For example, passing a potentially null value to a parameter that is marked with _In_ annotation generates this warning.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/k204dhw5.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/k204dhw5.aspx</a></p>
<h2>References</h2>
<p><a href="https://cwe.mitre.org/data/definitions/475.html" target="_blank">CWE-475: Undefined Behavior for Input to API</a></p>
]]>
    </description>
    <tag>cwe</tag>
    <internalKey>C6387</internalKey>
    <severity>CRITICAL</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C6388</key>
    <name>C6388: &lt;argument&gt; may not be &lt;value&gt;: this does not adhere to the specification for the function &lt;function name&gt;: Lines: x, y</name>
    <description><![CDATA[<p>
This warning indicates that an unexpected value is being used in the specified context. This is typically reported for values passed as arguments to a function that does not expect it.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/5z2f9k0y.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/5z2f9k0y.aspx</a></p>
]]>
    </description>
    <internalKey>C6388</internalKey>
    <severity>CRITICAL</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C6400</key>
    <name>C6400: Using &lt;function name&gt; to perform a case-insensitive compare to constant string &lt;string name&gt;. Yields unexpected results in non-English locales</name>
    <description><![CDATA[<p>
This warning indicates that a case-insensitive comparison to a constant string is being performed in a locale-dependent way, when, apparently, a locale-independent comparison was intended.
The typical consequence of this defect is incorrect behavior in non-English speaking locales. For example, in Turkish, ".gif" will not match ".GIF"; in Vietnamese, "LogIn" will not match "LOGIN".
String comparisons should typically be performed with the CompareString function. To perform a locale-independent comparison on Windows XP, the first parameter should be the constant LOCALE_INVARIANT.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/ba769hz2.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/ba769hz2.aspx</a></p>
]]>
    </description>
    <internalKey>C6400</internalKey>
    <severity>CRITICAL</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C6401</key>
    <name>C6401: Using &lt;function name&gt; in a default locale to perform a case-insensitive compare to constant string &lt; string name&gt;. Yields unexpected results in non-English locales</name>
    <description><![CDATA[<p>
This warning indicates that a case-insensitive comparison to a constant string is being performed when specifying the default locale; usually, a locale-independent comparison was intended.
The typical consequence of this defect is incorrect behavior in non-English speaking locales. For example, in Turkish, ".gif" will not match ".GIF"; in Vietnamese, "LogIn" will not match "LOGIN".
The CompareString function takes a locale as an argument; however, passing in a default locale, for example, the constant LOCALE_USER_DEFAULT, will cause different behaviors in different locales, depending on the user's default. Usually, case-insensitive comparisons against a constant string should be performed in a locale-independent comparison.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/8y7etsh4.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/8y7etsh4.aspx</a></p>
]]>
    </description>
    <internalKey>C6401</internalKey>
    <severity>CRITICAL</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C6411</key>
    <name>C6411: Potentially reading invalid data from the buffer</name>
    <description><![CDATA[<p>
This warning indicates that the value of the index that is used to read from the buffer can exceed the readable size of the buffer. Because the code analysis tool reports this warning when it cannot reduce a complex expression that represents the buffer size, or the index used to access the buffer, this warning might be reported in error.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/hh667552.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/hh667552.aspx</a></p>
]]>
    </description>
    <internalKey>C6411</internalKey>
    <severity>CRITICAL</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C6412</key>
    <name>C6412: Potential buffer overrun while writing to buffer. The writable size is write_size bytes, but write_index bytes may be written</name>
    <description><![CDATA[<p>
This warning indicates that the value of the index that is used to write to the buffer can exceed the writeable size of the buffer.
Because the code analysis tool reports this warning when it cannot reduce a complex expression that represents the buffer size, or the index used to access the buffer, this warning might be reported in error.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/hh690610.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/hh690610.aspx</a></p>
]]>
    </description>
    <internalKey>C6412</internalKey>
    <severity>CRITICAL</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C6500</key>
    <name>C6500: invalid annotation: value for &lt;name&gt; property is invalid</name>
    <description><![CDATA[<p>
This warning indicates that a property value used in the annotation is not valid. For example, it can occur if an incorrect level of dereference is used in the Deref property, or if you use a constant value that is larger than size_t for properties like ElementSize.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/ms182095.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/ms182095.aspx</a></p>
]]>
    </description>
    <internalKey>C6500</internalKey>
    <severity>CRITICAL</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C6501</key>
    <name>C6501: annotation conflict: &lt;name&gt; property conflicts with previously specified property</name>
    <description><![CDATA[<p>
This warning indicates the presence of conflicting properties in the annotation. This typically occurs when multiple properties that serve similar purpose are used to annotate a parameter or return value. To correct the warning, you must choose the property that best addresses your need.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/ms182096.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/ms182096.aspx</a></p>
]]>
    </description>
    <internalKey>C6501</internalKey>
    <severity>CRITICAL</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C6503</key>
    <name>C6503: Invalid annotation: references and arrays may not be marked Null=Yes or Null=Maybe</name>
    <description><![CDATA[<p>
This warning indicates that Null property is incorrectly used on a reference or array type. A reference or array type holds the address of an object and must point to a valid object. Because reference and array types cannot be null, you must correct the error by either removing the Null property or by setting the Null property value to No.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/ms182097.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/ms182097.aspx</a></p>
]]>
    </description>
    <internalKey>C6503</internalKey>
    <severity>CRITICAL</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C6504</key>
    <name>C6504: invalid annotation: property may only be used on values of pointer, pointer-to-member, or array type</name>
    <description><![CDATA[<p>
This warning indicates the use of a property on an incompatible data type. For more information about data types supported by properties, see [NIB]Annotation Properties.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/ms182098.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/ms182098.aspx</a></p>
]]>
    </description>
    <internalKey>C6504</internalKey>
    <severity>CRITICAL</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C6505</key>
    <name>C6505: invalid annotation: MustCheck property may not be used on values of void type</name>
    <description><![CDATA[<p>
This warning indicated that MustCheck property was used on a void data type. You cannot use MustCheck property on void type. Either remove the MustCheck property or use another data type.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/ms182099.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/ms182099.aspx</a></p>
]]>
    </description>
    <internalKey>C6505</internalKey>
    <severity>CRITICAL</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C6506</key>
    <name>C6506: invalid annotation: &lt;name&gt; property may only be used on values of pointer or array types</name>
    <description><![CDATA[<p>
This warning indicates that a property is used on a type other than pointer or array types. The Access, Tainted, and Valid properties can be used on all data types. Other properties, such as ValidBytesConst, ValidElementsConst, ElementSize, and NullTerminted support pointer, pointer to members, or array types. For a complete list of properties and the supported data types, see [NIB]Annotation Properties.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/ms182100.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/ms182100.aspx</a></p>
]]>
    </description>
    <internalKey>C6506</internalKey>
    <severity>CRITICAL</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C6507</key>
    <name>C6507: annotation conflict: Null property at Deref=0 on a post condition must be a subset of the Null property on the precondition</name>
    <description><![CDATA[<p>
This warning indicates that conflicting values for the Null property were used in Pre- and Post- conditions at default dereference level 0. In this case the Pre condition specifies Null=No, and the Post condition specifies Null=Yes. Because the parameter is not passed by reference it cannot be changed; therefore, the Post condition cannot use Null=Yes.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/subscriptions/index/ms182101(v=vs.100).aspx" target="_blank">https://msdn.microsoft.com/en-us/subscriptions/index/ms182101(v=vs.100).aspx</a></p>
]]>
    </description>
    <internalKey>C6507</internalKey>
    <severity>CRITICAL</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C6508</key>
    <name>C6508: invalid annotation: write access is not allowed on const values</name>
    <description><![CDATA[<p>
This warning indicates that the Access property specified on a const parameter implies that it can be written to. For constant values, Access=Read is the only valid setting.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/ms182102.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/ms182102.aspx</a></p>
]]>
    </description>
    <internalKey>C6508</internalKey>
    <severity>CRITICAL</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C6509</key>
    <name>C6509: invalid annotation: 'return' cannot be referenced from a precondition</name>
    <description><![CDATA[<p>
This warning indicates that the return keyword cannot be used in a precondition. The return keyword is used to terminate the execution of a function and return control to the calling function.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/ms182103.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/ms182103.aspx</a></p>
]]>
    </description>
    <internalKey>C6509</internalKey>
    <severity>CRITICAL</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C6510</key>
    <name>C6510: Invalid annotation: 'NullTerminated' property may only be used on buffers whose elements are of integral or pointer type: Function '&lt;function&gt;' &lt;parameter&gt;</name>
    <description><![CDATA[<p>
This warning indicates an incorrect use of the NullTerminated property (those ending in '_z'). You can only use this type of property on pointer or array types.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/ms182104.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/ms182104.aspx</a></p>
]]>
    </description>
    <internalKey>C6510</internalKey>
    <severity>CRITICAL</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C6511</key>
    <name>C6511: invalid annotation: MustCheck property must be Yes or No</name>
    <description><![CDATA[<p>
This warning indicates an invalid value for MustCheck property was specified. The only valid values for this property are: Yes and No.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/ms182105.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/ms182105.aspx</a></p>
]]>
    </description>
    <internalKey>C6511</internalKey>
    <severity>CRITICAL</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C6512</key>
    <name>C6512: invalid annotation: Null property must be Maybe if the Valid property is No</name>
    <description><![CDATA[<p>
This warning indicates that Null is considered a valid value; therefore, Null cannot be used with the Valid property value of No.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/subscriptions/downloads/ms182106(v=vs.100)" target="_blank">https://msdn.microsoft.com/en-us/subscriptions/downloads/ms182106(v=vs.100)</a></p>
]]>
    </description>
    <internalKey>C6512</internalKey>
    <severity>CRITICAL</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C6513</key>
    <name>C6513: invalid annotation: ElementSizeConst requires additional size properties</name>
    <description><![CDATA[<p>
This warning indicates that ElementSizeConst requires other properties that are missing from the annotation. Specifying ElementSizeConst alone does not provide any benefit to the analysis process. In addition to specifying ElementSize, other properties such as ValidElementsConst or WritableElementsConst must also be specified.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/ms182107.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/ms182107.aspx</a></p>
]]>
    </description>
    <internalKey>C6513</internalKey>
    <severity>CRITICAL</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C6514</key>
    <name>C6514: invalid annotation: value of the &lt;name&gt; property exceeds the size of the array</name>
    <description><![CDATA[<p>
This warning indicates that a property value exceeds the size of the array specified in the parameter being annotated. This warning occurs when the value specified for the annotation property is greater than the actual length of the array being passed.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/ms182108.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/ms182108.aspx</a></p>
]]>
    </description>
    <internalKey>C6514</internalKey>
    <severity>CRITICAL</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C6515</key>
    <name>C6515 - invalid annotation: &lt;name&gt; property may only be used on values of pointer type</name>
    <description><![CDATA[<p>
This warning indicates that a property for use on pointers was applied to a non-pointer type. For a list of annotation properties, see [NIB]Annotation Properties.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/ms182109.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/ms182109.aspx</a></p>
]]>
    </description>
    <internalKey>C6515</internalKey>
    <severity>CRITICAL</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C6516</key>
    <name>C6516: invalid annotation: no properties specified for &lt;name&gt; attribute</name>
    <description><![CDATA[<p>
This warning indicates that either no property was specified in the attribute or the property that was specified is invalid; therefore, the attribute cannot be considered complete.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/ms182110.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/ms182110.aspx</a></p>
]]>
    </description>
    <internalKey>C6516</internalKey>
    <severity>CRITICAL</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C6517</key>
    <name>C6517: Invalid annotation: 'SAL_readableTo' property may not be specified on buffers that are not readable: '_Param_(1)'</name>
    <description><![CDATA[<p>
This warning indicates that SAL_readableTo property does not have the required read access. You cannot use this property to annotate a parameter without providing read access.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/ms182112.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/ms182112.aspx</a></p>
]]>
    </description>
    <internalKey>C6517</internalKey>
    <severity>CRITICAL</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C6518</key>
    <name>C6518: Invalid annotation: 'SAL_writableTo' property may not be specified as a precondition on buffers that are not writable: '_Param_(1)'</name>
    <description><![CDATA[<p>
This warning indicates that a conflict exists between a SAL_writableTo property value and a writable property. This ordinarily indicates that a writable property does not have write access to the parameter being annotated.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/ms182113.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/ms182113.aspx</a></p>
]]>
    </description>
    <internalKey>C6518</internalKey>
    <severity>CRITICAL</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C6521</key>
    <name>C6521: invalid size specification: * operator can only be applied to pointer types</name>
    <description><![CDATA[<p>
This warning indicates an incorrect use of the * operator in an annotation property that accepts the size of a parameter in terms of another parameter. This warning is generated if the size parameter is a non-pointer type and a * operator is used to dereference it. However, you can use the * operator if the size parameter is passed as pointer type.
]]>
    </description>
    <internalKey>C6521</internalKey>
    <severity>CRITICAL</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule><rule>
    <key>C6522</key>
    <name>C6522: invalid size specification: expression must be of integral type</name>
    <description><![CDATA[<p>
This warning indicates that an integral type was expected, but an incorrect data type was used. You can use annotation properties that accept the size of a parameter in terms of another parameter, but you must use correct data type. For a list of annotation properties, see [NIB]Annotation Properties.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/ms182116.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/ms182116.aspx</a></p>
]]>
    </description>
    <internalKey>C6522</internalKey>
    <severity>CRITICAL</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C6523</key>
    <name>C6523: invalid size specification: parameter &lt;name&gt; not found</name>
    <description><![CDATA[<p>
This warning indicates that a parameter used to set a property value is not in the function parameter list. You can use annotation properties that accept the name of a parameter as their value, but you must make sure that the parameter exists and is of the correct data type.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/subscriptions/index/ms182117(v=vs.80)" target="_blank">https://msdn.microsoft.com/en-us/subscriptions/index/ms182117(v=vs.80)</a></p>
]]>
    </description>
    <internalKey>C6523</internalKey>
    <severity>CRITICAL</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C6525</key>
    <name>C6525: invalid size specification: property value may not be valid</name>
    <description><![CDATA[<p>
This warning indicates that the property value used to specify the size is not valid. This occurs if the size parameter is annotated using Valid=No.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/ms182119.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/ms182119.aspx</a></p>
]]>
    </description>
    <internalKey>C6525</internalKey>
    <severity>CRITICAL</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C6526</key>
    <name>C6526 - invalid size specification: expression must be of array or pointer type</name>
    <description><![CDATA[<p>
This warning indicates that an incorrect data type is used to specify a property value. A property might support all data types or a subset of them. In this case, the value specified for the property must be an array or a pointer type. For a list of annotation properties, see Annotation Properties.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/subscriptions/ms182120(v=vs.80).aspx" target="_blank">https://msdn.microsoft.com/en-us/subscriptions/ms182120(v=vs.80).aspx</a></p>
]]>
    </description>
    <internalKey>C6526</internalKey>
    <severity>CRITICAL</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C6527</key>
    <name>C6527: Invalid annotation: NeedsRelease property may not be used on values of void type</name>
    <description><![CDATA[<p>
C6527: Invalid annotation: NeedsRelease property may not be used on values of void type
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/hh443007.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/hh443007.aspx</a></p>
]]>
    </description>
    <internalKey>C6527</internalKey>
    <severity>CRITICAL</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C6530</key>
    <name>C6530: unrecognized format string style &lt;name&gt;</name>
    <description><![CDATA[<p>
This warning indicates that the FormatString property is using a value other than scanf or printf. To correct this warning, review your code and use a valid value for the Style property.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/ms182122.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/ms182122.aspx</a></p>
]]>
    </description>
    <internalKey>C6530</internalKey>
    <severity>CRITICAL</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C6535</key>
    <name>C6535: buffer cannot be of size &lt;n&gt;, bigger than max(size_t)</name>
    <description><![CDATA[<p>
This warning indicates that the size of the buffer cannot be more than size_t. The type size_t is defined as an unsigned integer and its actual size is system dependent.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/subscriptions/downloads/ms182123(v=vs.100)" target="_blank">https://msdn.microsoft.com/en-us/subscriptions/downloads/ms182123(v=vs.100)</a></p>
]]>
    </description>
    <tag>bug</tag>
    <internalKey>C6535</internalKey>
    <severity>CRITICAL</severity>
    <type>BUG</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C6540</key>
    <name>C6540: The use of attribute annotations on this function will invalidate all of its existing __declspec annotations</name>
    <description><![CDATA[<p>
C6540: The use of attribute annotations on this function will invalidate all of its existing __declspec annotations
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/hh443020.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/hh443020.aspx</a></p>
]]>
    </description>
    <internalKey>C6540</internalKey>
    <severity>CRITICAL</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C6551</key>
    <name>C6551: Invalid size specification: expression not parsable</name>
    <description><![CDATA[<p>
C6551: Invalid size specification: expression not parsable
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/hh443026.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/hh443026.aspx</a></p>
]]>
    </description>
    <internalKey>C6551</internalKey>
    <severity>CRITICAL</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C6552</key>
    <name>C6552: Invalid Deref= or Notref=: expression not parsable</name>
    <description><![CDATA[<p>
C6552: Invalid Deref= or Notref=: expression not parsable
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/hh443009.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/hh443009.aspx</a></p>
]]>
    </description>
    <internalKey>C6552</internalKey>
    <severity>CRITICAL</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C6701</key>
    <name>C6701: The value is not a valid Yes/No/Maybe value: &lt;string&gt;</name>
    <description><![CDATA[<p>
This warning is reported when there is an error in the annotations.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/hh443023.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/hh443023.aspx</a></p>
]]>
    </description>
    <internalKey>C6701</internalKey>
    <severity>CRITICAL</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C6702</key>
    <name>C6702: The value is not a string value: &lt;string&gt;</name>
    <description><![CDATA[<p>
This warning is reported when there is an error in the annotations.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/hh443010.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/hh443010.aspx</a></p>
]]>
    </description>
    <internalKey>C6702</internalKey>
    <severity>CRITICAL</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C6703</key>
    <name>C6703: The value is not a number: &lt;string&gt;</name>
    <description><![CDATA[<p>
This warning is reported when there is an error in the annotations.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/hh443012.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/hh443012.aspx</a></p>
]]>
    </description>
    <internalKey>C6703</internalKey>
    <severity>CRITICAL</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C6704</key>
    <name>C6704: Unexpected Annotation Expression Error: &lt;annotation&gt; [&lt;why&gt;]</name>
    <description><![CDATA[<p>
This warning is reported when there is an error in the annotations.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/hh443030.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/hh443030.aspx</a></p>
]]>
    </description>
    <internalKey>C6704</internalKey>
    <severity>CRITICAL</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C6705</key>
    <name>C6705: Annotation error expected &lt;expected_number&gt; arguments for annotation &lt;parameter&gt; found &lt;actual_number&gt;</name>
    <description><![CDATA[<p>
      This warning is reported when there is an error in the annotations.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/hh443006.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/hh443006.aspx</a></p>
]]>
    </description>
    <internalKey>C6705</internalKey>
    <severity>CRITICAL</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C6706</key>
    <name>C6706: Unexpected Annotation Error for annotation &lt;annotation&gt;: &lt;why&gt;</name>
    <description><![CDATA[<p>
      This warning is reported when there is an error in the annotations.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/hh442992.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/hh442992.aspx</a></p>
]]>
    </description>
    <internalKey>C6706</internalKey>
    <severity>CRITICAL</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C6707</key>
    <name>C6707: Unexpected Model Error: &lt;why&gt;</name>
    <description><![CDATA[<p>
C6707: Unexpected Model Error: &lt;why&gt;
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/hh443019.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/hh443019.aspx</a></p>
]]>
    </description>
    <internalKey>C6707</internalKey>
    <severity>CRITICAL</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C6993</key>
    <name>C6993: Code analysis ignores OpenMP constructs; analyzing single-threaded code</name>
    <description><![CDATA[<p>
This warning indicates that the Code Analyzer has encountered Open MP pragmas that it cannot analyze.</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/dn582057.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/dn582057.aspx</a></p>
]]>
    </description>
    <internalKey>C6993</internalKey>
    <severity>CRITICAL</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C6995</key>
    <name>C6995: Failed to save XML Log file</name>
    <description><![CDATA[<p>
This warning indicates that the Code Analysis tool cannot create the defect log, which is the output of the code analysis.
This error might indicate a disk error or indicate that you do not have permission to create a file in the specified directory.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/hh690608.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/hh690608.aspx</a></p>
]]>
    </description>
    <internalKey>C6995</internalKey>
    <severity>CRITICAL</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C6997</key>
    <name>C6997: Annotations at this location are meaningless and will be ignored</name>
    <description><![CDATA[<p>
Annotations cannot be applied to extern "C" {...}. Apply the annotations to a specific object.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/dn582056.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/dn582056.aspx</a></p>
]]>
    </description>
    <internalKey>C6997</internalKey>
    <severity>CRITICAL</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C26100</key>
    <name>C26100: Race condition. Variable &lt;var&gt; should be protected by lock &lt;lock&gt;</name>
    <description><![CDATA[<p>
The _Guarded_by_ annotation in the code specifies the lock to use to guard a shared variable. C26100 is generated when the guard contract is violated.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/hh161624.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/hh161624.aspx</a></p>
]]>
    </description>
    <internalKey>C26100</internalKey>
    <severity>CRITICAL</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C26101</key>
    <name>C26101: Failing to use interlocked operation properly for variable &lt;var&gt;</name>
    <description><![CDATA[<p>
Windows APIs offer a variety of interlocked operations. Annotation _Interlocked_ specifies that a variable should only be accessed through an interlocked operation. C26101 is issued when an access is not consistent with the _Interlocked_ annotation.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/hh324218.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/hh324218.aspx</a></p>
]]>
    </description>
    <internalKey>C26101</internalKey>
    <severity>CRITICAL</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C26105</key>
    <name>C26105: Lock order violation. Acquiring lock &lt;lock&gt; with level &lt;level&gt; causes order inversion</name>
    <description><![CDATA[<p>
Concurrency SAL supports lock levels. To declare a lock level, which is denoted by a string literal without double quotes, use _Create_lock_level_. You can impose an order of acquisition between two lock levels by using the annotation _Set_lock_level_order_(A,B), which states that locks that have level A must be acquired before locks that have level B. To establish a lock order hierarchy (a partial order among lock levels), use multiple _Set_lock_level_order_ annotations. To associate a lock with a lock level, use the _Set_lock_level_ annotation when you declare the lock. C26105 is issued when a lock ordering violation is detected.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/hh324214.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/hh324214.aspx</a></p>
]]>
    </description>
    <internalKey>C26105</internalKey>
    <severity>CRITICAL</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C26110</key>
    <name>C26110: Caller failing to hold lock &lt;lock&gt; before calling function &lt;func&gt;</name>
    <description><![CDATA[<p>
      When a lock is required, make sure to clarify whether the function itself or its caller should acquire the lock. C26110 is issued when there is a violation of the _Requires_lock_held_ annotation.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/hh324225.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/hh324225.aspx</a></p>
]]>
    </description>
    <internalKey>C26110</internalKey>
    <severity>CRITICAL</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C26111</key>
    <name>C26111: Caller failing to release lock &lt;lock&gt; before calling function &lt;func&gt;</name>
    <description><![CDATA[<p>
The annotation _Requires_lock_not_held_ imposes a precondition that the lock count for the specified lock cannot be greater than zero when the function is called. C26111 is issued when a function fails to release the lock before it calls another function.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/hh324217.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/hh324217.aspx</a></p>
]]>
    </description>
    <internalKey>C26111</internalKey>
    <severity>CRITICAL</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C26112</key>
    <name>C26112: Caller cannot hold any lock before calling &lt;func&gt;</name>
    <description><![CDATA[<p>
The annotation _Requires_no_locks_held_ imposes a precondition that the caller must not hold any lock while it calls the function. C26112 is issued when a function fails to release all locks before it calls another function. 
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/hh324219.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/hh324219.aspx</a></p>
]]>
    </description>
    <internalKey>C26112</internalKey>
    <severity>CRITICAL</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C26115</key>
    <name>C26115: Failing to release lock &lt;lock&gt; in function &lt;func&gt;</name>
    <description><![CDATA[<p>
Enforcement of syntactically scoped lock acquire and lock release pairs in C/C++ programs is not performed by the language. A function may introduce a locking side effect by making an observable modification to the concurrency state. For example, a lock wrapper function increments the number of lock acquisitions, or lock count, for a given lock.
You can annotate a function that has a side effect from a lock acquire or lock release by using _Acquires_lock_ or _Releases_lock_, respectively. Without such annotations, a function is expected not to change any lock count after it returns. If acquires and releases are not balanced, they are considered to be orphaned. C26115 is issued when a function introduces an orphaned lock.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/hh324208.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/hh324208.aspx</a></p>
]]>
    </description>
    <internalKey>C26115</internalKey>
    <severity>CRITICAL</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C26116</key>
    <name>C26116: Failing to acquire or to hold lock &lt;lock&gt; in &lt;func&gt;</name>
    <description><![CDATA[<p>
Enforcement of syntactically scoped lock acquire and lock release pairs in C/C++ programs is not performed by the language. A function may introduce a locking side effect by making an observable modification to the concurrency state. For example, a lock wrapper function increments the number of lock acquisitions, or lock count, for a given lock.You can annotate a function that has a side effect from a lock acquire or lock release by using _Acquires_lock_ or _Requires_lock_held, respectively. Without such annotations, a function is expected not to change any lock count after it returns. If acquires and releases are not balanced, they are considered to be orphaned. C26116 is issued when a function has been annotated with _Acquires_lock_, but it does not acquire a lock, or when a function is annotated with _Requires_lock_held and releases the lock.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/hh324212.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/hh324212.aspx</a></p>
]]>
    </description>
    <internalKey>C26116</internalKey>
    <severity>CRITICAL</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C26117</key>
    <name>C26117: Releasing unheld lock &lt;lock&gt; in function &lt;func&gt;</name>
    <description><![CDATA[<p>
Enforcement of syntactically scoped lock acquire and lock release pairs in C/C++ programs is not performed by the language. A function may introduce a locking side effect by making an observable modification to the concurrency state. For example, a lock wrapper function increments the number of lock acquisitions, or lock count, for a given lock.You can annotate a function that has a side effect from a lock acquire or lock release by using _Acquires_lock_ or _Releases_lock_, respectively. Without such annotations, a function is expected not to change any lock count after it returns. If acquires and releases are not balanced, they are considered to be orphaned. C26117 is issued when a function that has not been annotated with _Releases_lock_ releases a lock that it doesn't hold, because the function must own the lock before it releases it.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/hh324224.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/hh324224.aspx</a></p>
]]>
    </description>
    <internalKey>C26117</internalKey>
    <severity>CRITICAL</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C26130</key>
    <name>C26130: Missing annotation _Requires_lock_held_(&lt;lock&gt;) or _No_competing_thread_ at function &lt;func&gt;. Otherwise it could be a race condition</name>
    <description><![CDATA[<p>
C26130: Missing annotation _Requires_lock_held_(&lt;lock&gt;) or _No_competing_thread_ at function &lt;func&gt;. Otherwise it could be a race condition. Variable &lt;var&gt; should be protected by lock &lt;lock&gt;.
C26130 is issued when the analyzer detects a potential race condition but infers that the function is likely to be run in a single threaded mode, for example, when the function is in the initialization stage based on certain heuristics. 
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/hh324213.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/hh324213.aspx</a></p>
]]>
    </description>
    <internalKey>C26130</internalKey>
    <severity>CRITICAL</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C26135</key>
    <name>C26135: Missing annotation &lt;annotation&gt; at function &lt;func&gt;</name>
    <description><![CDATA[<p>
C26135 is issued when the analyzer infers that a function is a lock wrapper function that has a lock acquire or lock release side effect. If the code is not intended to be a wrapper function, then either the lock is leaking (if the lock is being acquired) or it is being released incorrectly (if the lock is being released).
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/hh324227.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/hh324227.aspx</a></p>
]]>
    </description>
    <internalKey>C26135</internalKey>
    <severity>CRITICAL</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C26140</key>
    <name>C26140: Undefined lock kind &lt;lock&gt; in annotation &lt;annotation&gt; on lock &lt;lock&gt;</name>
    <description><![CDATA[<p>
C26140: Undefined lock kind &lt;lock&gt; in annotation &lt;annotation&gt; on lock &lt;lock&gt;.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/hh324221.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/hh324221.aspx</a></p>
]]>
    </description>
    <internalKey>C26140</internalKey>
    <severity>CRITICAL</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C26160</key>
    <name>C26160: Caller possibly failing to hold lock &lt;lock&gt; before calling function &lt;func&gt;</name>
    <description><![CDATA[<p>
C26160 resembles C26110 except that the confidence level is lower. For example, the function may contain annotation errors.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/hh395011.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/hh395011.aspx</a></p>
]]>
    </description>
    <internalKey>C26160</internalKey>
    <severity>CRITICAL</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C26165</key>
    <name>C26165: Possibly failing to release lock &lt;lock&gt; in function &lt;func&gt;</name>
    <description><![CDATA[<p>
C26165 resembles C26115 except that the confidence level is lower. For example, the function may contain annotation errors.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/hh395007.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/hh395007.aspx</a></p>
]]>
    </description>
    <internalKey>C26165</internalKey>
    <severity>CRITICAL</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C26166</key>
    <name>C26166: Possibly failing to acquire or to hold lock &lt;lock&gt; in function &lt;func&gt;</name>
    <description><![CDATA[<p>
C26166 resembles C26116 except that the confidence level is lower. For example, the function may contain annotation errors.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/hh395008.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/hh395008.aspx</a></p>
]]>
    </description>
    <internalKey>C26166</internalKey>
    <severity>CRITICAL</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C26167</key>
    <name>C26167: Possibly releasing unheld lock &lt;lock&gt; in function &lt;func&gt;</name>
    <description><![CDATA[<p>
C26167 resembles C26117 except that the confidence level is lower. For example, the function may contain annotation errors.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/hh395006.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/hh395006.aspx</a></p>
]]>
    </description>
    <internalKey>C26167</internalKey>
    <severity>CRITICAL</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C26400</key>
    <name>C26400: NO_RAW_POINTER_ASSIGNMENT</name>
    <description><![CDATA[<p>
No raw pointer assignment.

see also:</p>
<p><a href="https://docs.microsoft.com/en-us/visualstudio/code-quality/c26400" target="_blank">C26400 NO_RAW_POINTER_ASSIGNMENT</a></p>
<p><a href="https://github.com/isocpp/CppCoreGuidelines/blob/master/CppCoreGuidelines.md#Ri-raw" target="_blank">Core Guideline - I.11: Never transfer ownership by a raw pointer (T*) or reference (T&)</a></p>
]]>
    </description>
    <internalKey>C26400</internalKey>
    <tag>core-guideline</tag>
    <severity>CRITICAL</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>10min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C26401</key>
    <name>C26401: DONT_DELETE_NON_OWNER</name>
    <description><![CDATA[<p>
Don't delete none-owner.

see also:</p>
<p><a href="https://docs.microsoft.com/en-us/visualstudio/code-quality/c26401" target="_blank">C26401 DONT_DELETE_NON_OWNER</a></p>
<p><a href="https://github.com/isocpp/CppCoreGuidelines/blob/master/CppCoreGuidelines.md#r-resource-management" target="_blank">Core Guideline - Pro.safety: Resource management</a></p>
]]>
    </description>
    <internalKey>C26401</internalKey>
    <tag>core-guideline</tag>
    <severity>BLOCKER</severity>
    <type>BUG</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>10min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C26402</key>
    <name>C26402: DONT_HEAP_ALLOCATE_MOVABLE_RESULT</name>
    <description><![CDATA[<p>

see also:</p>
<p><a href="https://docs.microsoft.com/en-us/visualstudio/code-quality/c26402" target="_blank">C26402 DONT_HEAP_ALLOCATE_MOVABLE_RESULT</a></p>
<p><a href="https://github.com/isocpp/CppCoreGuidelines/blob/master/CppCoreGuidelines.md#r-resource-management" target="_blank">Core Guideline - Pro.safety: Resource management</a></p>
<p><a href="https://github.com/isocpp/CppCoreGuidelines/blob/master/CppCoreGuidelines.md#Rr-ptr" target="_blank">Core Guideline - R.3: A raw pointer (a T*) is non-owning</a></p>
]]>
    </description>
    <internalKey>C26402</internalKey>
    <tag>core-guideline</tag>
    <severity>BLOCKER</severity>
    <type>BUG</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>10min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C26403</key>
    <name>C26403: RESET_OR_DELETE_OWNER</name>
    <description><![CDATA[<p>

see also:</p>
<p><a href="https://docs.microsoft.com/en-us/visualstudio/code-quality/c26403" target="_blank">C26403 RESET_OR_DELETE_OWNER</a></p>
<p><a href="https://github.com/isocpp/CppCoreGuidelines/blob/master/CppCoreGuidelines.md#r-resource-management" target="_blank">Core Guideline - Pro.safety: Resource management</a></p>
<p><a href="https://github.com/isocpp/CppCoreGuidelines/blob/master/CppCoreGuidelines.md#Rr-ptr" target="_blank">Core Guideline - R.3: A raw pointer (a T*) is non-owning</a></p>
]]>
    </description>
    <internalKey>C26403</internalKey>
    <tag>core-guideline</tag>
    <severity>BLOCKER</severity>
    <type>BUG</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>10min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C26404</key>
    <name>C26404: DONT_DELETE_INVALID</name>
    <description><![CDATA[<p>
Do not delete an owner&lt;T&gt; which may be in invalid state.

see also:</p>
<p><a href="https://docs.microsoft.com/en-us/visualstudio/code-quality/c26404" target="_blank">C26404 DONT_DELETE_INVALID</a></p>
<p><a href="https://github.com/isocpp/CppCoreGuidelines/blob/master/CppCoreGuidelines.md#r-resource-management" target="_blank">Core Guideline - Pro.safety: Resource management</a></p>
]]>
    </description>
    <internalKey>C26404</internalKey>
    <tag>core-guideline</tag>
    <severity>BLOCKER</severity>
    <type>BUG</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>10min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C26405</key>
    <name>C26405: DONT_ASSIGN_TO_VALID</name>
    <description><![CDATA[<p>

see also:</p>
<p><a href="https://docs.microsoft.com/en-us/visualstudio/code-quality/c26405" target="_blank">C26404 DONT_ASSIGN_TO_VALID</a></p>
<p><a href="https://github.com/isocpp/CppCoreGuidelines/blob/master/CppCoreGuidelines.md#r-resource-management" target="_blank">Core Guideline - Pro.safety: Resource management</a></p>
]]>
    </description>
    <internalKey>C26405</internalKey>
    <tag>core-guideline</tag>
    <severity>BLOCKER</severity>
    <type>BUG</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>10min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C26406</key>
    <name>C26406: DONT_ASSIGN_RAW_TO_OWNER</name>
    <description><![CDATA[<p>
Do not assign a raw pointer to an owner&lt;T&gt;.

see also:</p>
<p><a href="https://docs.microsoft.com/en-us/visualstudio/code-quality/c26406" target="_blank">C26406 DONT_ASSIGN_RAW_TO_OWNER</a></p>
<p><a href="https://github.com/isocpp/CppCoreGuidelines/blob/master/CppCoreGuidelines.md#r-resource-management" target="_blank">Core Guideline - Pro.safety: Resource management</a></p>
<p><a href="https://github.com/isocpp/CppCoreGuidelines/blob/master/CppCoreGuidelines.md#Rr-ptr" target="_blank">Core Guideline - R.3: A raw pointer (a T*) is non-owning</a></p>
]]>
    </description>
    <internalKey>C26406</internalKey>
    <tag>core-guideline</tag>
    <severity>BLOCKER</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>10min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C26407</key>
    <name>C26407: DONT_HEAP_ALLOCATE_UNNECESSARILY</name>
    <description><![CDATA[<p>
Don't heap allocate unnecessarily.

see also:</p>
<p><a href="https://docs.microsoft.com/en-us/visualstudio/code-quality/c26407" target="_blank">C26407 DONT_HEAP_ALLOCATE_UNNECESSARILY</a></p>
<p><a href="https://github.com/isocpp/CppCoreGuidelines/blob/master/CppCoreGuidelines.md#Rr-scoped" target="_blank">Core Guideline - R.5: Prefer scoped objects, don't heap-allocate unnecessarily</a></p>
]]>
    </description>
    <internalKey>C26407</internalKey>
    <tag>core-guideline</tag>
    <severity>BLOCKER</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>10min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C26408</key>
    <name>C26408: NO_MALLOC_FREE</name>
    <description><![CDATA[<p>
Avoid malloc() and free(), prefer the nothrow version of new with delete.

see also:</p>
<p><a href="https://docs.microsoft.com/en-us/visualstudio/code-quality/c26408" target="_blank">C26408 NO_MALLOC_FREE</a></p>
<p><a href="https://github.com/isocpp/CppCoreGuidelines/blob/master/CppCoreGuidelines.md#Rr-mallocfree" target="_blank">Core Guideline - R.10: Avoid malloc() and free()</a></p>
]]>
    </description>
    <internalKey>C26408</internalKey>
    <tag>core-guideline</tag>
    <severity>CRITICAL</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>10min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C26409</key>
    <name>C26409: NO_NEW_DELETE</name>
    <description><![CDATA[<p>
Avoid calling new and delete explicitly, use std::make_unique&lt;T&gt; instead.

see also:</p>
<p><a href="https://docs.microsoft.com/en-us/visualstudio/code-quality/c26409" target="_blank">C26409 NO_NEW_DELETE</a></p>
<p><a href="https://github.com/isocpp/CppCoreGuidelines/blob/master/CppCoreGuidelines.md#Rr-newdelete" target="_blank">Core Guideline - R.11: Avoid calling new and delete explicitly</a></p>
]]>
    </description>
    <internalKey>C26409</internalKey>
    <tag>core-guideline</tag>
    <severity>BLOCKER</severity>
    <type>BUG</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>10min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C26410</key>
    <name>C26410: NO_REF_TO_CONST_UNIQUE_PTR</name>
    <description><![CDATA[<p>
The parameter '%parameter%' is a reference to const unique pointer, use const T* or const T& instead.

see also:</p>
<p><a href="https://docs.microsoft.com/en-us/visualstudio/code-quality/c26410" target="_blank">C26410 NO_REF_TO_CONST_UNIQUE_PTR</a></p>
<p><a href="hhttps://github.com/isocpp/CppCoreGuidelines/blob/master/CppCoreGuidelines.md#Rr-uniqueptrparam" target="_blank">Core Guideline - R.32: Take a unique_ptr&lt;widget&gt; parameter to express that a function assumes ownership of a widget</a></p>
]]>
    </description>
    <internalKey>C26410</internalKey>
    <tag>core-guideline</tag>
    <severity>CRITICAL</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>10min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C26411</key>
    <name>C26411 NO_REF_TO_UNIQUE_PTR</name>
    <description><![CDATA[<p>
No reference to unique pointer.

see also:</p>
<p><a href="https://docs.microsoft.com/en-us/visualstudio/code-quality/c26411" target="_blank">C26411 NO_REF_TO_UNIQUE_PTR</a></p>
<p><a href="https://github.com/isocpp/CppCoreGuidelines/blob/master/CppCoreGuidelines.md#Rr-reseat" target="_blank">Core Guideline - R.33: Take a unique_ptr&lt;widget&gt;& parameter to express that a function reseats thewidget</a></p>
]]>
    </description>
    <internalKey>C26411</internalKey>
    <tag>core-guideline</tag>
    <severity>BLOCKER</severity>
    <type>BUG</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>10min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C26412</key>
    <name>C26412: Do not dereference an invalid pointer (lifetimes rule 1)</name>
    <description><![CDATA[<p>
not available now - work in progress (experimental)
see also:</p>
<p><a href="https://github.com/isocpp/CppCoreGuidelines/blob/master/CppCoreGuidelines.md#prolifetime-lifetime-safety-profile" target="_blank">Core Guideline - Pro.lifetime: Lifetime safety profile</a></p>
]]>
    </description>
    <internalKey>C26412</internalKey>
    <tag>core-guideline</tag>
    <severity>MAJOR</severity>
	<status>DEPRECATED</status>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C26414</key>
    <name>C26414 RESET_LOCAL_SMART_PTR</name>
    <description><![CDATA[<p>
Smart pointers are convenient for dynamic resource management, but they are not always necessary. For example, creating of a local dynamic buffer can be easily (end sometimes more efficiently) managed by standard containers. For single objects it may be unnecessary to do dynamic allocation at all (e.g. if such objects never outlive their creator function) and they can be replaced with local variables. Smart pointers become handy when scenario requires changing of ownership, i.e. reassigning of a dynamic resource multiple times or in multiple paths. This also includes cases where resources are obtained from external code and smart pointers are used to extend resource‚Äôs lifetime.
</p><h2>Microsoft Documentation</h2>
<p><a href="https://docs.microsoft.com/en-us/visualstudio/code-quality/c26414" target="_blank">C26414 RESET_LOCAL_SMART_PTR</a></p>
<p><a href="https://github.com/isocpp/CppCoreGuidelines/blob/master/CppCoreGuidelines.md#Rr-scoped" target="_blank">Core Guideline - R.5: Prefer scoped objects, don't heap-allocate unnecessarily</a></p>
]]>
    </description>
    <internalKey>C26414</internalKey>
  <tag>core-guideline</tag>
    <severity>INFO</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C26415</key>
    <name>C26415 SMART_PTR_NOT_NEEDED</name>
    <description><![CDATA[<p>
Using a smart pointer type to pass data to a function indicates that the target function needs to manage the lifetime of the contained object. However, if the function only uses the smart pointer to access the contained object and never actually calls any code which may lead to its deallocation (never affect its lifetime), there is usually no need to complicate the interface with smart pointers. A plain pointer or reference to the contained object should be preferred.
</p><h2>Microsoft Documentation</h2>
<p><a href="https://docs.microsoft.com/en-us/visualstudio/code-quality/c26415" target="_blank">C26415 SMART_PTR_NOT_NEEDED</a></p>
<p><a href="https://github.com/isocpp/CppCoreGuidelines/blob/master/CppCoreGuidelines.md#Rr-smartptrparam" target="_blank">Core Guideline - R.30: Take smart pointers as parameters only to explicitly express lifetime semantics</a></p>
]]>
    </description>
    <internalKey>C26415</internalKey>
  <tag>core-guideline</tag>
    <severity>INFO</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C26416</key>
    <name>C26416: NO_RVALUE_REF_SHARED_PTR</name>
    <description><![CDATA[<p>
Passing a shared pointer by rvalue reference is usually unnecessary. Unless it is an implementation of move semantics for a shared pointer type itself, shared pointer objects can be safely passed by value. Using rvalue reference may be also an indication that unique pointer is more appropriate since it clearly transfers unique ownership from caller to callee.
</p><h2>Microsoft Documentation</h2>
<p><a href="https://docs.microsoft.com/en-us/visualstudio/code-quality/c26416" target="_blank">C26416 NO_RVALUE_REF_SHARED_PTR</a></p>
<p><a href="https://github.com/isocpp/CppCoreGuidelines/blob/master/CppCoreGuidelines.md#Rr-sharedptrparam-owner" target="_blank">Core Guideline - R.34: Take a shared_ptr&lt;widget&gt; parameter to express that a function is part owner</a></p>
]]>
    </description>
    <internalKey>C26416</internalKey>
  <tag>core-guideline</tag>
    <severity>INFO</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C26417</key>
    <name>C26417: NO_LVALUE_REF_SHARED_PTR</name>
    <description><![CDATA[<p>
Passing shared pointers by reference may be useful in scenarios where callee code updates target of the smart pointer object and its caller expects to see such update. Using a reference solely to reduce costs of passing a shared pointer is questionable. If callee code only accesses target object and never manages its lifetime, it is safer to pass raw pointer or reference, rather than to expose resource management details.
</p><h2>Microsoft Documentation</h2>
<p><a href="https://docs.microsoft.com/en-us/visualstudio/code-quality/c26417" target="_blank">C26417 NO_LVALUE_REF_SHARED_PTR</a></p>
<p><a href="https://github.com/isocpp/CppCoreGuidelines/blob/master/CppCoreGuidelines.md#Rr-sharedptrparam" target="_blank">Core Guideline - R.35: Take a shared_ptr&lt;widget&gt;& parameter to express that a function might reseat the shared pointer</a></p>
]]>
    </description>
    <internalKey>C26417</internalKey>
  <tag>core-guideline</tag>
    <severity>INFO</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C26418</key>
    <name>C26418: NO_VALUE_OR_CONST_REF_SHARED_PTR</name>
    <description><![CDATA[<p>
If shared pointer parameter is passed by value or reference to a constant object it is expected that function will take control of its target object‚Äôs lifetime without affecting of the caller. The code should either copy or move the shared pointer parameter to another shared pointer object or pass it further to other code by invoking functions which accept shared pointers. If this is not the case, then plain pointer or reference may be feasible.
</p><h2>Microsoft Documentation</h2>
<p><a href="https://docs.microsoft.com/en-us/visualstudio/code-quality/c26418" target="_blank">C26418 NO_VALUE_OR_CONST_REF_SHARED_PTR</a></p>
<p><a href="https://github.com/isocpp/CppCoreGuidelines/blob/master/CppCoreGuidelines.md#Rr-sharedptrparam-const" target="_blank">Core Guideline - R.36: Take a const shared_ptr&lt;widget&gt;& parameter to express that it might retain a reference count to the object ???</a></p>
]]>
    </description>
    <internalKey>C26418</internalKey>
  <tag>core-guideline</tag>
    <severity>INFO</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C26423</key>
    <name>C26423: The allocation was not directly assigned to an owner</name>
    <description><![CDATA[<p>
not available now - work in progress (experimental)
see also:</p>
<p><a href="https://github.com/isocpp/CppCoreGuidelines/blob/master/CppCoreGuidelines.md#gslowner-ownership-pointers" target="_blank">Core Guideline - GSL.owner: Ownership pointers</a></p>
<p><a href="https://github.com/isocpp/CppCoreGuidelines/blob/master/CppCoreGuidelines.md#Rr-raii" target="_blank">Core Guideline - R.1: Resource Acquisition Is Initialization</a></p>
]]>
    </description>
    <internalKey>C26423</internalKey>
    <tag>core-guideline</tag>
    <severity>MAJOR</severity>
	<status>DEPRECATED</status>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C26424</key>
    <name>C26424: Failing to delete or assign ownership of allocation at line XXXX</name>
    <description><![CDATA[<p>
not available now - work in progress (experimental)
see also:</p>
<p><a href="https://github.com/isocpp/CppCoreGuidelines/blob/master/CppCoreGuidelines.md#prosafety-type-safety-profile" target="_blank">Core Guideline - Pro.safety: Type-safety profile</a></p>
]]>
    </description>
    <internalKey>C26424</internalKey>
    <tag>core-guideline</tag>
    <severity>MAJOR</severity>
	<status>DEPRECATED</status>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C26426</key>
    <name>C26426: NO_GLOBAL_INIT_CALLS</name>
    <description><![CDATA[<p>
The order of execution of initializers for global objects may be inconsistent or undefined. This can lead to issues which are hard to reproduce and investigate. To avoid such problems global initializers should not depend on external code which is executed at runtime and can potentially depend on data which is not yet initialized. This rule flags cases where global objects use function calls to obtain their initial values.
</p><h2>Microsoft Documentation</h2>
<p><a href="https://docs.microsoft.com/en-us/visualstudio/code-quality/c26426" target="_blank">C26426 NO_GLOBAL_INIT_CALLS</a></p>
<p><a href="https://github.com/isocpp/CppCoreGuidelines/blob/master/CppCoreGuidelines.md#i22-avoid-complex-initialization-of-global-objects" target="_blank">Core Guideline - I.22: Avoid complex initialization of global objects</a></p>
]]>
    </description>
    <internalKey>C26426</internalKey>
  <tag>core-guideline</tag>
    <severity>INFO</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C26427</key>
    <name>C26427: NO_GLOBAL_INIT_EXTERNS</name>
    <description><![CDATA[<p>
Global objects may be initialized in an inconsistent or undefined order which means that interdependency between them is risky and should be avoided. This is specifically applicable when initializers refer to another object considered to be ‚Äòextern‚Äô.
</p><h2>Microsoft Documentation</h2>
<p><a href="https://docs.microsoft.com/en-us/visualstudio/code-quality/c26427" target="_blank">C26427 NO_GLOBAL_INIT_EXTERNS</a></p>
<p><a href="https://github.com/isocpp/CppCoreGuidelines/blob/master/CppCoreGuidelines.md#i22-avoid-complex-initialization-of-global-objects" target="_blank">Core Guideline - I.22: Avoid complex initialization of global objects</a></p>
]]>
    </description>
    <internalKey>C26427</internalKey>
  <tag>core-guideline</tag>
    <severity>INFO</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C26429</key>
    <name>C26429: USE_NOTNULL</name>
    <description><![CDATA[<p>
It is a common practice to use asserts to enforce assumptions about validity of pointer values. The problem with asserts is that they do not expose assumptions through the interface (e.g. in return types or parameters). Asserts are also harder to maintain and keep in sync with other code changes. The recommendation is to use gsl::not_null from the Guidelines Support Library as a marker of resources which should never have null value. The rule USE_NOTNULL helps to identify places that omit checks for nullness and hence can be updated to use gsl::not_null.
</p><h2>Microsoft Documentation</h2>
<p><a href="https://docs.microsoft.com/en-us/visualstudio/code-quality/c26429" target="_blank">C26429: USE_NOTNULL</a></p>
<p><a href="https://github.com/isocpp/CppCoreGuidelines/blob/master/CppCoreGuidelines.md#f23-use-a-not_nullt-to-indicate-that-null-is-not-a-valid-value" target="_blank">Core Guideline - F.23: Use a not_null&lt;T&gt; to indicate that "null" is not a valid value</a></p>
]]>
    </description>
    <internalKey>C26429</internalKey>
  <tag>core-guideline</tag>
    <severity>INFO</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C26430</key>
    <name>C26430: TEST_ON_ALL_PATHS</name>
    <description><![CDATA[<p>
If code ever checks nullness of pointer variables it should do this consistently and validate pointers on all paths. Sometimes overaggressive checking for nullness is still better than possibility of a hard crash in one of the complicated branches. Ideally such code should be refactored to be less complex (by splitting into multiple functions) and to rely on markers like gsl::not_null (see Guidelines Support Library) to isolate parts of algorithm that can make safe assumption about valid pointer values. The rule TEST_ON_ALL_PATHS helps to find places where nullness checks are either inconsistent (hence assumptions may require review) or actual bugs where potential null value can bypass nullness check in some of the code paths.
</p><h2>Microsoft Documentation</h2>
<p><a href="https://docs.microsoft.com/en-us/visualstudio/code-quality/c26430" target="_blank">C26430 TEST_ON_ALL_PATHS</a></p>
<p><a href="https://github.com/isocpp/CppCoreGuidelines/blob/master/CppCoreGuidelines.md#f23-use-a-not_nullt-to-indicate-that-null-is-not-a-valid-value" target="_blank">Core Guideline - F.23: Use a not_null&lt;T&gt; to indicate that "null" is not a valid value</a></p>
]]>
    </description>
    <internalKey>C26430</internalKey>
  <tag>core-guideline</tag>
    <severity>INFO</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C26431</key>
    <name>C26431: DONT_TEST_NOTNULL</name>
    <description><![CDATA[<p>
The marker type gsl::not_null from Guidelines Support Library is used to clearly indicate values which are never null pointers. It causes a hard failure if such assumption is not held at runtime. So, obviously, there is no need to check for nullness if expression evaluates to a result of type gsl::not_null.
</p><h2>Microsoft Documentation</h2>
<p><a href="https://docs.microsoft.com/en-us/visualstudio/code-quality/c26431" target="_blank">C26431: DONT_TEST_NOTNULL</a></p>
<p><a href="https://github.com/isocpp/CppCoreGuidelines/blob/master/CppCoreGuidelines.md#f23-use-a-not_nullt-to-indicate-that-null-is-not-a-valid-value" target="_blank">Core Guideline - F.23: Use a not_null&lt;T&gt; to indicate that "null" is not a valid value</a></p>
]]>
    </description>
    <internalKey>C26431</internalKey>
  <tag>core-guideline</tag>
    <severity>INFO</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C26432</key>
    <name>C26432: DEFINE_OR_DELETE_SPECIAL_OPS</name>
    <description><![CDATA[<p>
Special operations like constructors are assumed to alter behavior of types so that they rely more on language mechanisms to automatically enforce specific scenarios (the canonical example is resource management). If any of these operations is explicitly defined, defaulted or deleted (as an indication that user wants to avoid any special handling of a type) it would be inconsistent to leave the other operations from the same group unspecified (i.e. implicitly defined by compiler).
</p><h2>Microsoft Documentation</h2>
<p><a href="https://docs.microsoft.com/en-us/visualstudio/code-quality/c26432" target="_blank">C26432 DEFINE_OR_DELETE_SPECIAL_OPS</a></p>
<p><a href="https://github.com/isocpp/CppCoreGuidelines/blob/master/CppCoreGuidelines.md#c21-if-you-define-or-delete-any-default-operation-define-or-delete-them-all" target="blank">Core Guideline - C.21: If you define or =delete any default operation, define or =delete them all</a></p>
]]>
    </description>
    <internalKey>C26432</internalKey>
  <tag>core-guideline</tag>
    <severity>INFO</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
 <rule>
    <key>C26433</key>
    <name>C26433: OVERRIDE_EXPLICITLY</name>
    <description><![CDATA[<p>
When a method overrides a base virtual function it should clearly state this by using the 'override' specifier.
</p><h2>Microsoft Documentation</h2>
<p><a href="https://docs.microsoft.com/en-us/visualstudio/code-quality/c26433" target="_blank">C26433 OVERRIDE_EXPLICITLY</a></p>
<p><a href="https://github.com/isocpp/CppCoreGuidelines/blob/master/CppCoreGuidelines.md#c128-virtual-functions-should-specify-exactly-one-of-virtual-override-or-final" target="blank">Core Guideline - C.128: Virtual functions should specify exactly one of virtual, override, or final</a></p>
]]>
    </description>
    <internalKey>C26433</internalKey>
  <tag>core-guideline</tag>
    <severity>INFO</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
 <rule>
    <key>C26434</key>
    <name>C26434: DONT_HIDE_METHODS</name>
    <description><![CDATA[<p>
Function '%symbol_1%' hides a non-virtual function '%symbol_2%'.
</p><h2>Microsoft Documentation</h2>
<p><a href="https://docs.microsoft.com/en-us/visualstudio/code-quality/c26434" target="_blank">C26434 DONT_HIDE_METHODS</a></p>
<p><a href="https://github.com/isocpp/CppCoreGuidelines/blob/master/CppCoreGuidelines.md#c128-virtual-functions-should-specify-exactly-one-of-virtual-override-or-final" target="blank">Core Guideline - C.128: Virtual functions should specify exactly one of virtual, override, or final</a></p>
]]>
    </description>
    <internalKey>C26434</internalKey>
  <tag>core-guideline</tag>
    <severity>INFO</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
 <rule>
    <key>C26435</key>
    <name>C26435: SINGLE_VIRTUAL_SPECIFICATION</name>
    <description><![CDATA[<p>
Methods should clearly state the kind of their virtual behavior by using a single specifier ('virtual', 'override', or 'final').
</p><h2>Microsoft Documentation</h2>
<p><a href="https://docs.microsoft.com/en-us/visualstudio/code-quality/c26435" target="_blank">https://docs.microsoft.com/en-us/visualstudio/code-quality/c26435</a></p>
]]>
    </description>
    <internalKey>C26435</internalKey>
  <tag>core-guideline</tag>
    <severity>INFO</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C26436</key>
    <name>C26436: NEED_VIRTUAL_DTOR</name>
    <description><![CDATA[<p>
If a class defines a virtual function it becomes polymorphic, which implies that derived classes can change its behavior including resource management and destruction logic. Because client code may call polymorphic types via pointers to base classes, there is no way a client can explicitly choose which behavior is appropriate without downcasting. To make sure that resources are managed consistently and destruction occurs according to the actual type‚Äôs rules it is recommended to define a public virtual destructor. If the type hierarchy is designed to disallow client code to destroy objects directly, destructors should be defined as protected non-virtual.
</p><h2>Microsoft Documentation</h2>
<p><a href="https://docs.microsoft.com/en-us/visualstudio/code-quality/c26436" target="_blank">C26436 NEED_VIRTUAL_DTOR</a></p>
<p><a href="https://github.com/isocpp/CppCoreGuidelines/blob/master/CppCoreGuidelines.md#c35-a-base-class-destructor-should-be-either-public-and-virtual-or-protected-and-nonvirtual" target="blank">Core Guideline - C.35: A base class destructor should be either public and virtual, or protected and nonvirtual</a></p>
]]>
    </description>
    <internalKey>C26436</internalKey>
  <tag>core-guideline</tag>
    <severity>INFO</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C26437</key>
    <name>C26437: DONT_SLICE</name>
    <description><![CDATA[<p>
Slicing is allowed by compiler and can be viewed as a special case of dangerous implicit cast. Even if it is done intentionally and doesn‚Äôt lead to immediate issues, it is still highly discouraged since it makes code rather unmaintainable by forcing additional requirements on related data types. This is especially true if types are polymorphic or involve resource management.
</p><h2>Microsoft Documentation</h2>
<p><a href="https://docs.microsoft.com/en-us/visualstudio/code-quality/c26437" target="_blank">C26437 DONT_SLICE</a></p>
<p><a href="https://github.com/isocpp/CppCoreGuidelines/blob/master/CppCoreGuidelines.md#es63-dont-slice" target="blank">Core Guideline - ES.63: Don't slice</a></p>
]]>
    </description>
    <internalKey>C26437</internalKey>
  <tag>core-guideline</tag>
    <severity>INFO</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C26438</key>
    <name>C26438: NO_GOTO</name>
    <description><![CDATA[<p>
Using of ‚Äògoto‚Äô is widely acknowledged as dangerous and error-prone practice. It is acceptable only in generated code (e.g. in a parser generated from a grammar). With modern C++ features and utilities provided by the Guidelines Support Library it should be easy to avoid ‚Äògoto‚Äô altogether.
</p><h2>Microsoft Documentation</h2>
<p><a href="https://docs.microsoft.com/en-us/visualstudio/code-quality/c26438" target="_blank">C26438 NO_GOTO</a></p>
<p><a href="https://github.com/isocpp/CppCoreGuidelines/blob/master/CppCoreGuidelines.md#es76-avoid-goto" target="blank">Core Guideline - ES.76: Avoid goto</a></p>
]]>
    </description>
    <internalKey>C26438</internalKey>
  <tag>core-guideline</tag>
    <severity>INFO</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C26439</key>
    <name>C26439: SPECIAL_NOEXCEPT</name>
    <description><![CDATA[<p>
Some kinds of operations should never cause exceptions. Their implementations should be reliable and should handle possible errors conditions gracefully. They should never use exceptions to indicate failure. This rule flags cases where such operations are not explicitly marked as ‚Äònoexcept‚Äô which means that they may throw exceptions and cannot convey assumptions about their reliability.
</p><h2>Microsoft Documentation</h2>
<p><a href="https://docs.microsoft.com/en-us/visualstudio/code-quality/c26439" target="_blank">C26439 SPECIAL_NOEXCEPT</a></p>
<p><a href="https://github.com/isocpp/CppCoreGuidelines/blob/master/CppCoreGuidelines.md#f6-if-your-function-may-not-throw-declare-it-noexcept" target="blank">Core Guideline - F.6: If your function may not throw, declare it noexcept</a></p>
]]>
    </description>
    <internalKey>C26439</internalKey>
  <tag>core-guideline</tag>
    <severity>INFO</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C26440</key>
    <name>C26440: DECLARE_NOEXCEPT</name>
    <description><![CDATA[<p>
If code is not supposed to cause any exceptions, it should be marked as such by using the ‚Äònoexcept‚Äô specifier. This would help to simplify error handling on the client code side, as well as enable compiler to do additional optimizations.
</p><h2>Microsoft Documentation</h2>
<p><a href="https://docs.microsoft.com/en-us/visualstudio/code-quality/c26440" target="_blank">C26440 DECLARE_NOEXCEPT</a></p>
<p><a href="https://github.com/isocpp/CppCoreGuidelines/blob/master/CppCoreGuidelines.md#f6-if-your-function-may-not-throw-declare-it-noexcept" target="blank">Core Guideline - F.6: If your function may not throw, declare it noexcept</a></p>
]]>
    </description>
    <internalKey>C26440</internalKey>
  <tag>core-guideline</tag>
    <severity>INFO</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C26441</key>
    <name>C26441: NO_UNNAMED_GUARDS</name>
    <description><![CDATA[<p>
The standard library provides a few useful classes which help to control concurrent access to resources. Objects of such types lock exclusive access for the duration of their lifetime. This implies that every lock object must be named, i.e. have clearly defined lifetime which spans through the period in which access operations are executed. So, failing to assign a lock object to a variable is a mistake which is effectively disables locking mechanism (because temporary variables are transient). This rule tries to catch simple cases of such unintended behavior.
</p><h2>Microsoft Documentation</h2>
<p><a href="https://docs.microsoft.com/en-us/visualstudio/code-quality/c26441" target="_blank">C26441 NO_UNNAMED_GUARDS</a></p>
<p><a href="https://github.com/isocpp/CppCoreGuidelines/blob/master/CppCoreGuidelines.md#cp44-remember-to-name-your-lock_guards-and-unique_locks" target="blank">Core Guideline - 
CP.44: Remember to name your lock_guards and unique_locks</a></p>
]]>
    </description>
    <internalKey>C26441</internalKey>
  <tag>core-guideline</tag>
    <severity>INFO</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C26443</key>
    <name>C26443: NO_EXPLICIT_DTOR_OVERRIDE</name>
    <description><![CDATA[<p>
Destructors are very special methods and guidelines for them differ from the OVERRIDE_EXPLICITLY rule: it is recommended to rely on implicit overriding if the base class has a virtual destructor.
</p><h2>Microsoft Documentation</h2>
<p><a href="https://docs.microsoft.com/en-us/visualstudio/code-quality/c26443" target="_blank">https://docs.microsoft.com/en-us/visualstudio/code-quality/c26443</a></p>
<p><a href="https://github.com/isocpp/CppCoreGuidelines/blob/master/CppCoreGuidelines.md#c128-virtual-functions-should-specify-exactly-one-of-virtual-override-or-final" target="blank">Core Guideline - C.128: Virtual functions should specify exactly one of virtual, override, or final</a></p>
]]>
    </description>
    <internalKey>C26443</internalKey>
  <tag>core-guideline</tag>
    <severity>INFO</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C26444</key>
    <name>C26444: NO_UNNAMED_RAII_OBJECTS</name>
    <description><![CDATA[<p>
This rule helps to detect some common cases where a potentially expensive object is created and immediately discarded. This is often an indication of ignored call results or inefficient resource handling.
</p><h2>Microsoft Documentation</h2>
<p><a href="https://docs.microsoft.com/en-us/visualstudio/code-quality/c26444" target="_blank">https://docs.microsoft.com/en-us/visualstudio/code-quality/c26444</a></p>
]]>
    </description>
    <internalKey>C26444</internalKey>
  <tag>core-guideline</tag>
    <severity>INFO</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C26445</key>
    <name>C26445: A reference to gsl::span or std::string_view may be an indication of a lifetime issue</name>
    <description><![CDATA[<p>
The intention of this rule is to catch subtle lifetime issues that may occur in code which has been migrated from standard containers to new span and view types. Such types can be considered as ‚Äúreferences to buffers.‚Äù Using a reference to a span or view creates an additional layer of indirection. Such indirection is often unnecessary and can be confusing for maintainers. In addition, spans are cheap to copy and can be returned by value from function calls. Obviously, such call results should never be referenced.
</p><h2>Microsoft Documentation</h2>
<p><a href="https://docs.microsoft.com/en-us/visualstudio/code-quality/c26445" target="_blank">https://docs.microsoft.com/en-us/visualstudio/code-quality/c26445</a></p>
]]>
    </description>
    <internalKey>C26445</internalKey>
    <severity>INFO</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C26446</key>
    <name>C26446: Prefer to use gsl::at() instead of unchecked subscript operator</name>
    <description><![CDATA[<p>
The Bounds profile of the C++ Core Guidelines tries to eliminate unsafe manipulations of memory by avoiding the use of raw pointers and unchecked operations. One way to perform uniform range-checked access to buffers is to use the gsl::at() utility from the Guidelines Support Library.
</p><h2>Microsoft Documentation</h2>
<p><a href="https://docs.microsoft.com/en-us/visualstudio/code-quality/c26446" target="_blank">https://docs.microsoft.com/en-us/visualstudio/code-quality/c26446</a></p>
]]>
    </description>
    <internalKey>C26446</internalKey>
    <severity>INFO</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C26447</key>
    <name>C26447: The function is declared noexcept but calls a function that may throw exceptions</name>
    <description><![CDATA[<p>
This rule amends another rule, C26440 DECLARE_NOEXCEPT, which tries to find functions that are good candidates to be marked as noexcept. In this case, the idea is that once some function is marked as noexcept, it must keep its contract by not invoking other code that may throw exceptions.
</p><h2>Microsoft Documentation</h2>
<p><a href="https://docs.microsoft.com/en-us/visualstudio/code-quality/c26447" target="_blank">https://docs.microsoft.com/en-us/visualstudio/code-quality/c26447</a></p>
]]>
    </description>
    <internalKey>C26447</internalKey>
    <severity>INFO</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C26448</key>
    <name>C26448: Consider using gsl::finally if final action is intended</name>
    <description><![CDATA[<p>
The Guidelines Support Library provides a convenient utility to implement the final action concept. Since the C++ language doesn't support try-finally constructs, it became common to implement custom cleanup types that would invoke arbitrary actions on destruction. The gsl::finally utility is implemented in this way and provides a more uniform way to perform final actions across a code base.
</p><h2>Microsoft Documentation</h2>
<p><a href="https://docs.microsoft.com/en-us/visualstudio/code-quality/c26448" target="_blank">https://docs.microsoft.com/en-us/visualstudio/code-quality/c26448</a></p>
]]>
    </description>
    <internalKey>C26448</internalKey>
    <severity>INFO</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C26449</key>
    <name>C26449: gsl::span or std::string_view created from a temporary will be invalid when the temporary is invalidated</name>
    <description><![CDATA[<p>
Spans and views are convenient and lightweight types that allow to reference memory buffers. But they must be used carefully: while their interface looks similar to standard containers, their behavior is more like the behavior of pointers and references. They do not own data and must never be constructed from temporary buffers. This check focuses on cases where source data is temporary, while span or view is not.
</p><h2>Microsoft Documentation</h2>
<p><a href="https://docs.microsoft.com/en-us/visualstudio/code-quality/c26449" target="_blank">https://docs.microsoft.com/en-us/visualstudio/code-quality/c26449</a></p>
]]>
    </description>
    <internalKey>C26449</internalKey>
    <severity>INFO</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C26450</key>
    <name>C26450: RESULT_OF_ARITHMETIC_OPERATION_PROVABLY_LOSSY</name>
    <description><![CDATA[<p>
Arithmetic operation on constants can sometimes lead to unintended overflows which are not obvious in user code but can be easily identified by automated tools.
</p><h2>Microsoft Documentation</h2>
<p><a href="https://docs.microsoft.com/en-us/visualstudio/code-quality/c26450" target="_blank">https://docs.microsoft.com/en-us/visualstudio/code-quality/c26450</a></p>
]]>
    </description>
    <internalKey>C26450</internalKey>
  <tag>core-guideline</tag>
    <severity>INFO</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C26451</key>
    <name>C26451: RESULT_OF_ARITHMETIC_OPERATION_CAST_TO_LARGER_SIZE</name>
    <description><![CDATA[<p>
A cast to a wider type can be ineffective and lead to unexpected results due to order of operations and non-obvious overflows. For example, an arithmetic operation may cause an overflow on 32-bit integer result before it is converted to 64-bit type.
</p><h2>Microsoft Documentation</h2>
<p><a href="https://docs.microsoft.com/en-us/visualstudio/code-quality/c26451" target="_blank">https://docs.microsoft.com/en-us/visualstudio/code-quality/c26451</a></p>
]]>
    </description>
    <internalKey>C26451</internalKey>
  <tag>core-guideline</tag>
    <severity>INFO</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C26452</key>
    <name>C26452: SHIFT_COUNT_NEGATIVE_OR_TOO_BIG</name>
    <description><![CDATA[<p>
Shifting integral values can result in undefined behavior if the shift count is not appropriate to the left-hand operand type.
</p><h2>Microsoft Documentation</h2>
<p><a href="https://docs.microsoft.com/en-us/visualstudio/code-quality/c26452" target="_blank">https://docs.microsoft.com/en-us/visualstudio/code-quality/c26452</a></p>
]]>
    </description>
    <internalKey>C26452</internalKey>
  <tag>core-guideline</tag>
    <severity>INFO</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C26453</key>
    <name>C26453: LEFTSHIFT_NEGATIVE_SIGNED_NUMBER</name>
    <description><![CDATA[<p>
Left shifting of negative signed integral has undefined results.
</p><h2>Microsoft Documentation</h2>
<p><a href="https://docs.microsoft.com/en-us/visualstudio/code-quality/c26453" target="_blank">https://docs.microsoft.com/en-us/visualstudio/code-quality/c26453</a></p>
]]>
    </description>
    <internalKey>C26453</internalKey>
  <tag>core-guideline</tag>
    <severity>BLOCKER</severity>
    <type>BUG</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C26454</key>
    <name>C26454: RESULT_OF_ARITHMETIC_OPERATION_NEGATIVE_UNSIGNED</name>
    <description><![CDATA[<p>
This rule detects if subtraction operations result in a negative number converted into unsigned type, which is always an overflow.
</p><h2>Microsoft Documentation</h2>
<p><a href="https://docs.microsoft.com/en-us/visualstudio/code-quality/c26454" target="_blank">https://docs.microsoft.com/en-us/visualstudio/code-quality/c26454</a></p>
]]>
    </description>
    <internalKey>C26454</internalKey>
  <tag>core-guideline</tag>
    <severity>BLOCKER</severity>
    <type>BUG</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>

  <rule>
    <key>C26460</key>
    <name>C26460: USE_CONST_REFERENCE_ARGUMENTS</name>
    <description><![CDATA[<p>
By default, pass pointers and references to¬†consts
see also:</p>
<p><a href="https://docs.microsoft.com/en-us/visualstudio/code-quality/c26460" target="_blank">C26460 USE_CONST_REFERENCE_ARGUMENTS</a></p>
<p><a href="https://github.com/isocpp/CppCoreGuidelines/blob/master/CppCoreGuidelines.md#Rconst-ref" target="_blank">Core Guideline - 
Con.3: By default, pass pointers and references to consts</a></p>
]]>
    </description>
    <internalKey>C26460</internalKey>
    <tag>core-guideline</tag>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C26461</key>
    <name>C26461: USE_CONST_POINTER_ARGUMENTS</name>
    <description><![CDATA[<p>
By default, pass pointers and references to consts</p>
<pre><code>
// Expect 26461: The input pointer argument b in function f7 can be marked as const
int f7(const int *a, int *b)
{
    return *a + *b;
}
 
struct S0
{
    virtual void m();
};
 
// Expect 26461 on 'p' but don't report on unnamed parameter.
S0 f8(int *p, int *)
{
    (p == nullptr);
 
    // Don't report on return UDT.
    return{};
}
</code></pre>
see also:
<p><a href="https://docs.microsoft.com/en-us/visualstudio/code-quality/c26461" target="_blank">C26461 C26461 USE_CONST_POINTER_ARGUMENTS</a></p>
<p><a href="https://github.com/isocpp/CppCoreGuidelines/blob/master/CppCoreGuidelines.md#con3-by-default-pass-pointers-and-references-to-consts" target="_blank">Core Guideline - Con.3: By default, pass pointers and references to consts</a></p>
]]>
    </description>
    <internalKey>C26461</internalKey>
    <tag>core-guideline</tag>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C26462</key>
    <name>C26462: USE_CONST_POINTER_FOR_VARIABLE</name>
    <description><![CDATA[<p>
USE_CONST_POINTER_FOR_VARIABLE
see also:</p>
<p><a href="https://docs.microsoft.com/visualstudio/code-quality/c26462" target="_blank">C26462 USE_CONST_POINTER_FOR_VARIABLE</a></p>
<p><a href="https://github.com/isocpp/CppCoreGuidelines/blob/master/CppCoreGuidelines.md#con4-use-const-to-define-objects-with-values-that-do-not-change-after-construction" target="_blank">Core Guideline - Con.4: Use const to define objects with values that do not change after construction</a></p>

]]>
    </description>
    <internalKey>C26462</internalKey>
    <tag>core-guideline</tag>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C26463</key>
    <name>C26463: USE_CONST_FOR_ELEMENTS</name>
    <description><![CDATA[<p>
USE_CONST_FOR_ELEMENTS
see also:</p>
<p><a href="https://docs.microsoft.com/visualstudio/code-quality/c26463" target="_blank">C26463 USE_CONST_FOR_ELEMENTS</a></p>
<p><a href="https://github.com/isocpp/CppCoreGuidelines/blob/master/CppCoreGuidelines.md#con4-use-const-to-define-objects-with-values-that-do-not-change-after-construction" target="_blank">Core Guideline - Con.4: Use const to define objects with values that do not change after construction</a></p>

]]>
    </description>
    <internalKey>C26463</internalKey>
    <tag>core-guideline</tag>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C26464</key>
    <name>C26464: USE_CONST_POINTER_FOR_ELEMENTS</name>
    <description><![CDATA[<p>
USE_CONST_POINTER_FOR_ELEMENTS
see also:</p>
<p><a href="https://docs.microsoft.com/visualstudio/code-quality/c26464" target="_blank">C26464 USE_CONST_POINTER_FOR_ELEMENTS</a></p>
<p><a href="https://github.com/isocpp/CppCoreGuidelines/blob/master/CppCoreGuidelines.md#con4-use-const-to-define-objects-with-values-that-do-not-change-after-construction" target="_blank">Core Guideline - Con.4: Use const to define objects with values that do not change after construction</a></p>

]]>
    </description>
    <internalKey>C26464</internalKey>
    <tag>core-guideline</tag>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C26465</key>
    <name>C26465: NO_CONST_CAST_UNNECESSARY</name>
    <description><![CDATA[<p>
NO_CONST_CAST_UNNECESSARY
see also:</p>
<p><a href="https://docs.microsoft.com/visualstudio/code-quality/c26465" target="_blank">C26465 NO_CONST_CAST_UNNECESSARY</a></p>
<p><a href="https://github.com/isocpp/CppCoreGuidelines/blob/master/CppCoreGuidelines.md#Pro-type-constcast" target="_blank">Core Guideline - Pro.safety: Type-safety profile</a></p>

]]>
    </description>
    <internalKey>C26465</internalKey>
    <tag>core-guideline</tag>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C26466</key>
    <name>C26466: NO_STATIC_DOWNCAST_POLYMORPHIC</name>
    <description><![CDATA[<p>
NO_STATIC_DOWNCAST_POLYMORPHIC
see also:</p>
<p><a href="https://docs.microsoft.com/visualstudio/code-quality/c26466" target="_blank">C26466 NO_STATIC_DOWNCAST_POLYMORPHIC</a></p>
<p><a href="https://github.com/isocpp/CppCoreGuidelines/blob/master/CppCoreGuidelines.md#Pro-type-downcast" target="_blank">Core Guideline - Pro.safety: Type-safety profile</a></p>
]]>
    </description>
    <internalKey>C26466</internalKey>
    <tag>core-guideline</tag>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C26470</key>
    <name>C26470: No reinterpret_cast to void pointer</name>
    <description><![CDATA[<p>
No reinterpret_cast to void pointer.
see also:</p>
<p><a href="https://github.com/isocpp/CppCoreGuidelines/blob/master/CppCoreGuidelines.md#prosafety-type-safety-profile" target="_blank">Core Guideline - Pro.safety: Type-safety profile</a></p>
]]>
    </description>
    <internalKey>C26470</internalKey>
    <tag>core-guideline</tag>
    <severity>CRITICAL</severity>
    <type>BUG</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C26471</key>
    <name>C26471: NO_REINTERPRET_CAST_FROM_VOID_PTR</name>
    <description><![CDATA[<p>
No reinterpret_cast from void pointer.
see also:</p>
<p><a href="https://github.com/isocpp/CppCoreGuidelines/blob/master/CppCoreGuidelines.md#Pro-type-reinterpretcast" target="_blank">Core Guideline - Pro.safety: Type-safety profile</a></p>
]]>
    </description>
    <internalKey>C26471</internalKey>
    <tag>core-guideline</tag>
    <severity>CRITICAL</severity>
    <type>BUG</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C26472</key>
    <name>C26472: NO_CASTS_FOR_ARITHMETIC_CONVERSION</name>
    <description><![CDATA[<p>
This rule helps to find places where static casts are used to convert between integral types, which is unsafe since compiler would not warn if any data loss occurs. Brace initializers are better for the cases where constants are used, and a compiler error is desired.
</p><h2>Microsoft Documentation</h2>
<p><a href="https://docs.microsoft.com/en-us/visualstudio/code-quality/c26472" target="_blank">https://docs.microsoft.com/en-us/visualstudio/code-quality/c26472</a></p>
<p><a href="https://github.com/isocpp/CppCoreGuidelines/blob/master/CppCoreGuidelines.md#Pro-type-reinterpretcast" target="_blank">Core Guideline - Pro.safety: Type-safety profile</a></p>
]]>
    </description>
    <internalKey>C26472</internalKey>
  <tag>core-guideline</tag>
    <severity>INFO</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C26473</key>
    <name>C26473: NO_IDENTITY_CAST</name>
    <description><![CDATA[<p>
This rule helps to remove unnecessary or suspicious casts. Obviously, when type is converted to itself, such conversion is ineffective, yet the fact that the cast is used may indicate subtle design issue or a potential for regression if types change in future. It is always safer to use as few casts as possible.
</p><h2>Microsoft Documentation</h2>
<p><a href="https://docs.microsoft.com/en-us/visualstudio/code-quality/c26473" target="_blank">https://docs.microsoft.com/en-us/visualstudio/code-quality/c26473</a></p>
<p><a href="https://github.com/isocpp/CppCoreGuidelines/blob/master/CppCoreGuidelines.md#Pro-type-reinterpretcast" target="_blank">Core Guideline - Pro.safety: Type-safety profile</a></p>
]]>
    </description>
    <internalKey>C26473</internalKey>
  <tag>core-guideline</tag>
    <severity>INFO</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C26474</key>
    <name>C26474: NO_IMPLICIT_CAST</name>
    <description><![CDATA[<p>
In some cases, implicit casts between pointer types can safely be done and don‚Äôt require user to write specific cast expression. This rule finds instances of such unnecessary casting which can be removed.
</p><h2>Microsoft Documentation</h2>
<p><a href="https://docs.microsoft.com/en-us/visualstudio/code-quality/c26474" target="_blank">https://docs.microsoft.com/en-us/visualstudio/code-quality/c26474</a></p>
<p><a href="https://github.com/isocpp/CppCoreGuidelines/blob/master/CppCoreGuidelines.md#Pro-type-reinterpretcast" target="_blank">Core Guideline - Pro.safety: Type-safety profile</a></p>
]]>
    </description>
    <internalKey>C26474</internalKey>
  <tag>core-guideline</tag>
    <severity>INFO</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C26475</key>
    <name>C26475: NO_FUNCTION_STYLE_CASTS</name>
    <description><![CDATA[<p>
Function style casts (e.g. "int(1.1)") are another incarnation of C-style casts (like "(int)1.1") with all its questionable safety. Specifically, compiler doesn‚Äôt try to check if any data loss can occur neither in C-casts, nor in function casts. In both cases it is better either to avoid casting or use brace initializer if possible. If neither works, static casts may be suitable, but it is still better to use utilities from the Guidelines Support Library.
</p><h2>Microsoft Documentation</h2>
<p><a href="https://docs.microsoft.com/en-us/visualstudio/code-quality/c26475" target="_blank">https://docs.microsoft.com/en-us/visualstudio/code-quality/c26475</a></p>
<p><a href="https://github.com/isocpp/CppCoreGuidelines/blob/master/CppCoreGuidelines.md#es49-if-you-must-use-a-cast-use-a-named-cast" target="_blank">Core Guideline - ES.49: If you must use a cast, use a named cast</a></p>
]]>
    </description>
    <internalKey>C26475</internalKey>
  <tag>core-guideline</tag>
    <severity>INFO</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C26481</key>
    <name>C26481: NO_POINTER_ARITHMETIC</name>
    <description><![CDATA[<p>
Don't use pointer arithmetic. Use span instead.
Pointers should only refer to single objects, and pointer arithmetic is fragile and easy to get wrong. <i>span</i> is a bounds-checked, safe type for accessing arrays of data.

see also:</p>
<p><a href="https://docs.microsoft.com/en-us/visualstudio/code-quality/c26481" target="_blank">C26481 NO_POINTER_ARITHMETIC</a></p>
<p><a href="https://github.com/isocpp/CppCoreGuidelines/blob/master/CppCoreGuidelines.md#r-resource-management" target="_blank">Core Guideline - Pro.safety: Resource management</a></p>
<p><a href="http://github.com/isocpp/CppCoreGuidelines/blob/master/CppCoreGuidelines.md#probounds-bounds-safety-profile" target="_blank">Core Guideline - Pro.bounds: Bounds safety profile</a></p>
]]>
    </description>
    <internalKey>C26481</internalKey>
    <tag>core-guideline</tag>
    <severity>CRITICAL</severity>
    <type>BUG</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C26482</key>
    <name>C26482: NO_DYNAMIC_ARRAY_INDEXING</name>
    <description><![CDATA[<p>
Only index into arrays using constant expressions.
see also:</p>
<p><a href="http://github.com/isocpp/CppCoreGuidelines/blob/master/CppCoreGuidelines.md#probounds-bounds-safety-profile" target="_blank">Core Guideline - Pro.bounds: Bounds safety profile</a></p>
]]>
    </description>
    <internalKey>C26482</internalKey>
    <tag>core-guideline</tag>
    <severity>CRITICAL</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C26483</key>
    <name>C26483: STATIC_INDEX_OUT_OF_RANGE</name>
    <description><![CDATA[<p>
Value %value% is outside the bounds (0, %bound%) of variable '%variable%'. Only index into arrays using constant expressions that are within bounds of the array.
see also:</p>
<p><a href="http://github.com/isocpp/CppCoreGuidelines/blob/master/CppCoreGuidelines.md#probounds-bounds-safety-profile" target="_blank">Core Guideline - Pro.bounds: Bounds safety profile</a></p>
]]>
    </description>
    <internalKey>C26483</internalKey>
    <tag>core-guideline</tag>
    <severity>CRITICAL</severity>
    <type>BUG</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C26485</key>
    <name>C26485: NO_ARRAY_TO_POINTER_DECAY</name>
    <description><![CDATA[<p>
No array to pointer decay.

see also:</p>
<p><a href="https://docs.microsoft.com/en-us/visualstudio/code-quality/c26485" target="_blank">C26485 NO_ARRAY_TO_POINTER_DECAY</a></p>
<p><a href="https://github.com/isocpp/CppCoreGuidelines/blob/master/CppCoreGuidelines.md#probounds-bounds-safety-profile" target="_blank">Core Guideline - Pro.bounds: Bounds safety profile</a></p>
]]>
    </description>
    <internalKey>C26485</internalKey>
    <tag>core-guideline</tag>
    <severity>CRITICAL</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>10min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C26486</key>
    <name>C26486: LIFETIMES_FUNCTION_PRECONDITION_VIOLATION</name>
    <description><![CDATA[<p>
If a pointer is passed to a function it is expected that it points to a valid memory location, i.e. a location with a valid object or nullptr.
</p><h2>Microsoft Documentation</h2>
<p><a href="https://docs.microsoft.com/visualstudio/code-quality/c26486" target="_blank">https://docs.microsoft.com/visualstudio/code-quality/c26486</a></p>
]]>
    </description>
    <internalKey>C26486</internalKey>
    <tag>core-guideline</tag>
    <severity>CRITICAL</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>10min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C26487</key>
    <name>C26487: LIFETIMES_FUNCTION_POSTCONDITION_VIOLATION</name>
    <description><![CDATA[<p>
If a pointer is returned from a function it must either point to a valid object which will outlive the function or be nullptr.
</p><h2>Microsoft Documentation</h2>
<p><a href="https://docs.microsoft.com/visualstudio/code-quality/c26487" target="_blank">https://docs.microsoft.com/visualstudio/code-quality/c26487</a></p>
]]>
    </description>
    <internalKey>C26487</internalKey>
    <tag>core-guideline</tag>
    <severity>CRITICAL</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>10min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C26489</key>
    <name>C26489: LIFETIMES_DEREF_INVALID_POINTER</name>
    <description><![CDATA[<p>
This rule tries to catch scenarios in which a local pointer obtains a value pointing to a transient object. If such a pointer is accessed at the point where its target may not be alive this can clearly lead to catastrophic results. 
</p><h2>Microsoft Documentation</h2>
<p><a href="https://docs.microsoft.com/visualstudio/code-quality/c26489" target="_blank">https://docs.microsoft.com/visualstudio/code-quality/c26489</a></p>
]]>
    </description>
    <internalKey>C26489</internalKey>
    <tag>core-guideline</tag>
    <severity>BLOCKER</severity>
    <type>BUG</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>10min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C26490</key>
    <name>C26490: NO_REINTERPRET_CAST</name>
    <description><![CDATA[<p>
Don't use reinterpret_cast.
see also:</p>
<p><a href="https://github.com/isocpp/CppCoreGuidelines/blob/master/CppCoreGuidelines.md#Pro-type-reinterpretcast" target="_blank">Core Guideline - Pro.safety: Type-safety profile</a></p>
]]>
    </description>
    <internalKey>C26490</internalKey>
    <tag>core-guideline</tag>
    <severity>CRITICAL</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C26491</key>
    <name>C26491: NO_STATIC_DOWNCAST</name>
    <description><![CDATA[<p>
Don't use static_cast downcasts.
see also:</p>
<p><a href="https://github.com/isocpp/CppCoreGuidelines/blob/master/CppCoreGuidelines.md#prosafety-type-safety-profile" target="_blank">Core Guideline - Pro.safety: Type-safety profile</a></p>
]]>
    </description>
    <internalKey>C26491</internalKey>
    <tag>core-guideline</tag>
    <severity>CRITICAL</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C26492</key>
    <name>C26492: NO_CONST_CAST</name>
    <description><![CDATA[<p>
Don't use const_cast to cast away const.
see also:</p>
<p><a href="https://github.com/isocpp/CppCoreGuidelines/blob/master/CppCoreGuidelines.md#prosafety-type-safety-profile" target="_blank">Core Guideline - Pro.safety: Type-safety profile</a></p>
]]>
    </description>
    <internalKey>C26492</internalKey>
    <tag>core-guideline</tag>
    <severity>CRITICAL</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C26493</key>
    <name>C26493: NO_CSTYLE_CAST</name>
    <description><![CDATA[<p>
Don't use C-style casts.
see also:</p>
<p><a href="https://github.com/isocpp/CppCoreGuidelines/blob/master/CppCoreGuidelines.md#prosafety-type-safety-profile" target="_blank">Core Guideline - Pro.safety: Type-safety profile</a></p>
]]>
    </description>
    <internalKey>C26493</internalKey>
    <tag>core-guideline</tag>
    <severity>CRITICAL</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C26494</key>
    <name>C26494: VAR_USE_BEFORE_INIT</name>
    <description><![CDATA[<p>
Variable '%variable%' is uninitialized. Always initialize an object.
see also:</p>
<p><a href="https://github.com/isocpp/CppCoreGuidelines/blob/master/CppCoreGuidelines.md#prosafety-type-safety-profile" target="_blank">Core Guideline - Pro.safety: Type-safety profile</a></p>
]]>
    </description>
    <internalKey>C26494</internalKey>
    <tag>core-guideline</tag>
    <severity>MAJOR</severity>
    <type>BUG</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C26495</key>
    <name>C26495: MEMBER_UNINIT</name>
    <description><![CDATA[<p>
Variable '%variable%' is uninitialized. Always initialize a member variable.
see also:</p>
<p><a href="https://github.com/isocpp/CppCoreGuidelines/blob/master/CppCoreGuidelines.md#Pro-type-memberinit" target="_blank">Core Guideline - Pro.safety: Type-safety profile</a></p>
]]>
    </description>
    <internalKey>C26495</internalKey>
    <tag>core-guideline</tag>
    <severity>MAJOR</severity>
    <type>BUG</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>

  <rule>
    <key>C26496</key>
    <name>C26496: USE_CONST_FOR_VARIABLE</name>
    <description><![CDATA[<p>
The variable '%variable%' is assigned only once, mark it as const.</p>
<pre><code>
int f5()
{
    // Expect 26496: Variable m is assigned only once, use const.
    int m = 5;
    const int a = 10;
    if (m > a)
        return m;
    return a;
}</code></pre>
see also:
<p><a href="https://github.com/isocpp/CppCoreGuidelines/blob/master/CppCoreGuidelines.md#con4-use-const-to-define-objects-with-values-that-do-not-change-after-construction" target="_blank">Core Guideline - Con.4: Use const to define objects with values that do not change after construction</a></p>
]]>
    </description>
    <internalKey>C26496</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C26497</key>
    <name>C26497: USE_CONSTEXPR_FOR_FUNCTION</name>
    <description><![CDATA[<p>
If a function may have to be evaluated at compile time, declare it¬†constexpr</p>
<pre><code>
// Expect 26497: could be marked constexpr if compile-time evaluation is desired
int f1(int a, int b)
{
    return a + b;
}
 
constexpr int f2(int a, int b)
{
    return a + b;
}
 
void f3()
{
   // Compile-time evaluation
    constexpr int m = f2(10, 20);
     
    // Expect 26498: This function call f2 can use constexpr if compile-time evaluation is desired.
    const int m2 = f2(10, 20);
}
}</code></pre>
see also:
<p><a href="https://github.com/isocpp/CppCoreGuidelines/blob/master/CppCoreGuidelines.md#Rf-constexpr" target="_blank">Core Guideline - F.4: If a function may have to be evaluated at compile time, declare it constexpr</a></p>
]]>
    </description>
    <internalKey>C26497</internalKey>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C26498</key>
    <name>C26498: USE_CONSTEXPR_FOR_FUNCTIONCALL</name>
    <description><![CDATA[<p>
Use constexpr for function call.

see also:</p>
<p><a href="https://github.com/isocpp/CppCoreGuidelines/blob/master/CppCoreGuidelines.md#Rconst-constexpr" target="_blank">Core Guideline - Con.5: Use constexpr for values that can be computed at compile time</a></p>
]]>
    </description>
    <internalKey>C26498</internalKey>
    <tag>core-guideline</tag>
    <severity>MAJOR</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C28020</key>
    <name>C28020: The expression &lt;expr&gt; is not true at this call</name>
    <description><![CDATA[<p>
This warning is reported when the _Satisfies_ expression listed is not true. Frequently this indicates an incorrect parameter.
If this occurs on a function declaration, the annotations indicate an impossible condition.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/hh442998.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/hh442998.aspx</a></p>
]]>
    </description>
    <internalKey>C28020</internalKey>
    <severity>INFO</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C28021</key>
    <name>C28021: The parameter &lt;param&gt; being annotated with &lt;anno&gt; must be a pointer</name>
    <description><![CDATA[<p>
This warning is reported when the object being annotated is not a pointer type. This annotation cannot be used with void or integral types.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/hh443004.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/hh443004.aspx</a></p>
]]>
    </description>
    <internalKey>C28021</internalKey>
    <severity>INFO</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C28022</key>
    <name>C28022: The function class(es) &lt;classlist1&gt; on this function do not match the function class(es) &lt;classlist2&gt; on the typedef used to define it</name>
    <description><![CDATA[<p>
This warning is reported when there is an error in the annotations. Both the typedef and the function itself have _Function_class_ annotations, but they do not match. If both are used they must match.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/hh443018.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/hh443018.aspx</a></p>
]]>
    </description>
    <internalKey>C28022</internalKey>
    <severity>INFO</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C28023</key>
    <name>C28023: The function being assigned or passed should have a _Function_class_ annotation for at least one of the class(es) in: &lt;classlist&gt;</name>
    <description><![CDATA[<p>
This warning is usually reported when only one function class is in use and a callback of the appropriate type is not declared.
This warning is issued when the function on the left side of the assignment (or of the implied assignment, if this is a function call) is annotated to indicate that it is a driver-specific function type that uses the _Function_class_ annotation or a typedef that contains such an annotation. The function on the right side of the assignment does not have a _Function_class_ annotation. The function on the right should be annotated to be of the same type as the function on the left. This is usually best done by adding the declaration &lt;class1&gt; &lt;funcname1&gt; before the current first declaration of &lt;funcname2&gt;.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/hh443024.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/hh443024.aspx</a></p>
]]>
    </description>
    <internalKey>C28023</internalKey>
    <severity>INFO</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C28024</key>
    <name>C28024: The function pointer being assigned to is annotated with the function class &lt;class&gt;, which is not contained in the function class(es) &lt;classlist&gt;</name>
    <description><![CDATA[<p>
This warning is reported when both functions were annotated with a function class, but the classes do not match.
This warning is issued when a function pointer has a _Function_class_ annotation that specifies that only functions of a particular functional class should be assigned to it. In an assignment or implied assignment in a function call, the source and target must be of the same function class, but the function classes do not match.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/hh443021.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/hh443021.aspx</a></p>
]]>
    </description>
    <internalKey>C28024</internalKey>
    <severity>INFO</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C28039</key>
    <name>C28039: The type of actual parameter &lt;operand&gt; should exactly match the type &lt;typename&gt;</name>
    <description><![CDATA[<p>
This warning is usually reported when an enum formal was not passed a member of the enum, but may also be used for other types.
Because C permits enums to be used interchangeably, and interchangeably with constants, it is easy to pass the wrong enum value to a function without an error.
For enum types, if the type of an enum parameter is annotated with _Enum_is_bitflag_, arithmetic is permitted on the parameter. Otherwise the parameter must be of exactly the correct type. If a constant is strictly required, C28137 may also apply.
This rule can be used for other parameter types as well; see the function documentation for why the types must match exactly.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/hh443001.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/hh443001.aspx</a></p>
]]>
    </description>
    <internalKey>C28039</internalKey>
    <severity>INFO</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C28101</key>
    <name>C28101: The Drivers module has inferred that the current function is not the correct type of function</name>
    <description><![CDATA[<p>
Wrong function type. Check context and use annotations.
</p><h2>Microsoft Documentation</h2>
<p><a href="https://docs.microsoft.com/en-us/windows-hardware/drivers/devtest/28101-wrong-function-type" target="_blank">https://docs.microsoft.com/en-us/windows-hardware/drivers/devtest/28101-wrong-function-type</a></p>
]]>
    </description>
    <tag>bug</tag>
    <internalKey>C28101</internalKey>
    <severity>INFO</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C28103</key>
    <name>C28103: Leaking resource</name>
    <description><![CDATA[<p>
The specified object contains a resource that has not been freed. A function being called has been annotated with __drv_acquiresResource or __drv_acquiresResourceGlobal and this warning indicates that the resource named in the annotation was not freed.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/hh739080.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/hh739080.aspx</a></p>
]]>
    </description>
    <tag>bug</tag>
    <internalKey>C28103</internalKey>
    <severity>INFO</severity>
    <type>BUG</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C28104</key>
    <name>C28104: Resource that should have been acquired before function exit was not acquired</name>
    <description><![CDATA[<p>
A function that is intended to acquire a resource before it exits has exited without acquiring the resource. This warning indicates that the function is annotated with __drv_acquiresResource but does not return having actually acquired the resource. If this function is a wrapper function, a path through the function did not reach the wrapped function. If the failure to reach the wrapped function is because the function returned an error and did not actually acquire the resource, you might need to use a conditional annotation (__drv_when).
If this function actually implements the acquisition of the resource, it might not be possible for PFD to detect that the resource is acquired. In that case, use a #pragma warning to suppress the error. You can probably place the #pragma on the line preceding the { that begins the function body. The calling functions still need the annotation, but the Code Analysis tool will not be able to detect that the resource was acquired.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/hh739050.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/hh739050.aspx</a></p>
]]>
    </description>
    <internalKey>C28104</internalKey>
    <severity>INFO</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C28105</key>
    <name>C28105: Leaking resource due to an exception</name>
    <description><![CDATA[<p>
The specified resource is not freed when an exception is raised. The statement specified by the path can raise an exception. This warning is similar to C28103, except that in this case an exception is involved.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/hh739065.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/hh739065.aspx</a></p>
]]>
    </description>
    <tag>bug</tag>
    <internalKey>C28105</internalKey>
    <severity>INFO</severity>
    <type>BUG</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C28106</key>
    <name>C28106: Variable already holds resource possibly causing leak</name>
<description><![CDATA[<p>
A variable that contains a resource is used in a context in which a new value can be placed in the variable. If this occurs, the resource can be lost and not properly freed, causing a resource leak.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/hh739060.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/hh739060.aspx</a></p>
]]>
    </description>
    <internalKey>C28106</internalKey>
    <severity>INFO</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C28107</key>
    <name>C28107: Resource must be held when calling function</name>
    <description><![CDATA[<p>
A resource that the program must acquire before calling the function was not acquired when the function was called. As a result, the function call will fail. This warning is reported only when resources are acquired and released in the same function.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/hh739075.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/hh739075.aspx</a></p>
]]>
    </description>
    <internalKey>C28107</internalKey>
    <severity>INFO</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C28108</key>
    <name>C28108: Variable holds an unexpected resource</name>
    <description><![CDATA[<p>
The resource that the driver is using is in the expected C language type, but has a different semantic type.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/hh739070.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/hh739070.aspx</a></p>
]]>
    </description>
    <internalKey>C28108</internalKey>
    <severity>INFO</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C28109</key>
    <name>C28109: Variable cannot be held at the time function is called</name>
    <description><![CDATA[<p>
The program is holding a resource that should not be held when it is calling this function. Typically, it indicates that the resource was unintentionally acquired twice. The Code Analysis tool reports this warning when resources are acquired and released in the same function.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/hh739058.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/hh739058.aspx</a></p>
]]>
    </description>
    <internalKey>C28109</internalKey>
    <severity>INFO</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C28110</key>
    <name>C28110: Drivers must protect floating-point hardware state. See use of float</name>
    <description><![CDATA[<p>
The driver is attempting to use a variable or constant of a float type when the code is not protected by KeSaveFloatingPointState and KeRestoreFloatingPointState, or EngSaveFloatingPointState and EngRestoreFloatingPointState.
</p><h2>Microsoft Documentation</h2>
<p><a href="https://docs.microsoft.com/en-us/windows-hardware/drivers/devtest/28110-floating-point-hardware-protect" target="_blank">https://docs.microsoft.com/en-us/windows-hardware/drivers/devtest/28110-floating-point-hardware-protect</a></p>
]]>
    </description>
    <internalKey>C28110</internalKey>
    <severity>INFO</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C28111</key>
    <name>C28111: The IRQL where the floating-point state was saved does not match the current IRQL</name>
    <description><![CDATA[<p>
The IRQL at which the driver is executing when it restores a floating-point state is different than the IRQL at which it was executing when it saved the floating-point state.
</p><h2>Microsoft Documentation</h2>
<p><a href="https://docs.microsoft.com/en-us/windows-hardware/drivers/devtest/28111-floating-point-irql-mismatch" target="_blank">https://docs.microsoft.com/en-us/windows-hardware/drivers/devtest/28111-floating-point-irql-mismatch</a></p>
]]>
    </description>
    <internalKey>C28111</internalKey>
    <severity>INFO</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C28112</key>
    <name>C28112: A variable which is accessed via an Interlocked function must always be accessed via an Interlocked function</name>
    <description><![CDATA[<p>
See line number: It is not always safe to access a variable which is accessed via the Interlocked* family of functions in any other way.
A variable that is accessed by using the Interlocked executive support routines, such as InterlockedCompareExchangeAcquire, is later accessed by using a different method.Although certain ordinary assignments, accesses, and comparisons to variables that are used by the Interlocked* routines can be safely accessed by using a different method, the risk is great enough to justify examining each instance.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/hh690609.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/hh690609.aspx</a></p>
]]>
    </description>
    <internalKey>C28112</internalKey>
    <severity>INFO</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C28113</key>
    <name>C28113: Accessing a local variable via an Interlocked function</name>
    <description><![CDATA[<p>
The driver is using an Interlocked executive support routine, such as InterlockedDecrement, to access a local variable.
Although drivers are permitted to pass the address of a local variable to another function, and then use an interlocked function to operate on that variable, it's important to verify that the stack will not be swapped out to disk unexpectedly and that the variable has the correct life time across all threads that might use it.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/hh690611.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/hh690611.aspx</a></p>
]]>
    </description>
    <internalKey>C28113</internalKey>
    <severity>INFO</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C28114</key>
    <name>C28114: Copying a whole IRP stack entry leaves certain fields initialized that should be cleared or updated</name>
    <description><![CDATA[<p>
The driver is copying an IRP improperly. Improperly copying an IRP can cause serious problems with a driver, including loss of data and system crashes.
</p><h2>MSDN Documentation</h2>
<p><a href="https://docs.microsoft.com/en-us/windows-hardware/drivers/devtest/28114-improper-irp-stack-copy" target="_blank">https://docs.microsoft.com/en-us/windows-hardware/drivers/devtest/28114-improper-irp-stack-copy</a></p>
]]>
    </description>
    <internalKey>C28114</internalKey>
    <severity>BLOCKER</severity>
    <type>BUG</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C28120</key>
    <name>C28120: The function is not permitted to be called at the current IRQ level. The current level is too low</name>
    <description><![CDATA[<p>
The driver is executing at an IRQL that is too low for the function that it is calling.
</p><h2>MSDN Documentation</h2>
<p><a href="https://docs.microsoft.com/en-us/windows-hardware/drivers/devtest/28120-irql-execution-too-low" target="_blank">https://docs.microsoft.com/en-us/windows-hardware/drivers/devtest/28120-irql-execution-too-low</a></p>
]]>
    </description>
    <internalKey>C28120</internalKey>
    <severity>INFO</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C28121</key>
    <name>C28121: The function is not permitted to be called at the current IRQ level. The current level is too high</name>
    <description><![CDATA[<p>
The driver is executing at an IRQL that is too high for the function that it is calling.
</p><h2>MSDN Documentation</h2>
<p><a href="https://docs.microsoft.com/en-us/windows-hardware/drivers/devtest/28121-irq-execution-too-high" target="_blank">https://docs.microsoft.com/en-us/windows-hardware/drivers/devtest/28121-irq-execution-too-high</a></p>
]]>
    </description>
    <internalKey>C28121</internalKey>
    <severity>INFO</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
    <rule>
    <key>C28122</key>
    <name>C28122: The function is not permitted to be called at a low IRQ level. Prior function calls are inconsistent with this constraint</name>
    <description><![CDATA[<p>
The driver is executing at an IRQL that is too low for the function that it is calling, and the highest permissible IRQL for prior calls in the current function is below the minimum IRQL that is required for this call.
</p><h2>MSDN Documentation</h2>
<p><a href="https://docs.microsoft.com/en-us/windows-hardware/drivers/devtest/28122-inconsistent-irq-level-calls-low" target="_blank">https://docs.microsoft.com/en-us/windows-hardware/drivers/devtest/28122-inconsistent-irq-level-calls-low</a></p>
]]>
    </description>
    <internalKey>C28122</internalKey>
    <severity>INFO</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
    <rule>
    <key>C28123</key>
    <name>C28123: The function is not permitted to be called at a high IRQ level. Prior function calls are inconsistent with this constraint</name>
    <description><![CDATA[<p>
The driver is executing at an IRQL that is too high for the function that it is calling and the lowest permissible IRQL for prior calls within the function is greater than the maximum IRQL required for this call.
</p><h2>MSDN Documentation</h2>
<p><a href="https://docs.microsoft.com/en-us/windows-hardware/drivers/devtest/28123-inconsistent-irq-level-calls-high" target="_blank">https://docs.microsoft.com/en-us/windows-hardware/drivers/devtest/28123-inconsistent-irq-level-calls-high</a></p>
]]>
    </description>
    <internalKey>C28123</internalKey>
    <severity>INFO</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
    <rule>
    <key>C28124</key>
    <name>C28124: The call to causes the IRQ Level to be set below the minimum acceptable for the function being analyzed</name>
    <description><![CDATA[<p>
The driver is calling a function that changes the IRQL to a level less than the minimum IRQL for the current function type.
</p><h2>MSDN Documentation</h2>
<p><a href="https://docs.microsoft.com/en-us/windows-hardware/drivers/devtest/28124-call-below-minimum-irq-level" target="_blank">https://docs.microsoft.com/en-us/windows-hardware/drivers/devtest/28124-call-below-minimum-irq-level</a></p>
]]>
    </description>
    <internalKey>C28124</internalKey>
    <severity>INFO</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C28125</key>
    <name>C28125: The function must be called from within a try/except block</name>
    <description><![CDATA[<p>
The driver is calling a function that must be called from within a try/except block, such as ProbeForRead, ProbeForWrite, MmProbeAndLockPages.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/hh691804.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/hh691804.aspx</a></p>
]]>
    </description>
    <internalKey>C28125</internalKey>
    <severity>INFO</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C28126</key>
    <name>C28126: The AccessMode parameter to ObReferenceObject* should be IRP-&gt;RequestorMode</name>
    <description><![CDATA[<p>
This warning is intended for the top-level driver in the driver stack. You can ignore or suppress this warning for all other drivers.
</p><h2>MSDN Documentation</h2>
<p><a href="https://docs.microsoft.com/en-us/windows-hardware/drivers/devtest/28126-accessmode-param-incorrect" target="_blank">https://docs.microsoft.com/en-us/windows-hardware/drivers/devtest/28126-accessmode-param-incorrect</a></p>
]]>
    </description>
    <internalKey>C28126</internalKey>
    <severity>INFO</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C28127</key>
    <name>C28127: The function being used as a routine does not exactly match the type expected</name>
    <description><![CDATA[<p>
The driver is passing or assigning a function (pointer) of an unexpected type (that is, function signature).
</p><h2>MSDN Documentation</h2>
<p><a href="https://docs.microsoft.com/en-us/windows-hardware/drivers/devtest/28127-function-routine-mismatch" target="_blank">https://docs.microsoft.com/en-us/windows-hardware/drivers/devtest/28127-function-routine-mismatch</a></p>
]]>
    </description>
    <internalKey>C28127</internalKey>
    <severity>INFO</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
    <rule>
    <key>C28128</key>
    <name>C28128: An access to a field has been made directly. It should be made by a routine</name>
    <description><![CDATA[<p>
The driver directly accessed a structure member that should be accessed only by using specialized functions.
</p><h2>MSDN Documentation</h2>
<p><a href="https://docs.microsoft.com/en-us/windows-hardware/drivers/devtest/28128-structure-member-directly-accessed" target="_blank">https://docs.microsoft.com/en-us/windows-hardware/drivers/devtest/28128-structure-member-directly-accessed</a></p>
]]>
    </description>
    <internalKey>C28128</internalKey>
    <severity>INFO</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
    <rule>
    <key>C28129</key>
    <name>C28129: An assignment has been made to an operand, which should only be modified using bit sets and clears</name>
    <description><![CDATA[<p>
The driver is using an assignment to modify an operand.
</p><h2>MSDN Documentation</h2>
<p><a href="https://docs.microsoft.com/en-us/windows-hardware/drivers/devtest/28129-assignment-made-to-operand" target="_blank">https://docs.microsoft.com/en-us/windows-hardware/drivers/devtest/28129-assignment-made-to-operand</a></p>
]]>
    </description>
    <internalKey>C28129</internalKey>
    <severity>INFO</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
    <rule>
    <key>C28131</key>
    <name>C28131: The DriverEntry routine should save a copy of the argument, not the pointer, because the I/O Manager frees the buffer</name>
    <description><![CDATA[<p>
The driver's DriverEntry routine is saving a copy of the pointer to the buffer instead of saving a copy of the buffer.
</p><h2>MSDN Documentation</h2>
<p><a href="https://docs.microsoft.com/en-us/windows-hardware/drivers/devtest/28131-driverentry-saving-pointer-to-buffer" target="_blank">https://docs.microsoft.com/en-us/windows-hardware/drivers/devtest/28131-driverentry-saving-pointer-to-buffer</a></p>
]]>
    </description>
    <internalKey>C28131</internalKey>
    <severity>INFO</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C28132</key>
    <name>C28132: Taking the size of pointer</name>
    <description><![CDATA[<p>
The driver is taking the size of a pointer variable, not the size of the value that is pointed to.
</p><h2>MSDN Documentation</h2>
<p><a href="https://docs.microsoft.com/en-us/windows-hardware/drivers/devtest/28132-driver-taking-the-size-of-pointer" target="_blank">https://docs.microsoft.com/en-us/windows-hardware/drivers/devtest/28132-driver-taking-the-size-of-pointer</a></p>
]]>
    </description>
    <internalKey>C28132</internalKey>
    <severity>INFO</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C28133</key>
    <name>C28133: IoInitializeTimer is best called from AddDevice</name>
    <description><![CDATA[<p>
The driver is calling IoInitializeTimer in a routine other than its AddDevice routine.
</p><h2>MSDN Documentation</h2>
<p><a href="https://docs.microsoft.com/en-us/windows-hardware/drivers/devtest/28133-ioinitializetimer-is-best-called-from-add-device" target="_blank">https://docs.microsoft.com/en-us/windows-hardware/drivers/devtest/28133-ioinitializetimer-is-best-called-from-add-device</a></p>
]]>
    </description>
    <internalKey>C28133</internalKey>
    <severity>INFO</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C28134</key>
    <name>C28134: The type of a pool tag should be integral, not a string or string pointer</name>
    <description><![CDATA[<p>
The driver is calling a function that assigns a pool tag, such as ExAllocatePoolWithTag, but it is using a value other than a literal in single quotation marks to specify the value of the pool tag. Do not use a quoted string in a pool tag.
</p><h2>MSDN Documentation</h2>
<p><a href="https://docs.microsoft.com/en-us/windows-hardware/drivers/devtest/28134-pool-tag-type-should-be-integral" target="_blank">https://docs.microsoft.com/en-us/windows-hardware/drivers/devtest/28134-pool-tag-type-should-be-integral</a></p>
]]>
    </description>
    <internalKey>C28134</internalKey>
    <severity>INFO</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C28135</key>
    <name>C28135: If the first argument to KeWaitForSingleObject is a local variable, the Mode parameter must be KernelMode</name>
    <description><![CDATA[<p>
The driver is waiting in user mode. As such, the kernel stack can be swapped out during the wait. If the driver attempts to pass parameters on the stack, a system crash can result.
</p><h2>MSDN Documentation</h2>
<p><a href="https://docs.microsoft.com/en-us/windows-hardware/drivers/devtest/28135-first-argument-to-kewaitforsingleobject" target="_blank">https://docs.microsoft.com/en-us/windows-hardware/drivers/devtest/28135-first-argument-to-kewaitforsingleobject</a></p>
]]>
    </description>
    <internalKey>C28135</internalKey>
    <severity>INFO</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C28137</key>
    <name>C28137: The variable argument should instead be a (literal) constant</name>
    <description><![CDATA[<p>
This warning is reported when a function call is missing a required (literal) constant. Consult the documentation for the function.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/34420007-6a73-4f09-bdf7-8d923eef9654(VS.110).aspx" target="_blank">https://msdn.microsoft.com/en-us/library/34420007-6a73-4f09-bdf7-8d923eef9654(VS.110).aspx</a></p>
]]>
    </description>
    <internalKey>C28137</internalKey>
    <severity>INFO</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C28138</key>
    <name>C28138: The constant argument should instead be variable</name>
    <description><![CDATA[<p>
This warning is reported in a function call that expects a variable or a non-constant expression, but the call includes a constant. For information about the function and its parameter, consult the WDK documentation of the function.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/hh691807.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/hh691807.aspx</a></p>
]]>
    </description>
    <internalKey>C28138</internalKey>
    <severity>INFO</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C28141</key>
    <name>C28141: The argument causes the IRQ Level to be set below the current IRQL, and this function cannot be used for that purpose</name>
    <description><![CDATA[<p>
A function call that lowers the IRQL at which a caller is executing is being used inappropriately.
</p><h2>Microsoft Documentation</h2>
<p><a href="https://docs.microsoft.com/en-us/windows-hardware/drivers/devtest/28141-argument-lowers-irq-level" target="_blank">https://docs.microsoft.com/en-us/windows-hardware/drivers/devtest/28141-argument-lowers-irq-level</a></p>
]]>
    </description>
    <internalKey>C28141</internalKey>
    <severity>INFO</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C28143</key>
    <name>C28143: A dispatch routine that calls IoMarkIrpPending must also return STATUS_PENDING</name>
    <description><![CDATA[<p>
A dispatch routine that calls IoMarkIrpPending includes at least one path in which the driver returns a value other than STATUS_PENDING.
</p><h2>Microsoft Documentation</h2>
<p><a href="https://docs.microsoft.com/en-us/windows-hardware/drivers/devtest/28143-iomarkirppending-must-return-statuspending" target="_blank">https://docs.microsoft.com/en-us/windows-hardware/drivers/devtest/28143-iomarkirppending-must-return-statuspending</a></p>
]]>
    </description>
    <internalKey>C28143</internalKey>
    <severity>INFO</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
    <rule>
    <key>C28144</key>
    <name>C28144: Within a cancel routine, at the point of exit, the IRQL in Irp-&gt;CancelIrql should be the current IRQL</name>
    <description><![CDATA[<p>
Within a cancel routine, at the point of exit, the IRQL in Irp->CancelIrql should be the current IRQL.
</p><h2>Microsoft Documentation</h2>
<p><a href="https://docs.microsoft.com/en-us/windows-hardware/drivers/devtest/28144-cancelirql-should-be-current-irql" target="_blank">https://docs.microsoft.com/en-us/windows-hardware/drivers/devtest/28144-cancelirql-should-be-current-irql</a></p>
]]>
    </description>
    <internalKey>C28144</internalKey>
    <severity>INFO</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
    <rule>
    <key>C28145</key>
    <name>C28145: The opaque MDL structure should not be modified by a driver</name>
    <description><![CDATA[<p>
The driver code is changing a member of an MDL structure.
</p><h2>Microsoft Documentation</h2>
<p><a href="https://docs.microsoft.com/en-us/windows-hardware/drivers/devtest/28145-opaque-mdl-structure-should-not-be-modified" target="_blank">https://docs.microsoft.com/en-us/windows-hardware/drivers/devtest/28145-opaque-mdl-structure-should-not-be-modified</a></p>
]]>
    </description>
    <internalKey>C28145</internalKey>
    <severity>INFO</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
    <rule>
    <key>C28146</key>
    <name>C28146: Kernel mode drivers should use ntstrsafe.h instead of strsafe.h</name>
    <description><![CDATA[<p>
For information about Ntstrsafe.h and Strsafe.h, see Using Safe String Functions.
</p><h2>Microsoft Documentation</h2>
<p><a href="https://docs.microsoft.com/en-us/windows-hardware/drivers/devtest/28146-kernel-mode-drivers-should-use-ntstrsafe" target="_blank">https://docs.microsoft.com/en-us/windows-hardware/drivers/devtest/28146-kernel-mode-drivers-should-use-ntstrsafe</a></p>
]]>
    </description>
    <internalKey>C28146</internalKey>
    <severity>INFO</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C28147</key>
    <name>C28147: The use of a default pool tag (' kdD' or ' mdW') for calls to this function defeats the purpose of pool tagging</name>
    <description><![CDATA[<p>
The driver is specifying a default pool tag.
</p><h2>Microsoft Documentation</h2>
<p><a href="https://docs.microsoft.com/en-us/windows-hardware/drivers/devtest/28147-improper-use-of-default-pool-tag" target="_blank">https://docs.microsoft.com/en-us/windows-hardware/drivers/devtest/28147-improper-use-of-default-pool-tag</a></p>
]]>
    </description>
    <internalKey>C28147</internalKey>
    <severity>INFO</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C28150</key>
    <name>C28150: The function causes the IRQ Level to be set above the maximum acceptable for the function being analyzed</name>
    <description><![CDATA[<p>
The specified function has raised the IRQL above the maximum IRQL permitted for the current function call.
</p><h2>Microsoft Documentation</h2>
<p><a href="https://docs.microsoft.com/en-us/windows-hardware/drivers/devtest/28150-function-causes-irq-level-to-be-set-above-max" target="_blank">https://docs.microsoft.com/en-us/windows-hardware/drivers/devtest/28150-function-causes-irq-level-to-be-set-above-max</a></p>
]]>
    </description>
    <internalKey>C28150</internalKey>
    <severity>INFO</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C28151</key>
    <name>C28151: The value is not a legal value for an IRQL</name>
    <description><![CDATA[<p>
The IRQL is not within the range of valid values for an IRQL (0-31).
</p><h2>Microsoft Documentation</h2>
<p><a href="https://docs.microsoft.com/en-us/windows-hardware/drivers/devtest/28151-illegal-irql-value" target="_blank">https://docs.microsoft.com/en-us/windows-hardware/drivers/devtest/28151-illegal-irql-value</a></p>
]]>
    </description>
    <internalKey>C28151</internalKey>
    <severity>INFO</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C28152</key>
    <name>C28152: The return from an AddDevice-like function unexpectedly DO_DEVICE_INITIALIZING</name>
    <description><![CDATA[<p>
The driver has returned from its AddDevice routine, or a similar utility routine, but the DO_DEVICE_INITIALIZING bit of the Flags word (DeviceObject->Flags) in the DeviceObject routine is not cleared.
</p><h2>Microsoft Documentation</h2>
<p><a href="https://docs.microsoft.com/en-us/windows-hardware/drivers/devtest/28152-do-device-initializing-flag-not-cleared" target="_blank">https://docs.microsoft.com/en-us/windows-hardware/drivers/devtest/28152-do-device-initializing-flag-not-cleared</a></p>
]]>
    </description>
    <internalKey>C28152</internalKey>
    <severity>INFO</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C28153</key>
    <name>C28153: The value for an IRQL from annotation could not be evaluated in this context</name>
    <description><![CDATA[<p>
This warning indicates that the Code Analysis tool cannot interpret the function annotation because the annotation is not coded correctly.
</p><h2>Microsoft Documentation</h2>
<p><a href="https://docs.microsoft.com/en-us/windows-hardware/drivers/devtest/28153-irql-annotation-eval-context" target="_blank">https://docs.microsoft.com/en-us/windows-hardware/drivers/devtest/28153-irql-annotation-eval-context</a></p>
]]>
    </description>
    <internalKey>C28153</internalKey>
    <severity>INFO</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C28156</key>
    <name>C28156: The actual IRQL is inconsistent with the required IRQL</name>
    <description><![CDATA[<p>
An _IRQL_requires_ annotation specifies that the driver should be executing at a particular IRQL when the function completes, but there is at least one path in which the driver is executing at a different IRQL when the function completes.
</p><h2>Microsoft Documentation</h2>
<p><a href="https://docs.microsoft.com/en-us/windows-hardware/drivers/devtest/28156-irql-inconsistent-with-required-irq-value" target="_blank">https://docs.microsoft.com/en-us/windows-hardware/drivers/devtest/28156-irql-inconsistent-with-required-irq-value</a></p>
]]>
    </description>
    <internalKey>C28156</internalKey>
    <severity>INFO</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C28157</key>
    <name>C28157: The IRQL was never restored</name>
    <description><![CDATA[<p>
The current function has a _IRQL_restores_ annotation, which requires that when it completes, the driver should be executing at an IRQL that was restored from a previous IRQL value.
</p><h2>Microsoft Documentation</h2>
<p><a href="https://docs.microsoft.com/en-us/windows-hardware/drivers/devtest/28157-function-irql-never-restored" target="_blank">https://docs.microsoft.com/en-us/windows-hardware/drivers/devtest/28157-function-irql-never-restored</a></p>
]]>
    </description>
    <internalKey>C28157</internalKey>
    <severity>INFO</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C28158</key>
    <name>C28158: No IRQL was saved</name>
    <description><![CDATA[<p>
A _IRQL_saves_ annotation specifies that the current function will save an IRQL value in the specified variable, but there is at least one path in which the IRQL value is not saved in that variable.
</p><h2>Microsoft Documentation</h2>
<p><a href="https://docs.microsoft.com/en-us/windows-hardware/drivers/devtest/28158-no-irql-was-saved" target="_blank">https://docs.microsoft.com/en-us/windows-hardware/drivers/devtest/28158-no-irql-was-saved</a></p>
]]>
    </description>
    <internalKey>C28158</internalKey>
    <severity>INFO</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C28159</key>
    <name>C28159: Consider using another function instead</name>
    <description><![CDATA[<p>
This warning is reported for Drivers is suggesting that you use a preferred function call that is semantically equivalent to the function that the driver is calling. This is a general warning message; the annotation __drv_preferredFunction was used (possibly with a conditional a __drv_when() annotation) to flag a bad coding practice.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/hh698482.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/hh698482.aspx</a></p>
]]>
    </description>
    <internalKey>C28159</internalKey>
    <severity>INFO</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C28160</key>
    <name>C28160: Error annotation</name>
    <description><![CDATA[<p>
This warning is reported when a __drv_error annotation has been encountered. This annotation is used to flag coding practices that should be fixed, and can be used with a __drv_when annotation to indicate specific combinations of parameters.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/hh698480.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/hh698480.aspx</a></p>
]]>
    </description>
    <internalKey>C28160</internalKey>
    <severity>INFO</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C28161</key>
    <name>C28161: Exiting without acquiring the right to use floating hardware</name>
    <description><![CDATA[<p>
The _Kernel_float_saved_ annotation was used to acquire the right to use floating point, but a path through the function was detected where no function known to perform that operation was successfully called.
</p><h2>Microsoft Documentation</h2>
<p><a href="https://docs.microsoft.com/en-us/windows-hardware/drivers/devtest/28161-exiting-without-right-to-use-floating-hardware" target="_blank">https://docs.microsoft.com/en-us/windows-hardware/drivers/devtest/28161-exiting-without-right-to-use-floating-hardwared</a></p>
]]>
    </description>
    <internalKey>C28161</internalKey>
    <severity>INFO</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C28162</key>
    <name>C28162: Exiting while holding the right to use floating-point hardware</name>
    <description><![CDATA[<p>
The _Kernel_float_restored_ annotation was used to release the right to use floating point, but a path through the function was detected where no function known to perform that operation was successfully called.
</p><h2>Microsoft Documentation</h2>
<p><a href="https://docs.microsoft.com/en-us/windows-hardware/drivers/devtest/28162-exiting-while-holding-right-to-use-floating-hardware" target="_blank">https://docs.microsoft.com/en-us/windows-hardware/drivers/devtest/28162-exiting-while-holding-right-to-use-floating-hardware</a></p>
]]>
    </description>
    <internalKey>C28162</internalKey>
    <severity>INFO</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C28163</key>
    <name>C28163: The function should never be called from within a try/except block</name>
    <description><![CDATA[<p>
      This warning is reported when a function is of a type that should never be enclosed in a try/except block is found in a try/except block. The code analysis tool found at least one path in which the function called was within a try/except block.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/hh698478.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/hh698478.aspx</a></p>
]]>
    </description>
    <internalKey>C28163</internalKey>
    <severity>INFO</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C28164</key>
    <name>C28164: The argument is being passed to a function that expects a pointer to an object (not a pointer to a pointer)</name>
    <description><![CDATA[<p>
This warning is reported when a pointer to a pointer is used in a call to a function that is expecting a pointer to an object.
The function takes a PVOID in this position. Usually, this indicates that &amp;pXXX was used when pXXX is required.
Some polymorphic functions (functions that can evaluate to, and be applied to, values of different types) are implemented in C by using a PVOID argument that takes any pointer type. However, this allows the programmer to code a pointer to a pointer without causing a compiler error, even when this type is not appropriate.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/hh698477.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/hh698477.aspx</a></p>
]]>
    </description>
    <internalKey>C28164</internalKey>
    <severity>INFO</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C28165</key>
    <name>C28165: The function pointer of class does not match the function class</name>
    <description><![CDATA[<p>
A function pointer has a __drv_functionClass annotation that specifies that only functions of a particular functional class should be assigned to it.
</p><h2>Microsoft Documentation</h2>
<p><a href="https://docs.microsoft.com/en-us/windows-hardware/drivers/devtest/28165-class-function-pointer-mismatch" target="_blank">https://docs.microsoft.com/en-us/windows-hardware/drivers/devtest/28165-class-function-pointer-mismatch</a></p>
]]>
    </description>
    <internalKey>C28165</internalKey>
    <severity>INFO</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C28166</key>
    <name>C28166: The function does not restore the IRQL to the value that was current at function entry and is required to do so</name>
    <description><![CDATA[<p>
This warning indicates that a function has the _IRQL_requires_same_ annotation and there is at least one path through the function that does not.
</p><h2>Microsoft Documentation</h2>
<p><a href="https://docs.microsoft.com/en-us/windows-hardware/drivers/devtest/28166-function-does-not-restore-irql-value" target="_blank">https://docs.microsoft.com/en-us/windows-hardware/drivers/devtest/28166-function-does-not-restore-irql-value</a></p>
]]>
    </description>
    <internalKey>C28166</internalKey>
    <severity>INFO</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C28167</key>
    <name>C28167: Changed IRQ is not restored before function exit</name>
    <description><![CDATA[<p>
The function changes the IRQL and does not restore the IRQL before it exits. It should be annotated to reflect the change or the IRQL should be restored.
</p><h2>Microsoft Documentation</h2>
<p><a href="https://docs.microsoft.com/en-us/windows-hardware/drivers/devtest/28167-function-changes-irql-without-restore" target="_blank">https://docs.microsoft.com/en-us/windows-hardware/drivers/devtest/28167-function-changes-irql-without-restore</a></p>
]]>
    </description>
    <internalKey>C28167</internalKey>
    <severity>INFO</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C28168</key>
    <name>C28168: The dispatch function does not have a _Dispatch_type_ annotation matching this dispatch table entry</name>
    <description><![CDATA[<p>
This warning supports Static Driver Verifier by checking that each function assigned into the dispatch table is annotated with one or more _Dispatch_type_ annotations.
</p><h2>Microsoft Documentation</h2>
<p><a href="https://docs.microsoft.com/en-us/windows-hardware/drivers/devtest/28168-dispatch-function-dispatch-annotation" target="_blank">https://docs.microsoft.com/en-us/windows-hardware/drivers/devtest/28168-dispatch-function-dispatch-annotation</a></p>
]]>
    </description>
    <internalKey>C28168</internalKey>
    <severity>INFO</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C28169</key>
    <name>C28169: The dispatch function does not have any _Dispatch_type_ annotations</name>
    <description><![CDATA[<p>
The warning can sometimes occur if the right-hand side has a cast that strips off the _Dispatch_type_ annotation.
</p><h2>Microsoft Documentation</h2>
<p><a href="https://docs.microsoft.com/en-us/windows-hardware/drivers/devtest/28169-dispatch-function-does-not-have-proper-annotation" target="_blank">https://docs.microsoft.com/en-us/windows-hardware/drivers/devtest/28169-dispatch-function-does-not-have-proper-annotation</a></p>
]]>
    </description>
    <internalKey>C28169</internalKey>
    <severity>INFO</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C28170</key>
    <name>C28170: The function has been declared to be in a paged segment, but neither PAGED_CODE nor PAGED_CODE_LOCKED was found</name>
    <description><![CDATA[<p>
The Code Analysis tool reports this error when #pragma alloc_text or #pragma code_seg is used to move a function that does not contain a PAGED_CODE or PAGED_CODE_LOCKED macro into a pageable code section.
</p><h2>Microsoft Documentation</h2>
<p><a href="https://docs.microsoft.com/en-us/windows-hardware/drivers/devtest/28170-pageable-code-macro-not-found" target="_blank">https://docs.microsoft.com/en-us/windows-hardware/drivers/devtest/28170-pageable-code-macro-not-found</a></p>
]]>
    </description>
    <internalKey>C28170</internalKey>
    <severity>INFO</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C28171</key>
    <name>C28171: The function has more than one instance of PAGED_CODE or PAGED_CODE_LOCKED</name>
    <description><![CDATA[<p>
This warning indicates that there is more than one instance of the PAGED_CODE or PAGED_CODE_LOCKED macro in a function.
</p><h2>Microsoft Documentation</h2>
<p><a href="https://docs.microsoft.com/en-us/windows-hardware/drivers/devtest/28171-function-has-more-than-one-page-macro-instance" target="_blank">https://docs.microsoft.com/en-us/windows-hardware/drivers/devtest/28171-function-has-more-than-one-page-macro-instance</a></p>
]]>
    </description>
    <internalKey>C28171</internalKey>
    <severity>INFO</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C28172</key>
    <name>C28172: The function has PAGED_CODE or PAGED_CODE_LOCKED but is not declared to be in a paged segment</name>
    <description><![CDATA[<p>
A function that contains a PAGED_CODE or PAGED_CODE_LOCKED macro has not been placed in paged memory by using #pragma alloc_text or #pragma code_seg.
</p><h2>Microsoft Documentation</h2>
<p><a href="https://docs.microsoft.com/en-us/windows-hardware/drivers/devtest/28172-function-macros-not-in-paged-segment" target="_blank">https://docs.microsoft.com/en-us/windows-hardware/drivers/devtest/28172-function-macros-not-in-paged-segment</a></p>
]]>
    </description>
    <internalKey>C28172</internalKey>
    <severity>INFO</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C28173</key>
    <name>C28173: The current function appears to incorrectly adapt to physical memory above 4 GB</name>
    <description><![CDATA[<p>
On systems that have more than 4 GB of memory, the IoGetDmaAdapter function might return fewer map registers than requested; this becomes more likely when the value requested becomes large (approaching 64).
</p><h2>Microsoft Documentation</h2>
<p><a href="https://docs.microsoft.com/en-us/windows-hardware/drivers/devtest/28173-function-incorrectly-adapts-to-memory-above-4gb" target="_blank">https://docs.microsoft.com/en-us/windows-hardware/drivers/devtest/28173-function-incorrectly-adapts-to-memory-above-4gb</a></p>
]]>
    </description>
    <internalKey>C28173</internalKey>
    <severity>INFO</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C28175</key>
    <name>C28175: The member of struct should not be accessed by a driver</name>
    <description><![CDATA[<p>
This warning indicates that a driver accessed an undocumented structure member that drivers should never access.
</p><h2>Microsoft Documentation</h2>
<p><a href="https://docs.microsoft.com/en-us/windows-hardware/drivers/devtest/28175struct-member-should-not-be-accessed-by-driver" target="_blank">https://docs.microsoft.com/en-us/windows-hardware/drivers/devtest/28175struct-member-should-not-be-accessed-by-driver</a></p>
]]>
    </description>
    <internalKey>C28175</internalKey>
    <severity>INFO</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C28176</key>
    <name>C28176: The member of struct should not be accessed by a driver</name>
    <description><![CDATA[<p>
This warning indicates that a driver accessed an undocumented structure member that drivers should never access.
</p><h2>Microsoft Documentation</h2>
<p><a href="https://docs.microsoft.com/en-us/windows-hardware/drivers/devtest/28175struct-member-should-not-be-accessed-by-driver" target="_blank">https://docs.microsoft.com/en-us/windows-hardware/drivers/devtest/28175struct-member-should-not-be-accessed-by-driver</a></p>
]]>
    </description>
    <internalKey>C28176</internalKey>
    <severity>INFO</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>

  <rule>
    <key>C28182</key>
    <name>C28182: Dereferencing NULL pointer</name>
    <description><![CDATA[<p>
Additional information: &lt;pointer1&gt; contains the same NULL value as &lt;pointer2&gt; did &lt;note&gt;
The code analysis tool reports this warning when it confirms that the pointer can be NULL. If there are unconfirmed instances where the error might occur earlier in the trace, the code analysis tool adds the line number of the first instance to the warning message so that you can change the code to address all instances.
&lt;pointer2&gt; is confirmed to be potentially NULL. &lt;pointer1&gt; contains the same value as pointer2 and is being dereferenced. Because these pointers may be at very different places in the code, both are reported so that you can determine why the code analysis tool is reporting this warning.
If an unconfirmed earlier instance of the condition exists, then &lt;note&gt; is replaced by this text: &quot;See line &lt;number&gt; for an earlier location where this can occur.&quot;
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/hh329451.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/hh329451.aspx</a></p>
]]>
    </description>
    <internalKey>C28182</internalKey>
    <severity>INFO</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C28183</key>
    <name>C28183: The argument could be one value, and is a copy of the value found in the pointer</name>
    <description><![CDATA[<p>
This warning indicates that this value is unexpected in the current context. This warning usually appears when a NULL value is passed as an argument to a function that does not permit it. The value was actually found in the specified variable, and the argument is a copy of that variable.
The Code Analysis tool reports this warning at the first point where it can definitively determine that the pointer is NULL or that it contains an illegal value. However, it is often the case that the error could actually occur earlier in the trace. When this happens, the Code Analysis tool will also give the line number of the first possible instance -- usually at a location where it could not definitively determine that the warning was appropriate. In those cases, the earlier location where this can occur is appended to the warning message. Typically, a code change should occur at or before that line number, rather than at the point of report.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/hh704260.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/hh704260.aspx</a></p>
]]>
    </description>
    <internalKey>C28183</internalKey>
    <severity>INFO</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C28193</key>
    <name>C28193: The variable holds a value that must be examined</name>
    <description><![CDATA[<p>
This warning indicates that the calling function is not checking the value of the specified variable, which was supplied by a function. The returned value is annotated with the _Check_return_ annotation, but the calling function is either not using the value or is overwriting the value without examining it.
This warning is similar to C6031, but it is reported only when the code does not test or examine the value of the variable, such as by using it in a comparison. Simply assigning the value is not considered to be a sufficient examination to avoid this warning. Aliasing the result out of the function is considered a sufficient examination, but the result itself should be annotated with _Check_return_.
Certain functions (such as strlen) exist almost exclusively for their return value, so it makes sense for them to have the _Check_return_ annotation. For these functions, the Code Analysis tool might report this warning when the return value is unused. This usually indicates that the code is incorrect, for example, it might contain residual code that could be deleted. However, in some rare instances, the return value is intentionally not used. The most common of these instances is where a string length is returned but not actually used before some other test is made. That other test causes a path to be simulated where the string length ends up being unused. When this happens, the code can be correct, but it might be inefficient.
There are two primary strategies for dealing with these cases where the return value is unused:
Reorder the code so that the string length is only returned along the path where it is needed.
Use a #pragma warning to suppress the warning--if by reordering the code, you would make the code too complex or otherwise less useful.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/hh707947.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/hh707947.aspx</a></p>
]]>
    </description>
    <internalKey>C28193</internalKey>
    <severity>INFO</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C28194</key>
    <name>C28194: The function was declared as aliasing the value in variable and exited without doing so</name>
    <description><![CDATA[<p>
This warning indicates that the function prototype for the function being analyzed has a __drv_isAliased annotation, which indicates that it will alias the specified argument (that is, assign the value in a way that it will survive returning from the function). However, the function does not alias the argument along the path that is indicated by the annotation. Most functions that alias a variable save its value to a global data structure.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/hh707948.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/hh707948.aspx</a></p>
]]>
    </description>
    <internalKey>C28194</internalKey>
    <severity>INFO</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C28195</key>
    <name>C28195: The function was declared as acquiring memory in a variable and exited without doing so</name>
    <description><![CDATA[<p>
This warning indicates that the function prototype for the function being analyzed has a __drv_acquiresMemory annotation. The __drv_acquiresMemory annotation indicates that the function acquires memory in the designated result location, but in at least one path, the function did not acquire the memory. Note that the Code Analysis tool will not recognize the actual implementation of a memory allocator (involving address arithmetic) and will not recognize that memory is allocated (although many wrappers will be recognized). In this case, the Code Analysis tool does not recognize that the memory was allocated and issues this warning. To suppress the false positive, use a #pragma warning on the line that precedes the opening brace { of the function body
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/hh707951.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/hh707951.aspx</a></p>
]]>
    </description>
    <internalKey>C28195</internalKey>
    <severity>INFO</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C28196</key>
    <name>C28196: The requirement is not satisfied. (The expression does not evaluate to true.)</name>
    <description><![CDATA[<p>
This warning indicates that the function prototype for the function being analyzed has a __notnull, __null or __drv_valueIs on an _Out_ parameter or the return value, but the value returned is inconsistent with that annotation.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/hh707950.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/hh707950.aspx</a></p>
]]>
    </description>
    <internalKey>C28196</internalKey>
    <severity>INFO</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C28197</key>
    <name>C28197: Possibly leaking memory</name>
    <description><![CDATA[<p>
This warning is reported for both memory and resource leaks when the resource is potentially aliased to another location.
The pointer points to allocated memory or to another allocated resource that was not explicitly freed. This warning is usually due to inadequate annotations on the called function, although inadequate annotations on the calling function can also make this more likely.
This Can be reported on function exit if an input argument has a __drv_freesMem or __drv_aliasesMem annotation. This warning typically indicates either a valid leak or that a function called by the current function needs additional annotation.
In particular, the absence of the basic _In_ and _Out_ annotations make this warning fairly likely, although the __drv_aliasesMem and __drv_freesMem annotations might be needed as well. A false positive is a likely result of a missing _In_ annotation.
Functions that take a pointer and alias it (thus avoiding a leak) should be annotated with __drv_aliasesMem. If you create a function that inserts an object into a global structure, or passes it to a system function that does that, you should add the __drv_aliasesMem annotation.
Functions that free memory should be annotated with __drv_freesMem. The major functions that free memory already have this annotation.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/hh708920.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/hh708920.aspx</a></p>
]]>
    </description>
    <internalKey>C28197</internalKey>
    <severity>INFO</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C28198</key>
    <name>C28198: Possibly leaking memory due to an exception</name>
    <description><![CDATA[<p>
This warning indicates that allocated memory is not being freed after an exception is raised. The statement at the end of the path can raise an exception. The memory was passed to a function that might have saved a copy to be freed later.
This warning is very similar to C28197. The annotations that are recommended for use with C28197 can also be used here.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/hh708918.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/hh708918.aspx</a></p>
]]>
    </description>
    <internalKey>C28198</internalKey>
    <severity>INFO</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C28199</key>
    <name>C28199: Using possibly uninitialized memory</name>
    <description><![CDATA[<p>
This message indicates that the variable has had its address taken but no assignment to it has been discovered.
The specified variable is being used without being explicitly initialized, but at some point its address was taken, indicating that it might be initialized invisibly to the Code Analysis tool.
This Can be mistaken if the variable is initialized outside of the function.
The Code Analysis tool reports this warning on function exit if a parameter has an _Out_ or _Inout_ annotation and the variable is not initialized.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/hh708919.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/hh708919.aspx</a></p>
]]>
    </description>
    <internalKey>C28199</internalKey>
    <severity>INFO</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C28202</key>
    <name>C28202: Illegal reference to non-static member</name>
    <description><![CDATA[<p>
This warning is reported when there is an error in the annotations.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/hh532107.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/hh532107.aspx</a></p>
]]>
    </description>
    <internalKey>C28202</internalKey>
    <severity>INFO</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C28203</key>
    <name>C28203: Ambiguous reference to class member. Could be &lt;name1&gt; or &lt;name2&gt;</name>
    <description><![CDATA[<p>
This warning is reported when there is an error in the annotations.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/hh442991.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/hh442991.aspx</a></p>
]]>
    </description>
    <internalKey>C28203</internalKey>
    <severity>INFO</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C28204</key>
    <name>C28204: &lt;function&gt; : Only one of this overload and the one at &lt;filename&gt;(&lt;line&gt;) are annotated for &lt;paramname&gt;: both or neither must be annotated</name>
    <description><![CDATA[<p>
This warning is reported when there is an error in the annotations.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/hh443028.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/hh443028.aspx</a></p>
]]>
    </description>
    <internalKey>C28204</internalKey>
    <severity>INFO</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C28205</key>
    <name>C28205: function&gt; : _Success_ or _On_failure_ used in an illegal context: &lt;why&gt;</name>
    <description><![CDATA[<p>
This warning is reported when there is an error in the annotations.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/hh443003.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/hh443003.aspx</a></p>
]]>
    </description>
    <internalKey>C28205</internalKey>
    <severity>INFO</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C28206</key>
    <name>C28206: &lt;expression&gt; : left operand points to a struct, use -&gt;</name>
    <description><![CDATA[<p>
This warning is reported when the struct pointer dereference notation -&gt; was expected.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/hh442993.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/hh442993.aspx</a></p>
]]>
    </description>
    <internalKey>C28206</internalKey>
    <severity>INFO</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C28207</key>
    <name>C28207: &lt;expression&gt;: left operand is a struct, use </name>
    <description><![CDATA[<p>
This warning is reported when a struct dereference dot (.) was expected.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/hh442988.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/hh442988.aspx</a></p>
]]>
    </description>
    <internalKey>C28207</internalKey>
    <severity>INFO</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C28208</key>
    <name>C28208: Function &lt;function&gt; was previously defined with a different parameter list at &lt;file&gt;(&lt;line&gt;). Some analysis tools will yield incorrect results</name>
    <description><![CDATA[<p>
This warning is reported when a function's known definition doesn't match another occurrence.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/hh443029.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/hh443029.aspx</a></p>
]]>
    </description>
    <internalKey>C28208</internalKey>
    <severity>INFO</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C28209</key>
    <name>C28209: The declaration for symbol has a conflicting declaration</name>
    <description><![CDATA[<p>
This warning indicates an incorrectly constructed annotation declaration. This warning should never occur in normal use.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/hh708917.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/hh708917.aspx</a></p>
]]>
    </description>
    <internalKey>C28209</internalKey>
    <severity>INFO</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C28210</key>
    <name>C28210: Annotations for the _On_failure_ context must not be in explicit pre context</name>
    <description><![CDATA[<p>
 Annotations _On_failure_ must be explicitly or implicitly indicated in __post context, that is, to be applied after the function returns. Use _drv_out to ensure this.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/hh709826.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/hh709826.aspx</a></p>
]]>
    </description>
    <internalKey>C28210</internalKey>
    <severity>INFO</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C28211</key>
    <name>C28211: Static context name expected for SAL_context</name>
    <description><![CDATA[<p>
This warning indicates that the operand to the _Static_context_ annotation must be the name of a tool-defined context. This warning should never occur in normal use.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/hh709838.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/hh709838.aspx</a></p>
]]> 
    </description>
    <internalKey>C28211</internalKey>
    <severity>INFO</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C28212</key>
    <name>C28212: Pointer expression expected for annotation</name>
    <description><![CDATA[<p>
This warning indicates that the numbered parameter to an annotation (not the function being annotated) is expected to be a pointer or array type, but some other type was encountered. The annotation needs to be corrected.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/hh709830.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/hh709830.aspx</a></p>
]]>
    </description>
    <internalKey>C28212</internalKey>
    <severity>INFO</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C28213</key>
    <name>C28213: The _Use_decl_annotations_ annotation must be used to reference, without modification, a prior declaration. &lt;why&gt;</name>
    <description><![CDATA[<p>
This warning is reported when a prior declaration is referenced without the required _Use_decl_annotations_ annotation.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/hh443027.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/hh443027.aspx</a></p>
]]>
    </description>
    <internalKey>C28213</internalKey>
    <severity>INFO</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C28214</key>
    <name>C28214: Attribute parameter names must be p1...p9</name>
    <description><![CDATA[<p>
This warning indicates that when you construct an annotation declaration, the parameter names are limited to p1...p9. This warning should never occur in normal use.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/hh709841.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/hh709841.aspx</a></p>
]]>
    </description>
    <internalKey>C28214</internalKey>
    <severity>INFO</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C28215</key>
    <name>C28215: The typefix cannot be applied to a parameter that already has a typefix</name>
    <description><![CDATA[<p>
Applying a __typefix annotation to a parameter that already has that annotation is an error. The __typefix annotations are used only in a few special cases and this warning is not expected to be seen in normal use.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/hh709817.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/hh709817.aspx</a></p>
]]>
    </description>
    <internalKey>C28215</internalKey>
    <severity>INFO</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C28216</key>
    <name>C28216: The _Check_return_ annotation only applies to post-conditions for the specific function parameter</name>
    <description><![CDATA[<p>
The _Check_return_ annotation has been applied in a context other than __post; it may need a __post (or __drv_out) modifier, or it may be placed incorrectly.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/hh709821.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/hh709821.aspx</a></p>
]]>
    </description>
    <internalKey>C28216</internalKey>
    <severity>INFO</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C28217</key>
    <name>C28217: For function, the number of parameters to annotation does not match that found at file</name>
    <description><![CDATA[<p>
The annotations on the current line and on the line in the message are inconsistent. This should not be possible if the standard macros are being used for annotations; this warning is not expected to be seen in normal use.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/hh709828.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/hh709828.aspx</a></p>
]]>
    </description>
    <internalKey>C28217</internalKey>
    <severity>INFO</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C28218</key>
    <name>C28218: For function parameter, the annotation's parameter does not match that found at file</name>
    <description><![CDATA[<p>
The annotations on the current line and on the line in the message are inconsistent. This should not be possible if the standard macros are being used for annotations; this warning is not expected to be seen in normal use.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/hh709813.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/hh709813.aspx</a></p>
]]>
    </description>
    <internalKey>C28218</internalKey>
    <severity>INFO</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C28219</key>
    <name>C28219: Member of enumeration expected for annotation the parameter in the annotation</name>
    <description><![CDATA[<p>
A parameter to an annotation is expected to be a member of the named enum type, and some other symbol was encountered; use a member of that enum type. This usually indicates an incorrectly coded annotation macro.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/hh709843.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/hh709843.aspx</a></p>
]]>
    </description>
    <internalKey>C28219</internalKey>
    <severity>INFO</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C28220</key>
    <name>C28220: Integer expression expected for annotation the parameter in the annotation</name>
    <description><![CDATA[<p>
This warning indicates that a parameter to an annotation is expected to be an integer expression, and some other type was encountered. This usually indicates an incorrectly coded annotation macro.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/hh709825.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/hh709825.aspx</a></p>
]]>
    </description>
    <internalKey>C28220</internalKey>
    <severity>INFO</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C28221</key>
    <name>C28221: String expression expected for the parameter in the annotation</name>
    <description><![CDATA[<p>
      This warning indicates that a parameter to an annotation is expected to be a string, and some other type was encountered. This usually indicates an incorrectly coded annotation macro and is not expected to be seen in normal use.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/hh709807.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/hh709807.aspx</a></p>
]]>
    </description>
    <internalKey>C28221</internalKey>
    <severity>INFO</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C28222</key>
    <name>C28222: _Yes_, _No_, or _Maybe_ expected for annotation</name>
    <description><![CDATA[<p>
This warning indicates that a parameter to an annotation is expected to be one of the symbols _Yes_, _No_, or _Maybe_, and some other symbol was encountered. This usually indicates an incorrectly coded annotation macro.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/hh709809.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/hh709809.aspx</a></p>
]]>
    </description>
    <internalKey>C28222</internalKey>
    <severity>INFO</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C28223</key>
    <name>C28223: Did not find expected Token/identifier for annotation, parameter</name>
    <description><![CDATA[<p>
This warning indicates that a parameter to an annotation is expected to be an identifier, and some other symbol was encountered. This usually indicates an incorrectly coded annotation macro. The use of C or C++ keywords in this position will cause this error.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/hh709818.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/hh709818.aspx</a></p>
]]>
    </description>
    <internalKey>C28223</internalKey>
    <severity>INFO</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C28224</key>
    <name>C28224: Annotation requires parameters</name>
    <description><![CDATA[<p>
This warning indicates that the named annotation is used without parameters and at least one parameter is required. This should not be possible if the standard macros are being used for annotations; this warning is not expected to be seen in normal use.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/hh709815.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/hh709815.aspx</a></p>
]]>
    </description>
    <internalKey>C28224</internalKey>
    <severity>INFO</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C28225</key>
    <name>C28225: Did not find the correct number of required parameters in annotation</name>
    <description><![CDATA[<p>
This warning indicates that the named annotation is used with the incorrect number of parameters. This should not be possible if the standard macros are being used for annotations; this warning is not expected to be seen in typical use.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/hh709831.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/hh709831.aspx</a></p>
]]>
    </description>
    <internalKey>C28225</internalKey>
    <severity>INFO</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C28226</key>
    <name>C28226: Annotation cannot also be a PrimOp (in current declaration)</name>
    <description><![CDATA[<p>
This warning indicates that the named annotation is being declared as a PrimOp, and also was previously declared as a normal annotation. This should not be possible if the standard macros are being used for annotations; this warning is not expected to be seen in normal use.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/hh709811.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/hh709811.aspx</a></p>
]]>
    </description>
    <internalKey>C28226</internalKey>
    <severity>INFO</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C28227</key>
    <name>C28227: Annotation cannot also be a PrimOp (see prior declaration)</name>
    <description><![CDATA[<p>
This warning indicates that the named annotation is being declared as an ordinary annotation, and also was previously declared as a PrimOp. This should not be possible if the standard macros are being used for annotations; this warning is not expected to be seen in typical use.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/hh709836.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/hh709836.aspx</a></p>
]]>
    </description>
    <internalKey>C28227</internalKey>
    <severity>INFO</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C28228</key>
    <name>C28228: Annotation parameter: cannot use type in annotations</name>
    <description><![CDATA[<p>
This warning indicates that a parameter is of type that is not supported. Annotations can only use a limited set of types as parameters. This should not be possible if the standard macros are being used for annotations; this warning is not expected to be seen in typical use.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/hh709812.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/hh709812.aspx</a></p>
]]>
    </description>
    <internalKey>C28228</internalKey>
    <severity>INFO</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C28229</key>
    <name>C28229: Annotation does not support parameters</name>
    <description><![CDATA[<p>
This warning indicates that an annotation was used with a parameter when the annotation is declared without parameters. This should not be possible if the standard macros are being used for annotations; this warning is not expected to be seen in typical use.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/hh709810.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/hh709810.aspx</a></p>
]]>
    </description>
    <internalKey>C28229</internalKey>
    <severity>INFO</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C28230</key>
    <name>C28230: The type of parameter has no member</name>
    <description><![CDATA[<p>
This warning indicates that an argument to an annotation attempts to access a struct, class, or union and the named member does not exist.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/hh709808.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/hh709808.aspx</a></p>
]]>
    </description>
    <internalKey>C28230</internalKey>
    <severity>INFO</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C28231</key>
    <name>C28231: Annotation is only valid on array</name>
    <description><![CDATA[<p>
This warning indicates that an argument to an annotation should be an array, and some other type was encountered.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/hh709839.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/hh709839.aspx</a></p>
]]>
    </description>
    <internalKey>C28231</internalKey>
    <severity>INFO</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C28232</key>
    <name>C28232: _Pre_, _Post_, or _Deref_ not applied to any annotation</name>
    <description><![CDATA[<p>
This warning indicates that a _Pre_, _Post_, or _Deref_ operator appears in an annotation expression without a subsequent functional annotation; the modifier was ignored, but this indicates an incorrectly coded annotation.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/hh709837.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/hh709837.aspx</a></p>
]]>
    </description>
    <internalKey>C28232</internalKey>
    <severity>INFO</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C28233</key>
    <name>C28233: pre, post, or deref applied to a block</name>
    <description><![CDATA[<p>
C28233: pre, post, or deref applied to a block
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/hh442989.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/hh442989.aspx</a></p>
]]>
    </description>
    <internalKey>C28233</internalKey>
    <severity>INFO</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C28234</key>
    <name>C28234: _At_ expression does not apply to current function</name>
    <description><![CDATA[<p>
This warning indicates that the value of an _At_ expression does not identify an accessible object.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/hh709820.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/hh709820.aspx</a></p>
]]>
    </description>
    <internalKey>C28234</internalKey>
    <severity>INFO</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C28235</key>
    <name>C28235: The function cannot stand alone as an annotation</name>
    <description><![CDATA[<p>
This warning indicates that an attempt was made to use a function that was not declared to be an annotation in an annotation context. This includes using a primitive operation (PrimOp) in a standalone context. This should not be possible if the standard macros are being used for annotations. This warning is not expected to be seen in typical use.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/hh709816.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/hh709816.aspx</a></p>
]]>
    </description>
    <internalKey>C28235</internalKey>
    <severity>INFO</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C28236</key>
    <name>C28236: The annotation cannot be used in an expression</name>
    <description><![CDATA[<p>
This warning indicates that an attempt was made to use a function declared to be an annotation in an expression context. This should not be possible if the standard macros are being used for annotations; this warning is not expected to be seen in typical use.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/hh709829.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/hh709829.aspx</a></p>
]]>
    </description>
    <internalKey>C28236</internalKey>
    <severity>INFO</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C28237</key>
    <name>C28237: The annotation on parameter is no longer supported</name>
    <description><![CDATA[<p>
      An internal error has occurred in the PREfast model file. This warning should not occur in typical use.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/hh709840.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/hh709840.aspx</a></p>
]]>
    </description>
    <internalKey>C28237</internalKey>
    <severity>INFO</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C28238</key>
    <name>C28238: The annotation on parameter has more than one of value, stringValue, and longValue. Use paramn=xxx</name>
    <description><![CDATA[<p>
An internal error has occurred in the PREfast model file. This warning should not occur in typical use.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/hh709842.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/hh709842.aspx</a></p>
]]> 
    </description>
    <internalKey>C28238</internalKey>
    <severity>INFO</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C28239</key>
    <name>C28239: The annotation on parameter has both value, stringValue, or longValue; and paramn=xxx. Use only paramn=xxx</name>
    <description><![CDATA[<p>
An internal error has occurred in the PREfast model file. This warning should not occur in typical use.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/hh709814.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/hh709814.aspx</a></p>
]]>
    </description>
    <internalKey>C28239</internalKey>
    <severity>INFO</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C28240</key>
    <name>C28240: The annotation on parameter has param2 but no param1</name>
    <description><![CDATA[<p>
      An internal error has occurred in the PREfast model file. This warning should not occur in typical use.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/hh709845.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/hh709845.aspx</a></p>
]]>
    </description>
    <internalKey>C28240</internalKey>
    <severity>INFO</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C28241</key>
    <name>C28241: The annotation for function on parameter is not recognized</name>
    <description><![CDATA[<p>
An unrecognized annotation name was used. This should not be possible if the standard macros are being used for annotations; this warning is not expected to be seen in typical use.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/hh709835.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/hh709835.aspx</a></p>
]]>
    </description>
    <internalKey>C28241</internalKey>
    <severity>INFO</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C28243</key>
    <name>C28243: The annotation for function on parameter requires more dereferences than the actual type annotated allows</name>
    <description><![CDATA[<p>
The number of __deref operators on an annotation is more than the number of levels of pointer defined by the parameter type. Correct this warning by changing either the number in the annotation or the pointer levels of the parameter referenced.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/hh709834.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/hh709834.aspx</a></p>
]]>
    </description>
    <internalKey>C28243</internalKey>
    <severity>INFO</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C28244</key>
    <name>C28244: The annotation for function has an unparseable parameter/external annotation</name>
    <description><![CDATA[<p>
This should currently not be possible if the standard macros are being used for annotations; this warning is not expected to be seen in typical use.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/hh709833.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/hh709833.aspx</a></p>
]]>
    </description>
    <internalKey>C28244</internalKey>
    <severity>INFO</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C28245</key>
    <name>C28245: The annotation for function annotates 'this' on a non-member-function</name>
    <description><![CDATA[<p>
An internal error has occurred in the PREfast model file. This warning should not occur in typical use.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/hh709844.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/hh709844.aspx</a></p>
]]>
    </description>
    <internalKey>C28245</internalKey>
    <severity>INFO</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C28246</key>
    <name>C28246: The annotation for function '&lt;name&gt;' - parameter '&lt;parameter&gt;' does not match the type of the parameter</name>
    <description><![CDATA[<p>
A __deref operator was applied to a non-pointer type when creating an annotation.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/hh709827.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/hh709827.aspx</a></p>
]]>
    </description>
    <internalKey>C28246</internalKey>
    <severity>INFO</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C28250</key>
    <name>C28250: Inconsistent annotation for function: the prior instance has an error</name>
    <description><![CDATA[<p>
Note: There are several prototypes for this function. This Compares the first prototype with instance number &lt;number&gt;.
If a declaration is made using a typedef, the line where the typedef appears is more useful than the line of the declaration.
This warning refers to an error in the annotation and reflects the requirement that the annotations on a function declaration must match those on the definition, except if a function typedef is involved. In that case, the function typedef is taken as definitive for both the declaration and the definition.
Note that annotations are usually implemented as macros, and one macro will usually yield several low-level annotations. This warning is reported for each unmatched low-level annotation, so a single unmatched annotation macro may yield a number of unmatched low-level annotations. It is best to simply compare the declaration and definition source code to make sure that they are the same. (Trivial differences in the order of the annotations are not reported.)
The comparison is always between the first declaration found and the current one. If there are additional declarations, each declaration is checked pairwise. It is currently not possible to do a comparison other than in pairs, although it is possible to identify that there are more than two declarations/definitions. The text field above contains a list of the annotations that differ (at a fairly low level) between the two instances.
This warning message displays the text of the underlying code sent to the compiler, and not the macros that are used to actually insert the annotation in the source code (as is the case whenever macros are used). In general, you do not need to understand the low-level annotations, but you should recognize that the annotations are being reported as inconsistent between the line numbers reported in the error message. Mostly, an inspection of the source code will make it clear why the inconsistency exists.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/hh709832.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/hh709832.aspx</a></p>
]]>
    </description>
    <internalKey>C28250</internalKey>
    <severity>INFO</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C28251</key>
    <name>C28251: Inconsistent annotation for function: this instance has an error</name>
    <description><![CDATA[<p>
This warning refers to an error in the annotation and reflects the requirement that the annotations on a function declaration must match those on the definition, except if a function typedef is involved. In that case, the function typedef is taken as definitive for both the declaration and the definition.
Note that annotations are usually implemented as macros, and one macro will usually yield several low-level annotations. This warning is reported for each unmatched low-level annotation, so a single unmatched annotation macro may yield a number of unmatched low-level annotations. It is best to simply compare the declaration and definition source code to make sure that they are the same. (Trivial differences in the order of the annotations are not reported.)
The comparison is always between the first declaration found and the current one. If there are additional declarations, then each declaration is checked in groups of two. It is currently not possible to do a comparison other than in pairs, although it is possible to identify that there are more than two declarations/definitions. The text field above contains a list of the annotations that differ (at a fairly low level) between the two instances.
This warning message displays the text of the underlying code sent to the compiler, and not the macros that are used to actually insert the annotation in the source code (as is the case whenever macros are used). In general, you do not need to understand the low-level annotations, but you should recognize that the annotations are being reported as inconsistent between the line numbers reported in the error message. Mostly, an inspection of the source code will make it clear why the inconsistency exists.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/hh711980.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/hh711980.aspx</a></p>
]]>
    </description>
    <internalKey>C28251</internalKey>
    <severity>INFO</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C28252</key>
    <name>C28252: Inconsistent annotation for function: parameter has another annotation on this instance</name>
    <description><![CDATA[<p>
This warning refers to an error in the annotation and reflects the requirement that the annotations on a function declaration must match those on the definition, except if a function typedef is involved. In that case, the function typedef is taken as definitive for both the declaration and the definition.
Note that annotations are usually implemented as macros, and one macro will usually yield several low-level annotations. This warning is reported for each unmatched low-level annotation, so a single unmatched annotation macro may yield a number of unmatched low-level annotations. It is best to simply compare the declaration and definition source code to make sure that they are the same. (Trivial differences in the order of the annotations are not reported.)
The comparison is always between the first declaration found and the current one. If there are additional declarations, then each declaration is checked in groups of two. It is currently not possible to do a comparison other than in pairs, although it is possible to identify that there are more than two declarations/definitions. The error message contains a list of the annotations that differ (at a fairly low level) between the two instances.
This warning message displays the text of the underlying code sent to the compiler, and not the macros that are used to actually insert the annotation in the source code (as is the case whenever macros are used). In general, you do not need to understand the low-level annotations, but you should recognize that the annotations are being reported as inconsistent between the line numbers reported in the error message. Mostly, an inspection of the source code will make it clear why the inconsistency exists.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/hh711978.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/hh711978.aspx</a></p>
]]>
    </description>
    <internalKey>C28252</internalKey>
    <severity>INFO</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C28253</key>
    <name>C28253: Inconsistent annotation for function: parameter has another annotations on this instance</name>
    <description><![CDATA[<p>
This warning refers to an error in the annotation and reflects the requirement that the annotations on a function declaration must match those on the definition, except if a function typedef is involved. In that case, the function typedef is taken as definitive for both the declaration and the definition.
Note that annotations are usually implemented as macros, and one macro will usually yield several low-level annotations. This warning is reported for each unmatched low-level annotation, so a single unmatched annotation macro may yield a number of unmatched low-level annotations. It is best to simply compare the declaration and definition source code to make sure that they are the same. (Trivial differences in the order of the annotations are not reported.)
The comparison is always between the first declaration found and the current one. If there are additional declarations, then each declaration is checked in groups of two. It is currently not possible to do a comparison other than in pairs, although it is possible to identify that there are more than two declarations/definitions. The error message contains a list of the annotations that differ (at a fairly low level) between the two instances.
This warning message displays the text of the underlying code sent to the compiler, and not the macros that are used to actually insert the annotation in the source code (as is the case whenever macros are used). In general, you do not need to understand the low-level annotations, but you should recognize that the annotations are being reported as inconsistent between the line numbers reported in the error message. Mostly, an inspection of the source code will make it clear why the inconsistency exists.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/hh711985.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/hh711985.aspx</a></p>
]]>
    </description>
    <internalKey>C28253</internalKey>
    <severity>INFO</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C28254</key>
    <name>C28254: dynamic_cast&lt;&gt;() is not supported in annotations</name>
    <description><![CDATA[<p>
The C++ dynamic_cast operator cannot be used in annotations.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/hh711982.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/hh711982.aspx</a></p>
]]>
    </description>
    <internalKey>C28254</internalKey>
    <severity>INFO</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C28260</key>
    <name>C28260: A syntax error in the annotations was found while parsing for a property inside a function</name>
    <description><![CDATA[<p>
This warning indicates an error in the annotations, not in the code that is being analyzed
</p><h2>Microsoft Documentation</h2>
<p><a href="https://docs.microsoft.com/en-us/windows-hardware/drivers/devtest/28260-syntax-error-in-function-property" target="_blank">https://docs.microsoft.com/en-us/windows-hardware/drivers/devtest/28260-syntax-error-in-function-property</a></p>
]]>
    </description>
    <internalKey>C28260</internalKey>
    <severity>INFO</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C28262</key>
    <name>C28262: A syntax error in the annotation was found in function &lt;function&gt; for annotation &lt;name&gt;</name>
    <description><![CDATA[<p>
C28262: A syntax error in the annotation was found in function &lt;function&gt; for annotation &lt;name&gt;
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/hh532110.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/hh532110.aspx</a></p>
]]>
    </description>
    <internalKey>C28262</internalKey>
    <severity>INFO</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C28263</key>
    <name>C28263: A syntax error in a conditional annotation was found for Intrinsic annotation</name>
    <description><![CDATA[<p>
The Code Analysis tool reports this warning when the return value for the specified function has a conditional value. This warning indicates an error in the annotations, not in the code being analyzed. If the function declaration is in a header file, the annotation should be corrected so that it matches the header file.
The result list for the function and parameter specified has multiple unconditional values.
Typically, this indicates that more than one unconditional _Null_ or __drv_valueIs annotations have been used to specify a result value.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/hh711979.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/hh711979.aspx</a></p>
]]>
    </description>
    <internalKey>C28263</internalKey>
    <severity>INFO</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C28266</key>
    <name>C28266: A syntax error in the annotations was found for the property in the function</name>
    <description><![CDATA[<p>
C28267: A syntax error in the annotations was found annotation &lt;name&gt; in the function &lt;function&gt;.
</p><h2>Microsoft Documentation</h2>
<p><a href="https://docs.microsoft.com/en-us/windows-hardware/drivers/devtest/28266-function-property-syntax-error" target="_blank">https://docs.microsoft.com/en-us/windows-hardware/drivers/devtest/28266-function-property-syntax-error</a></p>
]]>
    </description>
    <internalKey>C28266</internalKey>
    <severity>INFO</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C28267</key>
    <name>C28267: A syntax error in the annotations was found annotation &lt;name&gt; in the function &lt;function&gt;</name>
    <description><![CDATA[<p>
C28267: A syntax error in the annotations was found annotation &lt;name&gt; in the function &lt;function&gt;.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/hh532109.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/hh532109.aspx</a></p>
]]>
    </description>
    <internalKey>C28267</internalKey>
    <severity>INFO</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C28272</key>
    <name>C28272: The annotation for function, parameter when examining is inconsistent with the function declaration</name>
    <description><![CDATA[<p>
This warning indicates an error in the annotations, not in the code that is being analyzed. The annotations appearing on a function definition are inconsistent with those appearing on a declaration. The two annotations should be resolved to match.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/hh739047.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/hh739047.aspx</a></p>
]]>
    </description>
    <internalKey>C28272</internalKey>
    <severity>INFO</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C28273</key>
    <name>C28273: For function, the clues are inconsistent with the function declaration</name>
    <description><![CDATA[<p>
This warning indicates an error in the annotations, not in the code that is being analyzed. The annotations appearing on a function definition are inconsistent with those appearing on a declaration. The two annotations should be resolved to match.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/hh739055.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/hh739055.aspx</a></p>
]]>
    </description>
    <internalKey>C28273</internalKey>
    <severity>INFO</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C28275</key>
    <name>C28275: The parameter to _Macro_value_ is null</name>
    <description><![CDATA[<p>
This warning indicates that there is an internal error in the model file, not in the code being analyzed. The macroValue function was called without a parameter.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/hh739082.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/hh739082.aspx</a></p>
]]>
    </description>
    <internalKey>C28275</internalKey>
    <severity>INFO</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C28278</key>
    <name>C28278: Function name appears with no prototype in scope</name>
    <description><![CDATA[<p>
This warning typically indicates that a __deref is needed to apply the __return annotation to the value returned.
The Code Analysis tool reports this warning when a function without a declaration was called, and the analysis that can be performed is limited because the declaration contains important information.
The C language permits (but discourages) the use of a function for which no prototype has been declared. A function definition or a function declaration (prototype) should appear before the first use of the function. This warning indicates that a function without a declaration was called, and the analysis that can be performed is limited because declaration contains important information. If the function declaration were to contain annotations, the function declaration is even more useful to the Code Analysis tool.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/hh739083.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/hh739083.aspx</a></p>
]]>
    </description>
    <internalKey>C28278</internalKey>
    <severity>INFO</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C28279</key>
    <name>C28279: For symbol, a 'begin' was found without a matching 'end'</name>
    <description><![CDATA[<p>
The annotation language supports a begin and end ({ and } in C) construct, and the pairing has gotten unbalanced. This situation can be avoided if the macros are used.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/hh739051.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/hh739051.aspx</a></p>
]]>
    </description>
    <internalKey>C28279</internalKey>
    <severity>INFO</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C28280</key>
    <name>C28280: For symbol, an 'end' was found without a matching 'begin'</name>
    <description><![CDATA[<p>
The annotation language supports a begin and an end ({ and } in C) construct, and the pairing has gotten unbalanced. This situation can be avoided if the macros are used.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/hh739081.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/hh739081.aspx</a></p>
]]>
    </description>
    <internalKey>C28280</internalKey>
    <severity>INFO</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C28282</key>
    <name>C28282: Format Strings must be in preconditions</name>
    <description><![CDATA[<p>
This warning indicates that a __drv_formatString annotation is found, which is not in a _Pre_ (__drv_in) annotation (function parameters are by default _Pre_). Check whether the annotation used in an explicit block with a _Post_ (__drv_out) annotation. If so, remove the annotation from any enclosing block that has put it in a _Post_ context.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/hh739061.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/hh739061.aspx</a></p>
]]>
    </description>
    <internalKey>C28282</internalKey>
    <severity>INFO</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C28283</key>
    <name>C28283: For symbol, the specified size specification is not yet supported</name>
    <description><![CDATA[<p>
The warning indicates that the size specification "sentinel" annotation received a value other than zero. Essentially, the caller tried to say that the string is terminated by a character other than binary zero.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/hh739049.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/hh739049.aspx</a></p>
]]>
    </description>
    <internalKey>C28283</internalKey>
    <severity>INFO</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C28284</key>
    <name>C28284: For symbol, Predicates are currently not supported for non-function symbols</name>
    <description><![CDATA[<p>
This warning indicates that a conditional annotation (predicate, __drv_when) was found on something other than a function.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/hh739052.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/hh739052.aspx</a></p>
]]>
    </description>
    <internalKey>C28284</internalKey>
    <severity>INFO</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C28285</key>
    <name>C28285: For function, syntax error in parameter</name>
    <description><![CDATA[<p>
The Code Analysis tool reports this warning when a probable error is encountered in the model file. A few source file errors can also cause such errors.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/hh739069.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/hh739069.aspx</a></p>
]]>
    </description>
    <internalKey>C28285</internalKey>
    <severity>INFO</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C28286</key>
    <name>C28286: For function, syntax error near the end</name>
    <description><![CDATA[<p>
The Code Analysis tool reports this warning when a probable error is encountered in the model file. A few source file errors can also cause such errors.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/hh739079.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/hh739079.aspx</a></p>
]]>
    </description>
    <internalKey>C28286</internalKey>
    <severity>INFO</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C28287</key>
    <name>C28287: For function, syntax Error in _At_() annotation (unrecognized parameter name)</name>
    <description><![CDATA[<p>
The Code Analysis tool reports this warning when the SAL_at (__drv_at) annotation is used and the parameter expression cannot be interpreted in the current context. This might include using a misspelled parameter or member name, or a misspelling of "return" or "this" keywords.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/hh739076.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/hh739076.aspx</a></p>
]]>
    </description>
    <internalKey>C28287</internalKey>
    <severity>INFO</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C28288</key>
    <name>C28288: For function, syntax Error in _At_() annotation (invalid parameter name)</name>
    <description><![CDATA[<p>
The Code Analysis tool reports this warning when the SAL_at (__drv_at) annotation is used and the parameter expression cannot be interpreted in the current context. This might include using a misspelled parameter or member name, or a misspelling of "return" or "this" keywords.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/hh739062.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/hh739062.aspx</a></p>
]]>
    </description>
    <internalKey>C28288</internalKey>
    <severity>INFO</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C28289</key>
    <name>C28289: For function: ReadableTo or WritableTo did not have a limit-spec as a parameter</name>
    <description><![CDATA[<p>
The Code Analysis tool reports this warning when the function/parameter annotation is miscoded as noted.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/hh739053.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/hh739053.aspx</a></p>
]]>
    </description>
    <internalKey>C28289</internalKey>
    <severity>INFO</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C28290</key>
    <name>C28290: the annotation for function contains more Externals than the actual number of parameters</name>
    <description><![CDATA[<p>
The Code Analysis tool reports this warning when the annotation for the function contains more Externals than the actual number of parameters.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/hh739059.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/hh739059.aspx</a></p>
]]>
    </description>
    <internalKey>C28290</internalKey>
    <severity>INFO</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C28291</key>
    <name>C28291: Post null/notnull at deref level 0 is meaningless for function &lt;x&gt; at param &lt;number&gt;</name>
    <description><![CDATA[<p>
The Code Analysis tool reports this warning when the post condition of a dereference level-zero parameter is specified to have a null/non-null property. This error occurs because a value at dereference level zero cannot change.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/hh739072.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/hh739072.aspx</a></p>
]]>
    </description>
    <internalKey>C28291</internalKey>
    <severity>INFO</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C28300</key>
    <name>C28300: &lt;parameter_name&gt;: Expression operands of incompatible types for operator &lt;operator_name&gt;</name>
    <description><![CDATA[<p>
This warning is reported when operand types in a parameter are not compatible with the operator.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/hh442995.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/hh442995.aspx</a></p>
]]> 
    </description>
    <internalKey>C28300</internalKey>
    <severity>INFO</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C28301</key>
    <name>C28301: No annotations for first declaration of &lt;function&gt;.&lt;note1&gt; See &lt;filename&gt;(&lt;line&gt;). &lt;note2&gt;</name>
    <description><![CDATA[<p>
This warning is reported when annotations were not found at the first declaration of a given function.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/hh443022.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/hh443022.aspx</a></p>
]]>
    </description>
    <internalKey>C28301</internalKey>
    <severity>INFO</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C28302</key>
    <name>C28302: For C++ reference-parameter &lt;parameter_name&gt;, an extra _Deref_ operator was found on &lt;annotation&gt;</name>
    <description><![CDATA[<p>
This warning is reported when an extra level of _Deref_ is used on a parameter.
SAL2 does not require the use of an extra level of _Deref_ when dealing with reference parameters. This particular annotation is unambiguous and is interpreted correctly, but should be corrected.
Frequently this can be corrected by simply removing the older __deref annotation and using SAL2 syntax. Sometimes may be necessary to use _At_ to reference the specific object to be annotated.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/hh442994.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/hh442994.aspx</a></p>
]]>
    </description>
    <internalKey>C28302</internalKey>
    <severity>INFO</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C28303</key>
    <name>C28303: For C++ reference-parameter &lt;parameter_name&gt;, an ambiguous _Deref_ operator was found on &lt;annotation&gt;</name>
    <description><![CDATA[<p>
This warning similar to C28302 and is reported when an extra level of _Deref_ is used on a parameter.
SAL2 does not require the use of an extra level of _Deref_ when dealing with reference parameters. This particular annotation is ambiguous as to which level of dereference is intended to be annotated. It may be necessary to use _At_ to reference the specific object to be annotated.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/hh442990.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/hh442990.aspx</a></p>
]]>
    </description>
    <internalKey>C28303</internalKey>
    <severity>INFO</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C28304</key>
    <name>C28304: For C++ reference-parameter &lt;parameter_name&gt;, an improperly placed _Notref_ operator was found applied to &lt;token&gt;</name>
    <description><![CDATA[<p>
The _Notref_ operator should only be used in special circumstances involving C++ reference parameters and only in system-provided macros. It must be immediately followed by a _Deref_ operator or a functional annotation.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/hh443005.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/hh443005.aspx</a></p>
]]>
    </description>
    <internalKey>C28304</internalKey>
    <severity>INFO</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C28305</key>
    <name>C28305: An error while parsing &lt;token&gt; was discovered</name>
    <description><![CDATA[<p>
This warning is reported when the expression containing the specified token is ill-formed.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/hh443025.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/hh443025.aspx</a></p>
]]>
    </description>
    <internalKey>C28305</internalKey>
    <severity>INFO</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C28306</key>
    <name>C28306: The annotation on parameter is obsolescent</name>
    <description><![CDATA[<p>
Use _String_length_ with the appropriate SAL2 annotation instead.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/hh568716.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/hh568716.aspx</a></p>
]]>
    </description>
    <internalKey>C28306</internalKey>
    <severity>INFO</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C28307</key>
    <name>C28307: The annotation on parameter is obsolescent</name>
    <description><![CDATA[<p>
Use _String_length_ with the appropriate SAL2 annotation instead.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/hh568723.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/hh568723.aspx</a></p>
]]>
    </description>
    <internalKey>C28307</internalKey>
    <severity>INFO</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C28308</key>
    <name>C28308: The format list argument position specified by the annotation is incorrect. </name>
    <description><![CDATA[<p>
The format list argument position must be either a parameter name, or an integer offset that's in the parameter list, or zero.
The second parameter to IsFormatString2 (where) can be in one of two forms:
- A parameter name, which is taken as the first argument to the format string.
- An offset (n) relative to the format-string parameter.
In the second form, the first format-string parameter is the n-th argument after the format string. If n is zero, an ellipsis is specified as the parameter. Specifying an offset of zero without specifying the ellipsis as the first format-string parameter will cause an error.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/jj612882.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/jj612882.aspx</a></p>
]]>
    </description>
    <internalKey>C28308</internalKey>
    <severity>INFO</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C28309</key>
    <name>C28309: &lt;parameter_name&gt;: Annotation operands must be integer/enum/pointer types. Floats are approximated as integers. Types: &lt;typelist&gt;</name>
    <description><![CDATA[<p>
C28309: &lt;parameter_name&gt;: Annotation operands must be integer/enum/pointer types. Void operands and C++ overloaded operators are not supported. Floats are approximated as integers. Types: &lt;typelist&gt;.
You've tried to use a void or a function in an annotation expression, and Code Analysis can't handle it.  This error typically occurs when an operator== that's implemented as a function is used, but other cases may also occur. Examine the types in &lt;typelist&gt; for clues about what's wrong.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/hh873099.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/hh873099.aspx</a></p>
]]>
    </description>
    <internalKey>C28309</internalKey>
    <severity>INFO</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C28310</key>
    <name>C28310: The &lt;annotation_name&gt; annotation on &lt;function&gt; &lt;parameter&gt; has no SAL version</name>
    <description><![CDATA[<p>
All SAL annotations used in source code should have an annotation version applied by the use of SAL_name. This needs to be corrected in the macro definition.
This warning is reported only once per declaration. Inspect the rest of the declaration for more obsolete SAL.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/dn582055.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/dn582055.aspx</a></p>
]]>
    </description>
    <internalKey>C28310</internalKey>
    <severity>INFO</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C28311</key>
    <name>C28311: The &lt;annotation_name&gt; annotation on &lt;function&gt; &lt;parameter&gt; is an obsolescent version of SAL</name>
    <description><![CDATA[<p>
Usually this warning is generated when an annotation is applied where the C/C++ type is being inspected.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/dn582054.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/dn582054.aspx</a></p>
]]>
    </description>
    <internalKey>C28311</internalKey>
    <severity>INFO</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C28312</key>
    <name>C28312: The &lt;annotation_name&gt; annotation on the repeated declaration of &lt;function&gt; &lt;parameter&gt; is an obsolescent version of SAL</name>
    <description><![CDATA[<p>
The annotation is an old version and should be updated to the equivalent SAL2. This warning is not emitted if a prior inconsistent annotation warning has been emitted, and is reported only once per declaration. Inspect the rest of the declaration for more obsolete SAL.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/dn582053.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/dn582053.aspx</a></p>
]]>
    </description>
    <internalKey>C28312</internalKey>
    <severity>INFO</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  
  <rule>
    <key>C28350</key>
    <name>C28350: The annotation &lt;annotation&gt; describes a situation that is not conditionally applicable</name>
    <description><![CDATA[<p>
Usually this warning is generated when an annotation is applied where the C/C++ type is being inspected.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/hh443017.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/hh443017.aspx</a></p>
]]>
    </description>
    <internalKey>C28350</internalKey>
    <severity>INFO</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C28351</key>
    <name>C28351: The annotation &lt;annotation&gt; describes where a dynamic value (a variable) cannot be used in the condition</name>
    <description><![CDATA[<p>
This warning is reported when an annotation is applied where the C/C++ type is being inspected.
The expression in the _When_ should evaluate to a constant. The _When_ is ignored.
</p><h2>MSDN Documentation</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/hh442997.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/hh442997.aspx</a></p>
]]>
    </description>
    <internalKey>C28351</internalKey>
    <severity>INFO</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C28601</key>
    <name>C28601: Avoid blocking on HWND_BROADCAST</name>
    <description><![CDATA[<p>
This warning indicates that the application called SendMessage with the HWND_BROADCAST flag, which blocks the thread until all the windows to which this message was broadcast respond
</p><h2>Microsoft Documentation</h2>
<p><a href="https://docs.microsoft.com/en-us/windows-hardware/drivers/devtest/28601-avoid-blocking-on-hwnd-broadcast" target="_blank">https://docs.microsoft.com/en-us/windows-hardware/drivers/devtest/28601-avoid-blocking-on-hwnd-broadcast</a></p>
]]>
    </description>
    <internalKey>C28601</internalKey>
    <severity>INFO</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C28602</key>
    <name>C28602: Avoid calling SendMessageTimeout with HWND_BROADCAST</name>
    <description><![CDATA[<p>
This warning when applications use SendMessageTimeout, even when the application requests a time-out period for the thread of only 10 seconds. The function does not return until each window has timed out.
</p><h2>Microsoft Documentation</h2>
<p><a href="https://docs.microsoft.com/en-us/windows-hardware/drivers/devtest/28602-avoid-calling-sendmessagetimeout-with-hwnd-broadcast" target="_blank">https://docs.microsoft.com/en-us/windows-hardware/drivers/devtest/28602-avoid-calling-sendmessagetimeout-with-hwnd-broadcast</a></p>
]]>
    </description>
    <internalKey>C28602</internalKey>
    <severity>INFO</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C28604</key>
    <name>C28604: Avoid calling SendMessageTimeout with SMTO_ABORTIFHUNG with a timeout of 0</name>
    <description><![CDATA[<p>
This warning when applications call SendMessageTimeout with the SMTO_ABORTIFHUNG flag and a time-out period of zero
</p><h2>Microsoft Documentation</h2>
<p><a href="https://docs.microsoft.com/en-us/windows-hardware/drivers/devtest/28604-smto-abortifhung-with-0-timeout-" target="_blank">https://docs.microsoft.com/en-us/windows-hardware/drivers/devtest/28604-smto-abortifhung-with-0-timeout-</a></p>
]]>
    </description>
    <internalKey>C28604</internalKey>
    <severity>INFO</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C28615</key>
    <name>C28615: Must call _resetstkoflw in the __except() block when calling _alloca in the __try block</name>
    <description><![CDATA[<p>
Don't call _resetstkoflw from inside a catch() block.
This warning when applications call the _resetstkoflw function within a catch block, or when applications call alloca in the try block without calling _resetstkoflw in the except block.
</p><h2>Microsoft Documentation</h2>
<p><a href="https://docs.microsoft.com/en-us/windows-hardware/drivers/devtest/28615-must-call-resetstkoflw-in-except-block" target="_blank">https://docs.microsoft.com/en-us/windows-hardware/drivers/devtest/28615-must-call-resetstkoflw-in-except-block</a></p>
]]>
    </description>
    <internalKey>C28615</internalKey>
    <severity>INFO</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C28616</key>
    <name>C28616: Multithreaded AV condition</name>
    <description><![CDATA[<p>
In a multithreaded environment, it is impossible to know when a thread is preempted, with the consequence that the apparent effect of reducing the reference count of an object is that it is deleted without further action on the part of the current thread.
</p><h2>Microsoft Documentation</h2>
<p><a href="https://docs.microsoft.com/en-us/windows-hardware/drivers/devtest/28616-multithreaded-av-condition" target="_blank">https://docs.microsoft.com/en-us/windows-hardware/drivers/devtest/28616-multithreaded-av-condition</a></p>
]]>
    </description>
    <internalKey>C28616</internalKey>
    <severity>INFO</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C28617</key>
    <name>C28617: Avoid using the return value of _beginthread(). Use _beginthreadex() instead</name>
    <description><![CDATA[<p>
It is safer to use _beginthreadex than _beginthread. If the thread spawned by _beginthread exits quickly, the handle returned to the caller of _beginthread may be invalid or, worse, point to another thread.
</p><h2>Microsoft Documentation</h2>
<p><a href="https://docs.microsoft.com/en-us/windows-hardware/drivers/devtest/28617-avoid-using-the-return-value-of-beginthread" target="_blank">https://docs.microsoft.com/en-us/windows-hardware/drivers/devtest/28617-avoid-using-the-return-value-of-beginthread</a></p>
]]>
    </description>
    <internalKey>C28617</internalKey>
    <severity>INFO</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C28623</key>
    <name>C28623: Unsigned cast of GetMessagePos() coordinates. Use GET_X_LPARAM/GET_Y_LPARAM instead of LOWORD/HIWORD</name>
    <description><![CDATA[<p>
Systems with multiple monitors can have negative x-coordinates and y-coordinates.
</p><h2>Microsoft Documentation</h2>
<p><a href="https://docs.microsoft.com/en-us/windows-hardware/drivers/devtest/28623-unsigned-cast-of-getmessagepos-coordinates" target="_blank">https://docs.microsoft.com/en-us/windows-hardware/drivers/devtest/28623-unsigned-cast-of-getmessagepos-coordinates</a></p>
]]>
    </description>
    <internalKey>C28623</internalKey>
    <severity>INFO</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C28624</key>
    <name>C28624: No call to Release() to match incremented refcount from LResultFromObject</name>
    <description><![CDATA[<p>
LresultFromObject increases the refcount on new IAccessible objects.
</p><h2>Microsoft Documentation</h2>
<p><a href="https://docs.microsoft.com/en-us/windows-hardware/drivers/devtest/28624-no-release-call-to-match-incremented-refcount" target="_blank">https://docs.microsoft.com/en-us/windows-hardware/drivers/devtest/28624-no-release-call-to-match-incremented-refcount</a></p>
]]>
    </description>
    <internalKey>C28624</internalKey>
    <severity>INFO</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C28625</key>
    <name>C28625:Function call used to clear sensitive data will be optimized away</name>
    <description><![CDATA[<p>
The current function call might be optimized during compilation, which could make sensitive data stay in memory. Use the SecureZeroMemory or RtlSecureZeroMemory functions instead.
</p><h2>Microsoft Documentation</h2>
<p><a href="https://docs.microsoft.com/en-us/windows-hardware/drivers/devtest/28625-sensitive-data-may-be-retained" target="_blank">https://docs.microsoft.com/en-us/windows-hardware/drivers/devtest/28625-sensitive-data-may-be-retained</a></p>
]]>
    </description>
    <internalKey>C28625</internalKey>
    <severity>INFO</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C28636</key>
    <name>C28636: Calling LocalFree on non-allocated pointer obtained from calls to GetSecurityDescriptorOwner/Group/Dacl/Sacl</name>
    <description><![CDATA[<p>
These functions do not allocate any memory‚Äîthey set the pointer that is passed in. For this reason, it is wrong to free memory using that pointer.
</p><h2>Microsoft Documentation</h2>
<p><a href="https://docs.microsoft.com/en-us/windows-hardware/drivers/devtest/28636-calling-localfree-on-non-allocated-pointer" target="_blank">https://docs.microsoft.com/en-us/windows-hardware/drivers/devtest/28636-calling-localfree-on-non-allocated-pointer</a></p>
]]>
    </description>
    <internalKey>C28636</internalKey>
    <severity>INFO</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C28637</key>
    <name>C28637: Calling the function in a global initializer is unsafe</name>
    <description><![CDATA[<p>
When you use a DLL, it is frequently the case that any static constructors are called from DllMain. There are a number of constraints that apply to call other functions from DllMain.
</p><h2>Microsoft Documentation</h2>
<p><a href="https://docs.microsoft.com/en-us/windows-hardware/drivers/devtest/28637-calling-function-in-a-global-initializer-is-unsafe" target="_blank">https://docs.microsoft.com/en-us/windows-hardware/drivers/devtest/28637-calling-function-in-a-global-initializer-is-unsafe</a></p>
]]>
    </description>
    <internalKey>C28637</internalKey>
    <severity>INFO</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C28638</key>
    <name>C28638: function delayload stub is missing a matching declaration</name>
    <description><![CDATA[<p>
Many delay-load stubs can be implemented without including the header file where the functions are declared. A common mistake is to include the public header file while implementing delay-load stubs for both public and private ordinals (consequently omitting the private ones)
</p><h2>Microsoft Documentation</h2>
<p><a href="https://docs.microsoft.com/en-us/windows-hardware/drivers/devtest/28638-function-delayload-stub-is-missing-declaration-" target="_blank">https://docs.microsoft.com/en-us/windows-hardware/drivers/devtest/28638-function-delayload-stub-is-missing-declaration-</a></p>
]]>
    </description>
    <internalKey>C28638</internalKey>
    <severity>INFO</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C28639</key>
    <name>C28639: Calling close handle with string</name>
    <description><![CDATA[<p>
The function CloseHandle takes a void \* parameter. It is possible to cast (among other things) a string pointer to a void \* and pass it as an argument when the intention was to pass a handle opened using the string.
</p><h2>Microsoft Documentation</h2>
<p><a href="https://docs.microsoft.com/en-us/windows-hardware/drivers/devtest/28639-calling-close-handle-with-string" target="_blank">https://docs.microsoft.com/en-us/windows-hardware/drivers/devtest/28639-calling-close-handle-with-string</a></p>
]]>
    </description>
    <internalKey>C28639</internalKey>
    <severity>INFO</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C28640</key>
    <name>C28640: function delayload stub should be a static function</name>
    <description><![CDATA[<p>
All delay-load libraries should be static; they should have no symbolic exports. This ensures that no unexpected software can link to delay-load stub functions.
</p><h2>Microsoft Documentation</h2>
<p><a href="https://docs.microsoft.com/en-us/windows-hardware/drivers/devtest/28640-delayload-function-stub-should-be-a-static-function" target="_blank">https://docs.microsoft.com/en-us/windows-hardware/drivers/devtest/28640-delayload-function-stub-should-be-a-static-function</a></p>
]]>
    </description>
    <internalKey>C28640</internalKey>
    <severity>INFO</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C28645</key>
    <name>C28645: MessageBox was called using the question mark message symbol which is no longer recommended</name>
    <description><![CDATA[<p>
The use of the question mark message icon in a modal dialog box is no longer recommended because it does not clearly represent a specific type of message, and the phrasing of a message as a question could apply to any message type.
</p><h2>Microsoft Documentation</h2>
<p><a href="https://docs.microsoft.com/en-us/windows-hardware/drivers/devtest/28645-messagebox-called-using-the-question-mark-symbol" target="_blank">https://docs.microsoft.com/en-us/windows-hardware/drivers/devtest/28645-messagebox-called-using-the-question-mark-symbol</a></p>
]]>
    </description>
    <internalKey>C28645</internalKey>
    <severity>INFO</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C28648</key>
    <name>C28648: PulseEvent is an unreliable function</name>
    <description><![CDATA[<p>
A thread waiting on a synchronization object can be momentarily removed from the wait state by a kernel-mode APC, and then returned to the wait state after the APC is complete. If the call to PulseEvent occurs during the period when the thread was removed from the wait state, the thread will not be released and will "hang" forever.
</p><h2>Microsoft Documentation</h2>
<p><a href="https://docs.microsoft.com/en-us/windows-hardware/drivers/devtest/28648-pulseevent-is-an-unreliable-function" target="_blank">https://docs.microsoft.com/en-us/windows-hardware/drivers/devtest/28648-pulseevent-is-an-unreliable-function</a></p>
]]>
    </description>
    <internalKey>C28648</internalKey>
    <severity>INFO</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C28649</key>
    <name>C28649: Automatic or global stack arrays are never null</name>
    <description><![CDATA[<p>
Stack-based arrays can never be NULL. However, most of the time the intention is to check a particular element (mostly the first element) against NULL or for a nul character.
</p><h2>Microsoft Documentation</h2>
<p><a href="https://docs.microsoft.com/en-us/windows-hardware/drivers/devtest/28649-automatic-or-global-stack-arrays-are-never-null" target="_blank">https://docs.microsoft.com/en-us/windows-hardware/drivers/devtest/28649-automatic-or-global-stack-arrays-are-never-null</a></p>
]]>
    </description>
    <internalKey>C28649</internalKey>
    <severity>INFO</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C28650</key>
    <name>C28650: The type for which !0 is being used does not treat it as failure case</name>
    <description><![CDATA[<p>
Returning a status value such as !TRUE is not the same as returning a status value that indicates failure.
</p><h2>Microsoft Documentation</h2>
<p><a href="https://docs.microsoft.com/en-us/windows-hardware/drivers/devtest/28650-generic-value-is-not-treated-as-failure" target="_blank">https://docs.microsoft.com/en-us/windows-hardware/drivers/devtest/28650-generic-value-is-not-treated-as-failure</a></p>
]]>
    </description>
    <internalKey>C28650</internalKey>
    <severity>INFO</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C28714</key>
    <name>C28714: Cast between semantically different integer types</name>
    <description><![CDATA[<p>
This warning indicates that an NTSTATUS value is being explicitly cast to a Boolean type. This is likely to give undesirable results
</p><h2>Microsoft Documentation</h2>
<p><a href="https://docs.microsoft.com/en-us/windows-hardware/drivers/devtest/28714-ntstatus-cast-between-semantically-different-integer-types" target="_blank">https://docs.microsoft.com/en-us/windows-hardware/drivers/devtest/28714-ntstatus-cast-between-semantically-different-integer-types</a></p>
]]>
    </description>
    <internalKey>C28714</internalKey>
    <severity>INFO</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C28715</key>
    <name>C28715:Cast between semantically different integer types</name>
    <description><![CDATA[<p>
This warning indicates that a Boolean is being cast to NTSTATUS. This is likely to give undesirable results. For example, the typical failure value for functions that return a Boolean (FALSE) is a success status when tested as an NTSTATUS.
</p><h2>Microsoft Documentation</h2>
<p><a href="https://docs.microsoft.com/en-us/windows-hardware/drivers/devtest/28715-boolean-cast-between-semantically-different-integer-types" target="_blank">https://docs.microsoft.com/en-us/windows-hardware/drivers/devtest/28715-boolean-cast-between-semantically-different-integer-types</a></p>
]]>
    </description>
    <internalKey>C28715</internalKey>
    <severity>INFO</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C28716</key>
    <name>C28716: Compiler-inserted cast between semantically different integral types</name>
    <description><![CDATA[<p>
This warning indicates that a Boolean is being used as an NTSTATUS without being explicitly cast. This is likely to give undesirable results
</p><h2>Microsoft Documentation</h2>
<p><a href="https://docs.microsoft.com/en-us/windows-hardware/drivers/devtest/28716-compiler-inserted-cast-between-semantically-different-integral" target="_blank">https://docs.microsoft.com/en-us/windows-hardware/drivers/devtest/28716-compiler-inserted-cast-between-semantically-different-integral</a></p>
]]>
    </description>
    <internalKey>C28716</internalKey>
    <severity>INFO</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C28717</key>
    <name>C28717: Invalid VARIANT type</name>
    <description><![CDATA[<p>
The vt field of a VARIANT struct can take only certain values. Assigning any other value to it is an error.
</p><h2>Microsoft Documentation</h2>
<p><a href="https://docs.microsoft.com/en-us/windows-hardware/drivers/devtest/28717-invalid-variant-type" target="_blank">https://docs.microsoft.com/en-us/windows-hardware/drivers/devtest/28717-invalid-variant-type</a></p>
]]>
    </description>
    <internalKey>C28717</internalKey>
    <severity>INFO</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C28719</key>
    <name>C28719: Banned API Usage</name>
    <description><![CDATA[<p>
This warning indicates that a function is being used that has been banned, and has a more robust and secure replacement.
</p><h2>Microsoft Documentation</h2>
<p><a href="https://docs.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement" target="_blank">https://docs.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement</a></p>
]]>
    </description>
    <internalKey>C28719</internalKey>
    <severity>INFO</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C28720</key>
    <name>C28720: Banned API Usage</name>
    <description><![CDATA[<p>
This warning indicates that a function is being used that has been banned, and has a more robust and secure replacement.
</p><h2>Microsoft Documentation</h2>
<p><a href="https://docs.microsoft.com/en-us/windows-hardware/drivers/devtest/28720-banned-api-usage-use-updated-function-replacement" target="_blank">https://docs.microsoft.com/en-us/windows-hardware/drivers/devtest/28720-banned-api-usage-use-updated-function-replacement</a></p>
]]>
    </description>
    <internalKey>C28720</internalKey>
    <severity>INFO</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C28721</key>
    <name>C28721: Deprecated performance counter architecture</name>
    <description><![CDATA[<p>
A deprecated performance counter architecture is used: &lt;symptom&gt;.
</p><h2>Microsoft Documentation</h2>
<p><a href="https://docs.microsoft.com/en-us/windows-hardware/drivers/devtest/28721-deprecated-performance-counter-architecture" target="_blank">https://docs.microsoft.com/en-us/windows-hardware/drivers/devtest/28721-deprecated-performance-counter-architecture</a></p>
]]>
    </description>
    <internalKey>C28721</internalKey>
    <severity>INFO</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C28726</key>
    <name>C28726: Banned API Usage</name>
    <description><![CDATA[<p>
This warning indicates that a function is being used that has been banned or deprecated, and has a more robust and secure replacement.
</p><h2>Microsoft Documentation</h2>
<p><a href="https://docs.microsoft.com/en-us/windows-hardware/drivers/devtest/28726-banned-api-usage-use-updated-function-replacement" target="_blank">https://docs.microsoft.com/en-us/windows-hardware/drivers/devtest/28726-banned-api-usage-use-updated-function-replacement</a></p>
]]>
    </description>
    <internalKey>C28726</internalKey>
    <severity>INFO</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C28727</key>
    <name>C28727: Banned API Usage</name>
    <description><![CDATA[<p>
This warning indicates that a function is being used that has been banned or deprecated, and has a more robust and secure replacement.
</p><h2>Microsoft Documentation</h2>
<p><a href="https://docs.microsoft.com/en-us/windows-hardware/drivers/devtest/28727-banned-api-usage-use-updated-function-replacement" target="_blank">https://docs.microsoft.com/en-us/windows-hardware/drivers/devtest/28727-banned-api-usage-use-updated-function-replacement</a></p>
]]>
    </description>
    <internalKey>C28727</internalKey>
    <severity>INFO</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C28730</key>
    <name>C28730: Possible assignment of '\\0' directly to a pointer</name>
    <description><![CDATA[<p>
This warning indicates a probable typographical error: a nul character is being assigned to a pointer; it is probably the case that the character is intended as a string terminator and should be assigned to the memory where the pointer is pointing.
</p><h2>Microsoft Documentation</h2>
<p><a href="https://docs.microsoft.com/en-us/windows-hardware/drivers/devtest/28730-possible-null-character-assignment" target="_blank">https://docs.microsoft.com/en-us/windows-hardware/drivers/devtest/28730-possible-null-character-assignment</a></p>
]]>
    </description>
    <internalKey>C28730</internalKey>
    <severity>INFO</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C28735</key>
    <name>C28735: Banned Crimson API Usage</name>
    <description><![CDATA[<p>
This warning indicates that a legacy Crimson API is being used. These APIs have been replaced by the Event Tracing for Windows (ETW) model, which improves both performance and security.
</p><h2>Microsoft Documentation</h2>
<p><a href="https://docs.microsoft.com/en-us/windows-hardware/drivers/devtest/28735-banned-crimson-api-usage" target="_blank">https://docs.microsoft.com/en-us/windows-hardware/drivers/devtest/28735-banned-crimson-api-usage</a></p>
]]>
    </description>
    <internalKey>C28735</internalKey>
    <severity>INFO</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C28736</key>
    <name>C28736: Banned API Argument Usage</name>
    <description><![CDATA[<p>
This warning indicates that a legacy Crimson or Perflib consumer API with a banned argument is being used. 
</p><h2>Microsoft Documentation</h2>
<p><a href="https://docs.microsoft.com/en-us/windows-hardware/drivers/devtest/28736-legacy-crimson-or-perflib-banned-argument-used" target="_blank">https://docs.microsoft.com/en-us/windows-hardware/drivers/devtest/28736-legacy-crimson-or-perflib-banned-argument-used</a></p>
]]>
    </description>
    <internalKey>C28736</internalKey>
    <severity>INFO</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C28750</key>
    <name>C28750: Banned usage of lstrlen and its variants</name>
    <description><![CDATA[<p>
This warning indicates that a function is being used that has been banned, and has better replacements.
</p><h2>Microsoft Documentation</h2>
<p><a href="https://docs.microsoft.com/en-us/windows-hardware/drivers/devtest/28750-banned-istrlen-usage" target="_blank">https://docs.microsoft.com/en-us/windows-hardware/drivers/devtest/28750-banned-istrlen-usage</a></p>
]]>
    </description>
    <internalKey>C28750</internalKey>
    <severity>INFO</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
  <rule>
    <key>C28751</key>
    <name>C28751: Banned usage of ExAllocatePool and its variants</name>
    <description><![CDATA[<p>
This warning indicates that a function is being used that has been banned, and has a more robust and secure replacement.
</p><h2>Microsoft Documentation</h2>
<p><a href="https://docs.microsoft.com/en-us/windows-hardware/drivers/devtest/28751-banned-exallocatepool-usage" target="_blank">https://docs.microsoft.com/en-us/windows-hardware/drivers/devtest/28751-banned-exallocatepool-usage</a></p>
]]>
    </description>
    <internalKey>C28751</internalKey>
    <severity>INFO</severity>
    <type>CODE_SMELL</type>
    <remediationFunction>LINEAR</remediationFunction>
    <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
  </rule>
</rules>
