#
# The following is a grammar in Relax NG Compact syntax for
# JUnit-compatible report files which sonar-cxx is able to import.
# Many test frameworks are able to generate output which is JUnit-compatible
# or at least, 'JUnit-inspirated'. The following grammar
# combines the flavors implemented by JUnit itself and Googletest.
#
# It can be used to validate xunit-reports, i.e. to determine, if
# a report is valid according to the expectations of sonar-cxx.
# It can be done as follows:
#
# $ rnv xunit.rnc <your xml report>
#
# rnv is a XML validator which can be obtained here:
# http://www.davidashen.net/rnv.html
#

start = TestSuites

TestSuites = element testsuites {
   # The following attributes are accepted but ignored, thus 'optional'
   attribute tests { text } ?,
   attribute failures { text } ?,
   attribute disabled { text } ?,
   attribute errors { text } ?,
   attribute time { text } ?,
   attribute name { text } ?,
   attribute ignored { text } ?,

   TestSuite*
}

# The output from a single testsuite. The way how testcases are
# composed into testsuites is framework dependend.
TestSuite = element testsuite {
   attribute name { text },

   # This is our extension which helps to locate test resources. If
   # present, the value of this attribute is interpreted as path to
   # the source file which contains the testcases inside this
   # testsuite.
   # (TODO: test if both relative and absolute paths work)
   #
   attribute filename { text }?,

   # The following attributes are accepted but ignored, thus 'optional'
   attribute tests { text } ?,
   attribute failures { text } ?,
   attribute disabled { text } ?,
   attribute errors { text } ?,
   attribute time { text } ?,
   attribute skipped { text } ?,

   # Defined properties (name-value pairs) at test execution.
   # Ignored by the plugin, thus optional.
   element properties {
      element property {
         attribute name { text },
         attribute value { text }
      }+
   }?,

   (TestSuite* | TestCase*)
}

TestCase = element testcase {
   # Name of the testcase which is displayed in the UI.
   attribute name { text },

   # The value of the classname attribute varies quite a lot across test frameworks.
   # supported: unqualified classname, classname or filename
   # qualified name: ((namespacename|structname|classname)::)*(namespacename|structname|classname)
   attribute classname { text },

   # Execution time of the testcase in ms. Is parsed and passed to SQ.
   attribute time { text },

   # Status is evaluated optionally: googletest marks skipped tests
   # with status="notrun"
   attribute status { text }?,

   # Test failed
   # Indicates that the test failed. A failure is a test which
   # the code has explicitly failed by using the mechanisms for
   # that purpose. For example via an assertEquals.
   ( element failure {
      attribute message { text },
      attribute type { text } ?,
      text

      # Test errored
      # Indicates that the test errored. An errored test is one
      # that had an unanticipated problem. For example an unchecked
      # throwable or a problem with the implementation of the test.
   } | element error {
      attribute message { text },
      attribute type { text } ?,
      text

      # Test was skipped (JUnit-style)
   } | element skipped {
      attribute message { text } ?,
      attribute type { text } ?,
      text?

      # Test was successfull
   } | empty )
}
