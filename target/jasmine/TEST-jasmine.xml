<?xml version="1.0" encoding="UTF-8" ?><testsuite errors="0" name="jasmine.specs" tests="275" failures="0" skipped="0" hostname="localhost" time="0.0" timestamp="2018-10-01T00:33:25"><testcase classname="jasmine" name="first can pull out the first element of an array" time="0.0" failure="false"/><testcase classname="jasmine" name="first can perform OO-style &quot;first()&quot;" time="0.0" failure="false"/><testcase classname="jasmine" name="first can pass an index to first" time="0.0" failure="false"/><testcase classname="jasmine" name="first can pass an index to first" time="0.0" failure="false"/><testcase classname="jasmine" name="first can pass an index to first" time="0.0" failure="false"/><testcase classname="jasmine" name="first works on an arguments object." time="0.0" failure="false"/><testcase classname="jasmine" name="first works well with _.map" time="0.0" failure="false"/><testcase classname="jasmine" name="first aliased as take" time="0.0" failure="false"/><testcase classname="jasmine" name="first handles nulls" time="0.0" failure="false"/><testcase classname="jasmine" name="first undefined" time="0.0" failure="false"/><testcase classname="jasmine" name="rest working rest()" time="0.0" failure="false"/><testcase classname="jasmine" name="rest working rest(0)" time="0.0" failure="false"/><testcase classname="jasmine" name="rest rest can take an index" time="0.0" failure="false"/><testcase classname="jasmine" name="rest aliased as tail and works on arguments object" time="0.0" failure="false"/><testcase classname="jasmine" name="rest works well with _.map" time="0.0" failure="false"/><testcase classname="jasmine" name="rest aliased as drop and works on arguments object" time="0.0" failure="false"/><testcase classname="jasmine" name="initial working initial()" time="0.0" failure="false"/><testcase classname="jasmine" name="initial initial can take an index" time="0.0" failure="false"/><testcase classname="jasmine" name="initial initial works on arguments object" time="0.0" failure="false"/><testcase classname="jasmine" name="initial initial works with _.map" time="0.0" failure="false"/><testcase classname="jasmine" name="last can pull out the last element of an array" time="0.0" failure="false"/><testcase classname="jasmine" name="last can pass an index to last" time="0.0" failure="false"/><testcase classname="jasmine" name="last can pass an index to last" time="0.0" failure="false"/><testcase classname="jasmine" name="last can pass an index to last" time="0.0" failure="false"/><testcase classname="jasmine" name="last works on an arguments object" time="0.0" failure="false"/><testcase classname="jasmine" name="last works well with _.map" time="0.0" failure="false"/><testcase classname="jasmine" name="last handles nulls" time="0.0" failure="false"/><testcase classname="jasmine" name="last undefined" time="0.0" failure="false"/><testcase classname="jasmine" name="compact can trim out all falsy values" time="0.0" failure="false"/><testcase classname="jasmine" name="compact works on an arguments object" time="0.0" failure="false"/><testcase classname="jasmine" name="flatten can flatten nested arrays" time="0.0" failure="false"/><testcase classname="jasmine" name="flatten can shallowly flatten nested arrays" time="0.0" failure="false"/><testcase classname="jasmine" name="flatten works on an arguments object" time="0.0" failure="false"/><testcase classname="jasmine" name="flatten can shallowly flatten arrays containing only other arrays" time="0.0" failure="false"/><testcase classname="jasmine" name="without can remove all instances of an object" time="0.0" failure="false"/><testcase classname="jasmine" name="without works on an arguments object" time="0.0" failure="false"/><testcase classname="jasmine" name="uniq can find the unique values of an unsorted array" time="0.0" failure="false"/><testcase classname="jasmine" name="uniq can find the unique values of a sorted array faster" time="0.0" failure="false"/><testcase classname="jasmine" name="uniq can find the unique values of an array using a custom iterator" time="0.0" failure="false"/><testcase classname="jasmine" name="uniq can find the unique values of an array using a custom iterator without specifying whether array is sorted" time="0.0" failure="false"/><testcase classname="jasmine" name="uniq iterator works with sorted array" time="0.0" failure="false"/><testcase classname="jasmine" name="uniq works on an arguments object" time="0.0" failure="false"/><testcase classname="jasmine" name="uniq undefined" time="0.0" failure="false"/><testcase classname="jasmine" name="uniq undefined" time="0.0" failure="false"/><testcase classname="jasmine" name="uniq undefined" time="0.0" failure="false"/><testcase classname="jasmine" name="uniq undefined" time="0.0" failure="false"/><testcase classname="jasmine" name="intersection can take the set intersection of two arrays" time="0.0" failure="false"/><testcase classname="jasmine" name="intersection can perform an OO-style intersection" time="0.0" failure="false"/><testcase classname="jasmine" name="intersection works on an arguments object" time="0.0" failure="false"/><testcase classname="jasmine" name="intersection returns a duplicate-free array" time="0.0" failure="false"/><testcase classname="jasmine" name="intersection preserves order of first array" time="0.0" failure="false"/><testcase classname="jasmine" name="intersection returns an empty array when passed null as first argument" time="0.0" failure="false"/><testcase classname="jasmine" name="intersection returns an empty array when passed null as first argument" time="0.0" failure="false"/><testcase classname="jasmine" name="intersection returns an empty array when passed null as argument beyond the first" time="0.0" failure="false"/><testcase classname="jasmine" name="intersection returns an empty array when passed null as argument beyond the first" time="0.0" failure="false"/><testcase classname="jasmine" name="union takes the union of a list of arrays" time="0.0" failure="false"/><testcase classname="jasmine" name="union takes the union of a list of nested arrays" time="0.0" failure="false"/><testcase classname="jasmine" name="union takes the union of a list of arrays" time="0.0" failure="false"/><testcase classname="jasmine" name="difference takes the difference of two arrays" time="0.0" failure="false"/><testcase classname="jasmine" name="difference takes the difference of three arrays" time="0.0" failure="false"/><testcase classname="jasmine" name="zip zipped together arrays of different lengths" time="0.0" failure="false"/><testcase classname="jasmine" name="zip zipped pairs" time="0.0" failure="false"/><testcase classname="jasmine" name="zip zipped pairs with empties" time="0.0" failure="false"/><testcase classname="jasmine" name="zip unzipped empty" time="0.0" failure="false"/><testcase classname="jasmine" name="indexOf can compute indexOf, even without the native function" time="0.0" failure="false"/><testcase classname="jasmine" name="indexOf works on an arguments object" time="0.0" failure="false"/><testcase classname="jasmine" name="indexOf handles nulls properly" time="0.0" failure="false"/><testcase classname="jasmine" name="indexOf 35 is not in the list" time="0.0" failure="false"/><testcase classname="jasmine" name="indexOf 40 is in the list" time="0.0" failure="false"/><testcase classname="jasmine" name="indexOf 40 is in the list" time="0.0" failure="false"/><testcase classname="jasmine" name="indexOf supports the fromIndex argument" time="0.0" failure="false"/><testcase classname="jasmine" name="lastIndexOf undefined" time="0.0" failure="false"/><testcase classname="jasmine" name="lastIndexOf can compute lastIndexOf, even without the native function" time="0.0" failure="false"/><testcase classname="jasmine" name="lastIndexOf lastIndexOf the other element" time="0.0" failure="false"/><testcase classname="jasmine" name="lastIndexOf works on an arguments object" time="0.0" failure="false"/><testcase classname="jasmine" name="lastIndexOf handles nulls properly" time="0.0" failure="false"/><testcase classname="jasmine" name="lastIndexOf supports the fromIndex argument" time="0.0" failure="false"/><testcase classname="jasmine" name="range range with 0 as a first argument generates an empty array" time="0.0" failure="false"/><testcase classname="jasmine" name="range range with a single positive argument generates an array of elements 0,1,2,...,n-1" time="0.0" failure="false"/><testcase classname="jasmine" name="range range with two arguments a &amp;amp; b, a&amp;lt;b generates an array of elements a,a+1,a+2,...,b-2,b-1" time="0.0" failure="false"/><testcase classname="jasmine" name="range range with two arguments a &amp;amp; b, b&amp;lt;a generates an empty array" time="0.0" failure="false"/><testcase classname="jasmine" name="range range with three arguments a &amp;amp; b &amp;amp; c, c &amp;lt; b-a, a &amp;lt; b generates an array of elements a,a+c,a+2c,...,b - (multiplier of a) &amp;lt; c" time="0.0" failure="false"/><testcase classname="jasmine" name="range range with three arguments a &amp;amp; b &amp;amp; c, c &amp;gt; b-a, a &amp;lt; b generates an array with a single element, equal to a" time="0.0" failure="false"/><testcase classname="jasmine" name="range range with three arguments a &amp;amp; b &amp;amp; c, a &amp;gt; b, c &amp;lt; 0 generates an array of elements a,a-c,a-2c and ends with the number not less than b" time="0.0" failure="false"/><testcase classname="jasmine" name="range final example in the Python docs" time="0.0" failure="false"/><testcase classname="jasmine" name="select/reject/sortBy filtered and reversed the numbers" time="0.0" failure="false"/><testcase classname="jasmine" name="select/reject/sortBy in functional style filtered and reversed the numbers" time="0.0" failure="false"/><testcase classname="jasmine" name="reverse/concat/unshift/pop/map can chain together array functions." time="0.0" failure="false"/><testcase classname="jasmine" name="chaining works in small stages undefined" time="0.0" failure="false"/><testcase classname="jasmine" name="chaining works in small stages undefined" time="0.0" failure="false"/><testcase classname="jasmine" name="each each iterators provide value and iteration count" time="0.0" failure="false"/><testcase classname="jasmine" name="each each iterators provide value and iteration count" time="0.0" failure="false"/><testcase classname="jasmine" name="each each iterators provide value and iteration count" time="0.0" failure="false"/><testcase classname="jasmine" name="each context object property accessed" time="0.0" failure="false"/><testcase classname="jasmine" name="each aliased as &quot;forEach&quot;" time="0.0" failure="false"/><testcase classname="jasmine" name="each iterating over objects works, and ignores the object prototype." time="0.0" failure="false"/><testcase classname="jasmine" name="each handles a null properly" time="0.0" failure="false"/><testcase classname="jasmine" name="each undefined" time="0.0" failure="false"/><testcase classname="jasmine" name="each undefined" time="0.0" failure="false"/><testcase classname="jasmine" name="map doubled numbers" time="0.0" failure="false"/><testcase classname="jasmine" name="map aliased as &quot;collect&quot;" time="0.0" failure="false"/><testcase classname="jasmine" name="map tripled numbers with context" time="0.0" failure="false"/><testcase classname="jasmine" name="map OO-style doubled numbers" time="0.0" failure="false"/><testcase classname="jasmine" name="map Can use collection methods on Array-likes." time="0.0" failure="false"/><testcase classname="jasmine" name="reduce can sum up an array" time="0.0" failure="false"/><testcase classname="jasmine" name="reduce can reduce with a context object" time="0.0" failure="false"/><testcase classname="jasmine" name="reduce aliased as &quot;inject&quot;" time="0.0" failure="false"/><testcase classname="jasmine" name="reduce OO-style reduce" time="0.0" failure="false"/><testcase classname="jasmine" name="reduce default initial value" time="0.0" failure="false"/><testcase classname="jasmine" name="reduce can reduce via multiplication" time="0.0" failure="false"/><testcase classname="jasmine" name="reduceRight can perform right folds" time="0.0" failure="false"/><testcase classname="jasmine" name="reduceRight aliased as &quot;foldr&quot;" time="0.0" failure="false"/><testcase classname="jasmine" name="reduceRight default initial value" time="0.0" failure="false"/><testcase classname="jasmine" name="reduceRight default initial value on object" time="0.0" failure="false"/><testcase classname="jasmine" name="reduceRight undefined" time="0.0" failure="false"/><testcase classname="jasmine" name="reduceRight undefined" time="0.0" failure="false"/><testcase classname="jasmine" name="find should return first found `value`" time="0.0" failure="false"/><testcase classname="jasmine" name="find should return `undefined` if `value` is not found" time="0.0" failure="false"/><testcase classname="jasmine" name="detect found the first &quot;2&quot; and broke the loop" time="0.0" failure="false"/><testcase classname="jasmine" name="select selected each even number" time="0.0" failure="false"/><testcase classname="jasmine" name="select aliased as &quot;filter&quot;" time="0.0" failure="false"/><testcase classname="jasmine" name="reject rejected each even number" time="0.0" failure="false"/><testcase classname="jasmine" name="reject undefined" time="0.0" failure="false"/><testcase classname="jasmine" name="reject undefined" time="0.0" failure="false"/><testcase classname="jasmine" name="reject undefined" time="0.0" failure="false"/><testcase classname="jasmine" name="reject undefined" time="0.0" failure="false"/><testcase classname="jasmine" name="reject undefined" time="0.0" failure="false"/><testcase classname="jasmine" name="reject undefined" time="0.0" failure="false"/><testcase classname="jasmine" name="reject rejected each odd number" time="0.0" failure="false"/><testcase classname="jasmine" name="invoke first array sorted" time="0.0" failure="false"/><testcase classname="jasmine" name="invoke second array sorted" time="0.0" failure="false"/><testcase classname="jasmine" name="invoke w/ function reference first array sorted" time="0.0" failure="false"/><testcase classname="jasmine" name="invoke w/ function reference second array sorted" time="0.0" failure="false"/><testcase classname="jasmine" name="invoke when strings have a call method call function exists" time="0.0" failure="false"/><testcase classname="jasmine" name="invoke when strings have a call method first array sorted" time="0.0" failure="false"/><testcase classname="jasmine" name="invoke when strings have a call method second array sorted" time="0.0" failure="false"/><testcase classname="jasmine" name="invoke when strings have a call method call function removed" time="0.0" failure="false"/><testcase classname="jasmine" name="pluck pulls names out of objects" time="0.0" failure="false"/><testcase classname="jasmine" name="where undefined" time="0.0" failure="false"/><testcase classname="jasmine" name="where undefined" time="0.0" failure="false"/><testcase classname="jasmine" name="where undefined" time="0.0" failure="false"/><testcase classname="jasmine" name="where undefined" time="0.0" failure="false"/><testcase classname="jasmine" name="where undefined" time="0.0" failure="false"/><testcase classname="jasmine" name="findWhere undefined" time="0.0" failure="false"/><testcase classname="jasmine" name="findWhere undefined" time="0.0" failure="false"/><testcase classname="jasmine" name="max can perform a regular Math.max" time="0.0" failure="false"/><testcase classname="jasmine" name="max can perform a computation-based max" time="0.0" failure="false"/><testcase classname="jasmine" name="max Maximum value of an empty object" time="0.0" failure="false"/><testcase classname="jasmine" name="max Maximum value of an empty array" time="0.0" failure="false"/><testcase classname="jasmine" name="max Maximum value of a non-numeric collection" time="0.0" failure="false"/><testcase classname="jasmine" name="max Maximum value of a too-big array" time="0.0" failure="false"/><testcase classname="jasmine" name="min can perform a regular Math.min" time="0.0" failure="false"/><testcase classname="jasmine" name="min can perform a computation-based min" time="0.0" failure="false"/><testcase classname="jasmine" name="min Minimum value of an empty object" time="0.0" failure="false"/><testcase classname="jasmine" name="min Minimum value of an empty array" time="0.0" failure="false"/><testcase classname="jasmine" name="min Minimum value of a non-numeric collection" time="0.0" failure="false"/><testcase classname="jasmine" name="min undefined" time="0.0" failure="false"/><testcase classname="jasmine" name="min Minimum value of a too-big array" time="0.0" failure="false"/><testcase classname="jasmine" name="sortBy stooges sorted by age" time="0.0" failure="false"/><testcase classname="jasmine" name="sortBy sortBy with undefined values" time="0.0" failure="false"/><testcase classname="jasmine" name="sortBy sorted by length" time="0.0" failure="false"/><testcase classname="jasmine" name="sortBy sortBy should be stable" time="0.0" failure="false"/><testcase classname="jasmine" name="sortBy uses _.identity if iterator is not specified" time="0.0" failure="false"/><testcase classname="jasmine" name="groupBy put each even number in the right group" time="0.0" failure="false"/><testcase classname="jasmine" name="groupBy undefined" time="0.0" failure="false"/><testcase classname="jasmine" name="groupBy undefined" time="0.0" failure="false"/><testcase classname="jasmine" name="groupBy undefined" time="0.0" failure="false"/><testcase classname="jasmine" name="groupBy undefined" time="0.0" failure="false"/><testcase classname="jasmine" name="groupBy undefined" time="0.0" failure="false"/><testcase classname="jasmine" name="groupBy undefined" time="0.0" failure="false"/><testcase classname="jasmine" name="groupBy undefined" time="0.0" failure="false"/><testcase classname="jasmine" name="groupBy undefined" time="0.0" failure="false"/><testcase classname="jasmine" name="groupBy undefined" time="0.0" failure="false"/><testcase classname="jasmine" name="indexBy undefined" time="0.0" failure="false"/><testcase classname="jasmine" name="indexBy undefined" time="0.0" failure="false"/><testcase classname="jasmine" name="indexBy undefined" time="0.0" failure="false"/><testcase classname="jasmine" name="indexBy undefined" time="0.0" failure="false"/><testcase classname="jasmine" name="indexBy undefined" time="0.0" failure="false"/><testcase classname="jasmine" name="indexBy undefined" time="0.0" failure="false"/><testcase classname="jasmine" name="indexBy undefined" time="0.0" failure="false"/><testcase classname="jasmine" name="indexBy undefined" time="0.0" failure="false"/><testcase classname="jasmine" name="countBy undefined" time="0.0" failure="false"/><testcase classname="jasmine" name="countBy undefined" time="0.0" failure="false"/><testcase classname="jasmine" name="countBy undefined" time="0.0" failure="false"/><testcase classname="jasmine" name="countBy undefined" time="0.0" failure="false"/><testcase classname="jasmine" name="countBy undefined" time="0.0" failure="false"/><testcase classname="jasmine" name="countBy undefined" time="0.0" failure="false"/><testcase classname="jasmine" name="countBy undefined" time="0.0" failure="false"/><testcase classname="jasmine" name="countBy undefined" time="0.0" failure="false"/><testcase classname="jasmine" name="countBy undefined" time="0.0" failure="false"/><testcase classname="jasmine" name="sortedIndex 35 should be inserted at index 3" time="0.0" failure="false"/><testcase classname="jasmine" name="sortedIndex 30 should be inserted at index 2" time="0.0" failure="false"/><testcase classname="jasmine" name="sortedIndex undefined" time="0.0" failure="false"/><testcase classname="jasmine" name="sortedIndex undefined" time="0.0" failure="false"/><testcase classname="jasmine" name="sortedIndex undefined" time="0.0" failure="false"/><testcase classname="jasmine" name="shuffle original object is unmodified" time="0.0" failure="false"/><testcase classname="jasmine" name="shuffle contains the same members before and after shuffle" time="0.0" failure="false"/><testcase classname="jasmine" name="sample contains the same members before and after sample" time="0.0" failure="false"/><testcase classname="jasmine" name="sample also works when sampling more objects than are present" time="0.0" failure="false"/><testcase classname="jasmine" name="sample sampling empty array with no number returns undefined" time="0.0" failure="false"/><testcase classname="jasmine" name="sample sampling empty array with a number returns an empty array" time="0.0" failure="false"/><testcase classname="jasmine" name="sample sampling an array with 0 picks returns an empty array" time="0.0" failure="false"/><testcase classname="jasmine" name="sample sampling a negative number of picks returns an empty array" time="0.0" failure="false"/><testcase classname="jasmine" name="toArray cloned array contains same elements" time="0.0" failure="false"/><testcase classname="jasmine" name="toArray object flattened into array" time="0.0" failure="false"/><testcase classname="jasmine" name="size can compute the size of an object" time="0.0" failure="false"/><testcase classname="jasmine" name="size can compute the size of an array" time="0.0" failure="false"/><testcase classname="jasmine" name="size can compute the size of Array-likes" time="0.0" failure="false"/><testcase classname="jasmine" name="size can test the size of the arguments object" time="0.0" failure="false"/><testcase classname="jasmine" name="size can compute the size of a string literal" time="0.0" failure="false"/><testcase classname="jasmine" name="size can compute the size of string object" time="0.0" failure="false"/><testcase classname="jasmine" name="size handles nulls" time="0.0" failure="false"/><testcase classname="jasmine" name="partition handles bool return values" time="0.0" failure="false"/><testcase classname="jasmine" name="partition handles 0 and 1 return values" time="0.0" failure="false"/><testcase classname="jasmine" name="partition handles other numeric return values" time="0.0" failure="false"/><testcase classname="jasmine" name="partition handles null return values" time="0.0" failure="false"/><testcase classname="jasmine" name="partition handles undefined return values" time="0.0" failure="false"/><testcase classname="jasmine" name="partition handles objects" time="0.0" failure="false"/><testcase classname="jasmine" name="partition Default iterator" time="0.0" failure="false"/><testcase classname="jasmine" name="partition Takes a string" time="0.0" failure="false"/><testcase classname="jasmine" name="partition partition takes a context argument" time="0.0" failure="false"/><testcase classname="jasmine" name="bind can bind a function to a context" time="0.0" failure="false"/><testcase classname="jasmine" name="bind can do OO-style binding" time="0.0" failure="false"/><testcase classname="jasmine" name="bind can bind without specifying a context" time="0.0" failure="false"/><testcase classname="jasmine" name="bind the function was partially applied in advance" time="0.0" failure="false"/><testcase classname="jasmine" name="bind the function was completely applied in advance" time="0.0" failure="false"/><testcase classname="jasmine" name="bind the function was partially applied in advance and can accept multiple arguments" time="0.0" failure="false"/><testcase classname="jasmine" name="bind function should not be bound to the context, to comply with ECMAScript 5" time="0.0" failure="false"/><testcase classname="jasmine" name="bind When called without the new operator, it's OK to be bound to the context" time="0.0" failure="false"/><testcase classname="jasmine" name="once undefined" time="0.0" failure="false"/><testcase classname="jasmine" name="once stores a memo to the last value" time="0.0" failure="false"/><testcase classname="jasmine" name="underscore tests each" time="0.0" failure="false"/><testcase classname="jasmine" name="underscore tests eachMap" time="0.0" failure="false"/><testcase classname="jasmine" name="underscore tests map" time="0.0" failure="false"/><testcase classname="jasmine" name="underscore tests mapMap" time="0.0" failure="false"/><testcase classname="jasmine" name="underscore tests reduce" time="0.0" failure="false"/><testcase classname="jasmine" name="underscore tests reduceRight" time="0.0" failure="false"/><testcase classname="jasmine" name="underscore tests foldl" time="0.0" failure="false"/><testcase classname="jasmine" name="underscore tests foldr" time="0.0" failure="false"/><testcase classname="jasmine" name="underscore tests contains" time="0.0" failure="false"/><testcase classname="jasmine" name="underscore tests find" time="0.0" failure="false"/><testcase classname="jasmine" name="underscore tests filter" time="0.0" failure="false"/><testcase classname="jasmine" name="underscore tests where" time="0.0" failure="false"/><testcase classname="jasmine" name="underscore tests first" time="0.0" failure="false"/><testcase classname="jasmine" name="underscore tests initial" time="0.0" failure="false"/><testcase classname="jasmine" name="underscore tests last" time="0.0" failure="false"/><testcase classname="jasmine" name="underscore tests flatten" time="0.0" failure="false"/><testcase classname="jasmine" name="underscore tests compact" time="0.0" failure="false"/><testcase classname="jasmine" name="underscore tests without" time="0.0" failure="false"/><testcase classname="jasmine" name="underscore tests max" time="0.0" failure="false"/><testcase classname="jasmine" name="underscore tests min" time="0.0" failure="false"/><testcase classname="jasmine" name="underscore tests shuffle" time="0.0" failure="false"/><testcase classname="jasmine" name="underscore tests sample" time="0.0" failure="false"/><testcase classname="jasmine" name="underscore tests pluck" time="0.0" failure="false"/><testcase classname="jasmine" name="underscore tests sortBy" time="0.0" failure="false"/><testcase classname="jasmine" name="underscore tests groupBy" time="0.0" failure="false"/><testcase classname="jasmine" name="underscore tests indexBy" time="0.0" failure="false"/><testcase classname="jasmine" name="underscore tests toArray" time="0.0" failure="false"/><testcase classname="jasmine" name="underscore tests size" time="0.0" failure="false"/><testcase classname="jasmine" name="underscore tests union" time="0.0" failure="false"/><testcase classname="jasmine" name="underscore tests intersection" time="0.0" failure="false"/><testcase classname="jasmine" name="underscore tests difference" time="0.0" failure="false"/><testcase classname="jasmine" name="underscore tests uniq" time="0.0" failure="false"/><testcase classname="jasmine" name="underscore tests zip" time="0.0" failure="false"/><testcase classname="jasmine" name="underscore tests object" time="0.0" failure="false"/><testcase classname="jasmine" name="underscore tests indexOf" time="0.0" failure="false"/><testcase classname="jasmine" name="underscore tests lastIndexOf" time="0.0" failure="false"/><testcase classname="jasmine" name="underscore tests sortedIndex" time="0.0" failure="false"/><testcase classname="jasmine" name="underscore tests range" time="0.0" failure="false"/><testcase classname="jasmine" name="underscore tests chain" time="0.0" failure="false"/><testcase classname="jasmine" name="underscore tests template" time="0.0" failure="false"/><testcase classname="jasmine" name="underscore tests template each" time="0.0" failure="false"/><testcase classname="jasmine" name="underscore tests template value" time="0.0" failure="false"/><testcase classname="jasmine" name="underscore tests template print" time="0.0" failure="false"/><testcase classname="jasmine" name="underscore tests chain" time="0.0" failure="false"/></testsuite>