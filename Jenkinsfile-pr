#!/usr/bin/env groovy

def storeArtifacts() {
    sh './systemtests/scripts/store_kubernetes_info.sh "artifacts/openshift-info/"'
    sh './systemtests/scripts/collect_logs.sh "/tmp/testlogs" "artifacts/openshift-logs"'
    sh 'rm -rf /tmp/testlogs'
}

def tearDownOpenshift() {
    echo "tear down openshift"
    sh './systemtests/scripts/teardown-openshift.sh'
}

pipeline {
    agent {
        node {
            label 'enmasse'
        }
    }
    parameters {
        //execute all tests as default for each new Pull request
        string(name: 'TEST_CASE', defaultValue: '', description: 'maven parameter for executing specific tests')
    }
    options {
        timeout(time: 6, unit: 'HOURS')
    }
    environment {
        DOCKER_REGISTRY = '172.30.1.1:5000'
        DOCKER_ORG = 'enmasseci'
        TAG = "${BUILD_TAG}"
        COMMIT = "${BUILD_TAG}"
        CORES_DIR = "/tmp/cores"
    }
    stages {
        stage('clean') {
            steps {
                cleanWs()
                sh 'docker stop $(docker ps -q) || true'
                sh 'docker rm $(docker ps -a -q) -f || true'
                sh 'docker rmi $(docker images -q) -f || true'
            }
        }
        stage('checkout') {
            steps {
                checkout scm
                sh 'git submodule update --init --recursive'
                sh 'rm -rf artifacts && mkdir -p artifacts'
            }
        }
        stage('build') {
            steps {
                sh 'MOCHA_ARGS="--reporter=mocha-junit-reporter" make'
                sh 'cat templates/install/openshift/enmasse.yaml'
                sh 'make docker_tag'
            }
        }
        stage('start openshift') {
            steps {
                timeout(time: 10, unit: 'MINUTES') {
                    sh './systemtests/scripts/setup-openshift.sh'
                    sh 'sudo chmod -R 777 /var/lib/origin/openshift.local.config'
                }
            }
        }
        stage('push docker images') {
            steps {
                sh 'oc login -u test -p test'
                sh 'oc new-project enmasseci'
                sh '$DOCKER login -u unused -p `oc whoami -t` $DOCKER_REGISTRY'
                sh 'make docker_push'
            }
        }
        stage('system tests') {
            environment {
                DISPLAY = ':10'
                ARTIFACTS_DIR = 'artifacts'
                JOB_NAME_SUB = "${String.format("%.15s", JOB_NAME)}"
                OPENSHIFT_PROJECT = "${JOB_NAME_SUB}${BUILD_NUMBER}"
                USE_DUMMY_ADDRESS = true
            }
            steps {
                withCredentials([string(credentialsId: 'openshift-host', variable: 'OPENSHIFT_URL'), usernamePassword(credentialsId: 'openshift-credentials', passwordVariable: 'OPENSHIFT_PASSWD', usernameVariable: 'OPENSHIFT_USER')]) {
                    sh "sudo ./systemtests/scripts/enable_core_dumps.sh ${env.CORES_DIR}"
                    sh "./systemtests/scripts/run_test_component.sh templates/install /var/lib/origin/openshift.local.config/master/admin.kubeconfig ${params.TEST_CASE} ''"
                }
            }
        }
    }
    post {
        always {
            storeArtifacts() // collects openshift info, logs etc
            //store test results from build and system tests
            junit '**/TEST-*.xml'

            //archive test results and openshift logs
            archive '**/TEST-*.xml'
            archive 'templates/install/**'
            sh "sudo tar -czvf core-dumps.tar.gz ${env.CORES_DIR}/"
            sh "sudo mv core-dumps.tar.gz artifacts/"
            archive 'artifacts/**'
            tearDownOpenshift()
            sh "./systemtests/scripts/check_and_clear_cores.sh ${env.CORES_DIR}"
        }
        failure {
            echo "build failed"
        }
    }
}
