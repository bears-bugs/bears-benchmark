<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Reaper: Easy Repair Management for Apache Cassandra</title>
    <link>http://cassandra-reaper.io/</link>
    <description>Recent content on Reaper: Easy Repair Management for Apache Cassandra</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	<atom:link href="http://cassandra-reaper.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title></title>
      <link>http://cassandra-reaper.io/docs/api/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://cassandra-reaper.io/docs/api/</guid>
      <description>Rest API Source code for all the REST resources can be found from package io.cassandrareaper.resources.
Ping Resource  GET /ping  Expected query parameters: None Simple ping resource that can be used to check whether the reaper is running.   Cluster Resource  GET /cluster
 Expected query parameters:  seedHost: Limit the returned cluster list based on the given seed host. (Optional)  Returns a list of registered cluster names in the service.</description>
    </item>
    
    <item>
      <title></title>
      <link>http://cassandra-reaper.io/docs/backends/cassandra/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://cassandra-reaper.io/docs/backends/cassandra/</guid>
      <description>Cassandra Backend To use Apache Cassandra as the persistent storage for Reaper, the storageType setting must be set to cassandra in the Reaper configuration YAML file. In addition, the connection details for the Apache Cassandra cluster being used to store Reaper data must be specified in the configuration YAML file. An example of how to configure H2 as persistent storage for Reaper can be found in the cassandra-reaper-cassandra.yaml.
storageType: cassandra cassandra: clusterName: &amp;quot;test&amp;quot; contactPoints: [&amp;quot;127.</description>
    </item>
    
    <item>
      <title></title>
      <link>http://cassandra-reaper.io/docs/backends/h2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://cassandra-reaper.io/docs/backends/h2/</guid>
      <description> H2 Backend To use H2 as the persistent storage for Reaper, the storageType setting must be set to h2 in the Reaper configuration YAML file. When using H2 storage, the database will be automatically created under the path configured in the configuration YAML file. An example of how to configure H2 as persistent storage for Reaper can be found in the cassandra-reaper-h2.yaml.
storageType: h2 h2: # H2 JDBC settings url: jdbc:h2:~/reaper-db/db;MODE=PostgreSQL user: password:  </description>
    </item>
    
    <item>
      <title></title>
      <link>http://cassandra-reaper.io/docs/backends/memory/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://cassandra-reaper.io/docs/backends/memory/</guid>
      <description>In-Memory Backend To use in memory storage as the storage type for Reaper, the storageType setting must be set to memory in the Reaper configuration YAML file. Note that the in memory storage is enabled by default. An example of how to configure Reaper with In-Menory storage can be found in the cassandra-reaper-memory.yaml.
storageType: memory  In-memory storage is volatile and as such all registered cluster, column families and repair information will be lost upon service restart.</description>
    </item>
    
    <item>
      <title></title>
      <link>http://cassandra-reaper.io/docs/backends/postgres/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://cassandra-reaper.io/docs/backends/postgres/</guid>
      <description>Postgres Backend To use PostgreSQL as the persistent storage for Reaper, the storageType setting must be set to postgres in the Reaper configuration YAML file. The schema will be initialized/upgraded automatically upon startup in the configured database. Ensure that the correct JDBC credentials are specified in the cassandra-reaper.yaml to allow object creation. An example of how to configure Postgres as persistent storage for Reaper can be found in the cassandra-reaper-postgres.</description>
    </item>
    
    <item>
      <title></title>
      <link>http://cassandra-reaper.io/docs/community/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://cassandra-reaper.io/docs/community/</guid>
      <description>We have a Mailing List and Gitter chat available.</description>
    </item>
    
    <item>
      <title></title>
      <link>http://cassandra-reaper.io/docs/configuration/backend_specific/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://cassandra-reaper.io/docs/configuration/backend_specific/</guid>
      <description>Backend Specific Settings Configuration settings in the cassandra-reaper.yaml that are specific to a particular backend.
Cassandra Settings The following settings are specific to a Reaper deployment that is backed by an Apache Cassandra database. Note that Cassandra backend configuration relies on the Dropwizard-Cassandra module.

activateQueryLogger Type: Boolean
Default: false
Records the CQL calls made to the Cassandra backend in the log output.

cassandra Settings to configure Reaper to use Cassandra for storage of its control data.</description>
    </item>
    
    <item>
      <title></title>
      <link>http://cassandra-reaper.io/docs/configuration/docker_vars/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://cassandra-reaper.io/docs/configuration/docker_vars/</guid>
      <description>Docker Variables The Reaper Docker container has been designed to be highly configurable. Many of the environment variables map directly or indirectly to a settings in the cassandra-reaper.yaml configuration file.
Direct Mapping to Reaper Specific Configuration Settings The Docker environment variables listed in this section map directly to Reaper specific settings in the cassandra-reaper.yaml configuration file. The following table below lists the Docker environment variables, their associated Reaper specific setting in the cassandra-reaper.</description>
    </item>
    
    <item>
      <title></title>
      <link>http://cassandra-reaper.io/docs/configuration/reaper_specific/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://cassandra-reaper.io/docs/configuration/reaper_specific/</guid>
      <description>Reaper Specific Settings Configuration settings in the cassandra-reaper.yaml that are specific to Reaper

autoScheduling Optional setting to automatically setup repair schedules for all non-system keyspaces in a cluster. If enabled, adding a new cluster will automatically setup a schedule repair for each keyspace. Cluster keyspaces are monitored based on a configurable frequency, so that adding or removing a keyspace will result in adding / removing the corresponding scheduled repairs.</description>
    </item>
    
    <item>
      <title></title>
      <link>http://cassandra-reaper.io/docs/download/building/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://cassandra-reaper.io/docs/download/building/</guid>
      <description>Building Install Packages Debian packages and RPMs can be built from this project using Make, for example:
make deb make rpm  Building JARs from source The easiest way to build is to use the following make command:
make package  To build Reaper without rebuilding the UI, run the following command:
mvn clean package  To only regenerate the UI (requires npm and bower):
mvn generate-sources -Pbuild-ui  To rebuild both the UI and Reaper:</description>
    </item>
    
    <item>
      <title></title>
      <link>http://cassandra-reaper.io/docs/download/docker/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://cassandra-reaper.io/docs/download/docker/</guid>
      <description>Docker Docker and Docker Compose will need to be installed in order to use the commands in this section.
Building Reaper Packages with Docker Building Reaper packages requires quite a few dependencies, especially when making changes to the web interface code. In an effort to simplify the build process, Dockerfiles have been created that implement the build actions required to package Reaper.
To build the JAR and other packages which are then placed in the src/packages directory run the following commands:</description>
    </item>
    
    <item>
      <title></title>
      <link>http://cassandra-reaper.io/docs/download/install/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://cassandra-reaper.io/docs/download/install/</guid>
      <description>Running Reaper After modifying the resource/cassandra-reaper.yaml config file, Reaper can be started using the following command line :
java -jar target/cassandra-reaper-X.X.X.jar server resource/cassandra-reaper.yaml  Once started, the UI can be accessed through : http://127.0.0.1:8080/webui/
Reaper can also be accessed using the REST API exposed on port 8080, or using the command line tool bin/spreaper
Installing and Running as a Service We provide prebuilt packages for reaper on the GitHub release page.</description>
    </item>
    
    <item>
      <title></title>
      <link>http://cassandra-reaper.io/docs/usage/add_cluster/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://cassandra-reaper.io/docs/usage/add_cluster/</guid>
      <description> Add A Cluster    Add a cluster for Reaper to manage repairs on. Enter an address of one of the nodes in the cluster. Reaper will contact that node and find the rest of the nodes in the cluster automatically.
Once you&amp;rsquo;ve done this, you&amp;rsquo;ll see the Cluster Health.   </description>
    </item>
    
    <item>
      <title></title>
      <link>http://cassandra-reaper.io/docs/usage/health/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://cassandra-reaper.io/docs/usage/health/</guid>
      <description> Cluster Health    Dashboard Once you&amp;rsquo;ve added a cluster it will show up in your dashboard.      Node View Click one of the nodes to get a popup with details on the machine&amp;rsquo;s state.   </description>
    </item>
    
    <item>
      <title></title>
      <link>http://cassandra-reaper.io/docs/usage/multi_dc/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://cassandra-reaper.io/docs/usage/multi_dc/</guid>
      <description>Reaper with multi DC clusters Single Reaper instance with JMX accessible for all DCs In the case where the JMX port is accessible (with or without authentication) from the running Reaper instance for all nodes in all DCs, it is possible to have a single instance of Reaper handle the whole cluster by using the following setting in the configuration yaml file :
datacenterAvailability: ALL  This setup works with all backends : Apache Cassandra, Memory, H2 and Postgres.</description>
    </item>
    
    <item>
      <title></title>
      <link>http://cassandra-reaper.io/docs/usage/schedule/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://cassandra-reaper.io/docs/usage/schedule/</guid>
      <description>   Schedule a repair To set up a regular repair schedule, click schedule on the left menu to bring up the schedules page. Click &amp;ldquo;Add Schedule&amp;rdquo;      Schedule a repair Fill out the schedule form and click Add Schedule.   </description>
    </item>
    
    <item>
      <title></title>
      <link>http://cassandra-reaper.io/docs/usage/single/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://cassandra-reaper.io/docs/usage/single/</guid>
      <description> Repairing A Cluster    Run a manual repair Start by clicking the repair menu item on the left side, you should see a repair page.
Click &amp;ldquo;Start a new repair&amp;rdquo;      Fill in the details Enter the keyspace, tables, and other details to start a manual repair.   </description>
    </item>
    
    <item>
      <title></title>
      <link>http://cassandra-reaper.io/faq/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://cassandra-reaper.io/faq/</guid>
      <description>Frequently Asked Questions Why use Reaper instead of noddetool + cron? While it&amp;rsquo;s possible to set up crontab to call nodetool, it requires staggering the crons to ensure overlap is kept to a minimum. Reaper is able to intelligently schedule repairs to avoid putting too much load on the cluster, avoiding impacting performance. Reaper also offers a simple UI to schedule repairs as granularly as needed.
Do I need to do repairs if I&amp;rsquo;m not deleting data?</description>
    </item>
    
    <item>
      <title></title>
      <link>http://cassandra-reaper.io/quickstart/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://cassandra-reaper.io/quickstart/</guid>
      <description></description>
    </item>
    
  </channel>
</rss>