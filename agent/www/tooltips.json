{
    "address": {
        "name": {
            "external": "{OnlineBookURL}",
            "longDescription": "The <b>address name</b> is a unique string that specifies where messages can be sent and received.",
            "shortDescription": "Type an address name"
        }
    },
    "brokered": {
        "address": {
            "queue": {
                "longDescription": "The queue address type is a store-and-forward queue. This address type is appropriate for implementing a distributed work queue, handling traffic bursts, and other use cases where you want to decouple the producer and consumer. A queue in the brokered address spaces supports selectors, message groups, transactions, and other JMS features.",
                "shortDescription": "A store-and-forward queue"
            },
            "topic": {
                "longDescription": "The topic address type supports the publish-subscribe messaging pattern where you have 1..N producers and 1..M consumers. Each message published to a topic address is forwarded to all subscribers for that address. A subscriber can also be durable, in which case messages are kept until the subscriber has acknowledged them.",
                "shortDescription": "A publish-and-subscribe address with store-and-forward semantics"
            }
        }
    },
    "standard": {
        "address": {
            "anycast": {
                "longDescription": "The anycast address type is a scalable direct address for sending messages to one consumer. Messages sent to an anycast address are not stored, but forwarded directly to the consumer. This method makes this address type ideal for request-reply (RPC) uses or even work distribution. This is the cheapest address type as it does not require any persistence.",
                "shortDescription": "A scalable 'direct' address for sending messages to one consumer"
            },
            "multicast": {
                "longDescription": "The multicast address type is a scalable direct address for sending messages to multiple consumers. Messages sent to a multicast address are forwarded to all consumers receiving messages on that address. It is important to note that only pre-settled messages can be sent to multicast addresses, as message acknowledgements from consumers are not propagated to producers.",
                "shortDescription": "A scalable 'direct' address for sending messages to multiple consumers"
            },
            "queue": {
                "longDescription": "The queue address type is a store-and-forward queue. This address type is appropriate for implementing a distributed work queue, handling traffic bursts, and other use cases where you want to decouple the producer and consumer. A queue can be sharded across multiple storage units; however, message order is no longer guaranteed.",
                "shortDescription": "A store-and-forward queue"
            },
            "topic": {
                "longDescription": "The topic address type supports the publish-subscribe messaging pattern where you have 1..N producers and 1..M consumers. Each message published to a topic address is forwarded to all subscribers for that address. A subscriber can also be durable, in which case messages are kept until the subscriber has acknowledged them.",
                "shortDescription": "A publish-subscribe topic"
            }
        }
    }
}